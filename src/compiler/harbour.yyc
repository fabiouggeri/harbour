
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         hb_comp_yyparse
#define yylex           hb_comp_yylex
#define yyerror         hb_comp_yyerror
#define yylval          hb_comp_yylval
#define yychar          hb_comp_yychar
#define yydebug         hb_comp_yydebug
#define yynerrs         hb_comp_yynerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 5 "../../../harbour.y"

/*
 * Compiler YACC rules and actions
 *
 * Copyright 1999 Antonio Linares <alinares@fivetech.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 * (or visit their website at https://www.gnu.org/licenses/).
 *
 */

/* TODO list
 * 1) Change the pcode generated by ::cVar from Self:cVar to QSELF():cVar
 *    The major problem to solve is how to support QSELF() inside a codeblock.
 */


#include "hbcomp.h"

/* Compile using: bison -d -v harbour.y */

/* to pacify some meaningless warnings */
#if defined( __BORLANDC__ )
#  if ! defined( __STDC__ )
#     define __STDC__
#  endif
#  pragma warn -aus
#  pragma warn -ccc
#  pragma warn -rch
#elif defined( __WATCOMC__ ) && defined( __cplusplus )
#  pragma warning 13 9
#  pragma warning 368 9
#elif defined( _MSC_VER )
#  pragma warning( disable : 4244 )
#  pragma warning( disable : 4702 )
#endif

#undef alloca
#define alloca  hb_xgrab
#undef malloc
#define malloc  hb_xgrab
#undef realloc
#define realloc hb_xrealloc
#undef free
#define free    hb_xfree

/* NOTE: these symbols are used internally in bison.simple
 */
#undef YYFREE
#define YYFREE hb_xfree
#undef YYMALLOC
#define YYMALLOC hb_xgrab

#define NO_YYERROR

/* NOTE: these symbols are defined explicitly to pacify warnings */
#define YYENABLE_NLS          0
#define YYLTYPE_IS_TRIVIAL    0

/* NOTE: increase the maximum size of bison stack size */
#define YYMAXDEPTH 100000

static void hb_compLoopStart( HB_COMP_DECL, HB_BOOL );
static void hb_compLoopEnd( HB_COMP_DECL );
static void hb_compLoopLoop( HB_COMP_DECL );
static void hb_compLoopExit( HB_COMP_DECL );
static void hb_compLoopHere( HB_COMP_DECL );
static long hb_compLoopCount( HB_COMP_DECL );

static void * hb_compElseIfGen( HB_COMP_DECL, void * pFirstElseIf, HB_SIZE nOffset ); /* generates a support structure for ELSEIFs pcode fixups */
static void hb_compElseIfFix( HB_COMP_DECL, void * pIfElseIfs ); /* implements the ELSEIFs pcode fixups */

static void hb_compRTVariableAdd( HB_COMP_DECL, PHB_EXPR, HB_BOOL );
static void hb_compRTVariableGen( HB_COMP_DECL, const char * );

static PHB_EXPR hb_compArrayDimPush( PHB_EXPR pInitValue, HB_COMP_DECL );
static void hb_compVariableDim( const char *, PHB_EXPR, HB_COMP_DECL );

static void hb_compForStart( HB_COMP_DECL, const char *szVarName, int iForEachDir );
static void hb_compForEnd( HB_COMP_DECL, const char *szVarName );
static void hb_compEnumStart( HB_COMP_DECL, PHB_EXPR pVars, PHB_EXPR pExprs, int descend );
static void hb_compEnumNext( HB_COMP_DECL, PHB_EXPR pExpr, int descend );
static void hb_compEnumEnd( HB_COMP_DECL, PHB_EXPR pExpr );

static void hb_compSwitchStart( HB_COMP_DECL, PHB_EXPR );
static void hb_compSwitchAdd( HB_COMP_DECL, PHB_EXPR );
static void hb_compSwitchEnd( HB_COMP_DECL );

static PHB_EXPR hb_compCheckMethod( HB_COMP_DECL, PHB_EXPR pExpr );
static PHB_EXPR hb_compCheckPassByRef( HB_COMP_DECL, PHB_EXPR pExpr );

static void hb_compErrStru( HB_COMP_DECL, int iError );
static void hb_compErrUnclosed( HB_COMP_DECL, const char * szStru );

#ifdef HB_YYDEBUG
   #define YYDEBUG        1 /* Parser debug information support */
#endif

/* Controls if passing by reference '@' is allowed */
#define HB_PASSBYREF_OFF      0
#define HB_PASSBYREF_FUNCALL  1
#define HB_PASSBYREF_ARRAY    2

static void hb_compDebugStart( void ) { }



/* Line 189 of yacc.c  */
#line 201 "harboury.c"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     FUNCTION = 258,
     PROCEDURE = 259,
     IDENTIFIER = 260,
     RETURN = 261,
     NIL = 262,
     LOCAL = 263,
     STATIC = 264,
     IIF = 265,
     IF = 266,
     ELSE = 267,
     ELSEIF = 268,
     END = 269,
     ENDIF = 270,
     ENDERR = 271,
     LITERAL = 272,
     TRUEVALUE = 273,
     FALSEVALUE = 274,
     NUM_DOUBLE = 275,
     INASSIGN = 276,
     NUM_LONG = 277,
     ANNOUNCE = 278,
     EXTERN = 279,
     DYNAMIC = 280,
     AND = 281,
     OR = 282,
     NOT = 283,
     PUBLIC = 284,
     EQ = 285,
     NE1 = 286,
     NE2 = 287,
     INC = 288,
     DEC = 289,
     ALIASOP = 290,
     DOCASE = 291,
     CASE = 292,
     OTHERWISE = 293,
     ENDCASE = 294,
     ENDDO = 295,
     MEMVAR = 296,
     WHILE = 297,
     LOOP = 298,
     EXIT = 299,
     INIT = 300,
     FOR = 301,
     NEXT = 302,
     TO = 303,
     STEP = 304,
     LE = 305,
     GE = 306,
     FIELD = 307,
     IN = 308,
     PARAMETERS = 309,
     PLUSEQ = 310,
     MINUSEQ = 311,
     MULTEQ = 312,
     DIVEQ = 313,
     POWER = 314,
     EXPEQ = 315,
     MODEQ = 316,
     PRIVATE = 317,
     BEGINSEQ = 318,
     BREAK = 319,
     RECOVER = 320,
     RECOVERUSING = 321,
     ALWAYS = 322,
     ENDSEQ = 323,
     DO = 324,
     WITH = 325,
     SELF = 326,
     LINE = 327,
     MACROVAR = 328,
     MACROTEXT = 329,
     AS_ARRAY = 330,
     AS_BLOCK = 331,
     AS_CHARACTER = 332,
     AS_CLASS = 333,
     AS_DATE = 334,
     AS_LOGICAL = 335,
     AS_NUMERIC = 336,
     AS_OBJECT = 337,
     AS_VARIANT = 338,
     AS_ARRAY_ARRAY = 339,
     AS_BLOCK_ARRAY = 340,
     AS_CHARACTER_ARRAY = 341,
     AS_CLASS_ARRAY = 342,
     AS_DATE_ARRAY = 343,
     AS_LOGICAL_ARRAY = 344,
     AS_NUMERIC_ARRAY = 345,
     AS_OBJECT_ARRAY = 346,
     DECLARE = 347,
     OPTIONAL = 348,
     DECLARE_CLASS = 349,
     DECLARE_MEMBER = 350,
     PROCREQ = 351,
     CBSTART = 352,
     DOIDENT = 353,
     FOREACH = 354,
     DESCEND = 355,
     DOSWITCH = 356,
     ENDSWITCH = 357,
     WITHOBJECT = 358,
     ENDWITH = 359,
     NUM_DATE = 360,
     TIMESTAMP = 361,
     EPSILON = 362,
     HASHOP = 363,
     THREAD_STATIC = 364,
     POST = 365,
     UNARY = 366,
     PRE = 367
   };
#endif



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 125 "../../../harbour.y"

   const char * string; /* to hold a string returned by lex */
   int     iNumber;     /* to hold a temporary integer number */
   HB_SIZE sNumber;     /* to hold a temporary HB_SIZE values */
   HB_MAXINT lNumber;   /* to hold a temporary long number */
   HB_BOOL bTrue;
   PHB_EXPR asExpr;
   void * pVoid;        /* to hold any memory structure we may need */
   struct
   {
      HB_MAXINT lNumber;   /* to hold a long number returned by lex */
      HB_UCHAR  bWidth;    /* to hold the width of the value */
   } valLong;
   struct
   {
      double   dNumber;    /* to hold a double number returned by lex */
      HB_UCHAR bWidth;     /* to hold the width of the value */
      HB_UCHAR bDec;       /* to hold the number of decimal points in the value */
   } valDouble;
   struct
   {
      long     date;
      long     time;
   } valTimeStamp;
   struct
   {
      char *   string;
      HB_SIZE  length;
      HB_BOOL  dealloc;
   } valChar;
   struct
   {
      char *   string;
      HB_SIZE  length;
      int      flags;   /* Flag for early {|| &macro} (1) or late {|| &(macro)} (2) binding */
   } asCodeblock;
   PHB_VARTYPE asVarType;



/* Line 214 of yacc.c  */
#line 390 "harboury.c"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 164 "../../../harbour.y"

/* This must be placed after the above union - the union is
 * typedef-ined to YYSTYPE
 */
extern int  yylex( YYSTYPE *, HB_COMP_DECL );    /* main lex token function, called by yyparse() */
extern void yyerror( HB_COMP_DECL, const char * );     /* parsing error management function */


/* Line 264 of yacc.c  */
#line 411 "harboury.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  281
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   8346

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  135
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  247
/* YYNRULES -- Number of rules.  */
#define YYNRULES  657
/* YYNRULES -- Number of states.  */
#define YYNSTATES  993

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   367

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     124,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,   114,   119,   122,     2,
     127,   128,   117,   115,   126,   116,     2,   118,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   131,   125,
     112,   111,   113,     2,   123,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   133,     2,   132,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   129,   134,   130,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   120,   121
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,     8,    10,    12,    14,    16,
      19,    22,    25,    28,    31,    34,    38,    42,    47,    54,
      55,    60,    61,    66,    67,    75,    76,    84,    85,    87,
      89,    93,    94,    96,    97,    99,   101,   103,   105,   107,
     109,   111,   114,   116,   118,   120,   122,   124,   126,   128,
     130,   132,   134,   137,   140,   145,   148,   151,   154,   157,
     160,   163,   166,   169,   172,   175,   178,   181,   184,   187,
     188,   193,   196,   199,   202,   203,   208,   209,   210,   216,
     217,   218,   224,   226,   228,   230,   234,   238,   239,   244,
     249,   251,   255,   256,   259,   261,   263,   265,   267,   269,
     271,   274,   275,   277,   279,   283,   285,   289,   291,   293,
     295,   297,   299,   301,   303,   305,   307,   309,   311,   313,
     315,   317,   319,   321,   323,   325,   327,   329,   331,   333,
     336,   339,   341,   344,   346,   349,   352,   354,   356,   359,
     361,   364,   368,   371,   374,   377,   381,   385,   388,   392,
     398,   400,   403,   405,   407,   410,   413,   416,   418,   420,
     423,   427,   430,   433,   436,   439,   442,   445,   448,   451,
     454,   457,   460,   463,   466,   469,   471,   473,   476,   479,
     482,   485,   488,   491,   494,   497,   500,   503,   506,   509,
     512,   515,   518,   521,   524,   527,   530,   533,   536,   539,
     542,   545,   548,   551,   554,   557,   560,   563,   566,   569,
     572,   575,   578,   581,   584,   587,   590,   593,   596,   599,
     602,   605,   608,   613,   615,   620,   623,   626,   628,   632,
     634,   636,   639,   642,   645,   648,   651,   653,   655,   659,
     663,   666,   668,   670,   675,   678,   683,   686,   688,   690,
     692,   694,   696,   698,   700,   702,   705,   707,   709,   711,
     713,   715,   717,   719,   721,   723,   726,   728,   730,   733,
     735,   738,   740,   742,   744,   746,   748,   750,   752,   754,
     756,   758,   760,   763,   766,   768,   770,   772,   773,   775,
     777,   779,   781,   783,   785,   787,   789,   791,   793,   795,
     797,   799,   801,   803,   805,   807,   809,   811,   813,   815,
     817,   819,   821,   823,   825,   827,   829,   831,   833,   835,
     838,   841,   844,   847,   850,   853,   857,   861,   865,   869,
     873,   877,   881,   885,   887,   889,   891,   893,   895,   897,
     901,   905,   909,   913,   917,   921,   925,   929,   933,   937,
     941,   945,   949,   953,   957,   961,   965,   969,   972,   975,
     979,   984,   986,   990,   991,   996,   997,   999,  1001,  1005,
    1008,  1013,  1015,  1019,  1020,  1021,  1027,  1028,  1034,  1036,
    1039,  1041,  1045,  1049,  1052,  1061,  1064,  1065,  1070,  1071,
    1076,  1077,  1082,  1083,  1088,  1090,  1094,  1096,  1100,  1102,
    1105,  1110,  1114,  1117,  1118,  1124,  1128,  1131,  1134,  1138,
    1143,  1144,  1150,  1153,  1158,  1159,  1162,  1163,  1168,  1171,
    1176,  1177,  1186,  1187,  1193,  1197,  1202,  1206,  1207,  1215,
    1217,  1221,  1223,  1226,  1228,  1231,  1232,  1239,  1240,  1244,
    1245,  1247,  1249,  1253,  1254,  1256,  1258,  1260,  1264,  1268,
    1274,  1276,  1280,  1282,  1285,  1289,  1295,  1300,  1306,  1314,
    1318,  1323,  1330,  1336,  1343,  1352,  1354,  1356,  1358,  1360,
    1362,  1364,  1366,  1368,  1370,  1372,  1374,  1376,  1378,  1380,
    1382,  1385,  1389,  1393,  1398,  1399,  1400,  1407,  1408,  1413,
    1414,  1415,  1422,  1423,  1424,  1432,  1434,  1436,  1438,  1440,
    1442,  1444,  1446,  1448,  1450,  1452,  1456,  1460,  1463,  1468,
    1470,  1472,  1474,  1476,  1478,  1480,  1482,  1484,  1486,  1488,
    1489,  1493,  1495,  1498,  1499,  1500,  1507,  1508,  1509,  1517,
    1518,  1519,  1525,  1526,  1532,  1533,  1534,  1542,  1544,  1546,
    1548,  1550,  1552,  1554,  1556,  1558,  1560,  1562,  1564,  1565,
    1566,  1567,  1580,  1582,  1584,  1585,  1588,  1591,  1593,  1596,
    1598,  1600,  1602,  1604,  1606,  1608,  1610,  1612,  1614,  1616,
    1618,  1622,  1625,  1627,  1629,  1633,  1634,  1635,  1636,  1647,
    1648,  1650,  1651,  1656,  1659,  1661,  1663,  1665,  1667,  1669,
    1671,  1673,  1675,  1677,  1679,  1680,  1685,  1687,  1690,  1691,
    1697,  1698,  1705,  1707,  1710,  1711,  1712,  1718,  1719,  1720,
    1721,  1722,  1734,  1736,  1738,  1740,  1742,  1744,  1746,  1748,
    1750,  1752,  1753,  1756,  1757,  1761,  1763,  1764,  1768,  1772,
    1774,  1777,  1781,  1784,  1785,  1788,  1790,  1793,  1795,  1798,
    1802,  1804,  1806,  1808,  1810,  1812,  1813,  1820,  1822,  1824,
    1826,  1828,  1830,  1832,  1834,  1836,  1838,  1840
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     136,     0,    -1,   137,    -1,    -1,   381,    -1,   274,    -1,
     139,    -1,   150,    -1,   138,    -1,     1,   381,    -1,   137,
     381,    -1,   137,   274,    -1,   137,   139,    -1,   137,   150,
      -1,   137,   138,    -1,   137,     1,   381,    -1,    72,    22,
     381,    -1,    72,    22,    17,   381,    -1,    72,    22,    17,
     123,    17,   381,    -1,    -1,     3,   166,   140,   381,    -1,
      -1,     4,   166,   141,   381,    -1,    -1,     3,   166,   142,
     127,   144,   128,   381,    -1,    -1,     4,   166,   143,   127,
     144,   128,   381,    -1,    -1,   107,    -1,   149,    -1,   149,
     126,   107,    -1,    -1,   147,    -1,    -1,   148,    -1,    81,
      -1,    77,    -1,    79,    -1,    80,    -1,    76,    -1,    82,
      -1,    78,   166,    -1,    83,    -1,   148,    -1,    75,    -1,
      90,    -1,    86,    -1,    88,    -1,    89,    -1,    84,    -1,
      85,    -1,    91,    -1,    87,   166,    -1,   166,   145,    -1,
     149,   126,   166,   145,    -1,   290,   159,    -1,   253,   159,
      -1,   202,   159,    -1,   198,   159,    -1,   213,   159,    -1,
     193,   159,    -1,   251,   159,    -1,   223,   159,    -1,   222,
     159,    -1,   233,   159,    -1,   225,   159,    -1,   226,   159,
      -1,   374,   159,    -1,    64,   159,    -1,    -1,    64,   151,
     216,   381,    -1,    44,   159,    -1,    43,   159,    -1,     6,
     159,    -1,    -1,     6,   152,   216,   381,    -1,    -1,    -1,
      29,   153,   261,   154,   381,    -1,    -1,    -1,    62,   155,
     261,   156,   381,    -1,   255,    -1,   267,    -1,   271,    -1,
      24,   164,   381,    -1,    25,   165,   381,    -1,    -1,    23,
     166,   157,   381,    -1,    96,   158,   128,   381,    -1,    17,
      -1,    17,   115,    17,    -1,    -1,   160,   381,    -1,   381,
      -1,   150,    -1,   274,    -1,   138,    -1,     1,    -1,   161,
      -1,   162,   161,    -1,    -1,   162,    -1,   166,    -1,   164,
     126,   166,    -1,   166,    -1,   165,   126,   166,    -1,     5,
      -1,    49,    -1,    48,    -1,    43,    -1,    44,    -1,    53,
      -1,    93,    -1,    24,    -1,    25,    -1,    23,    -1,     8,
      -1,    41,    -1,     9,    -1,    62,    -1,    29,    -1,    54,
      -1,    96,    -1,   100,    -1,    20,    -1,    22,    -1,   105,
      -1,   106,    -1,    22,    35,    -1,    20,    35,    -1,     7,
      -1,   171,    35,    -1,    17,    -1,   173,    35,    -1,   245,
      35,    -1,    18,    -1,    19,    -1,   176,    35,    -1,    71,
      -1,   178,    35,    -1,   129,   239,   130,    -1,   180,    35,
      -1,   180,   237,    -1,   182,    35,    -1,   129,   108,   130,
      -1,   129,   186,   130,    -1,   184,    35,    -1,   216,   108,
     218,    -1,   186,   126,   216,   108,   218,    -1,   166,    -1,
     166,    35,    -1,    73,    -1,    74,    -1,   189,    35,    -1,
     122,   251,    -1,   191,    35,    -1,   189,    -1,   191,    -1,
      52,    35,    -1,    52,    35,   194,    -1,   194,   188,    -1,
     194,   170,    -1,   194,   252,    -1,   194,   190,    -1,   194,
     192,    -1,   194,   172,    -1,   194,   174,    -1,   194,   177,
      -1,   194,   175,    -1,   194,   179,    -1,   194,   181,    -1,
     194,   183,    -1,   194,   185,    -1,   194,   254,    -1,   166,
      -1,   193,    -1,   170,   196,    -1,   190,   196,    -1,   192,
     196,    -1,   252,   196,    -1,   172,   196,    -1,   174,   196,
      -1,   177,   196,    -1,   175,   196,    -1,   185,   196,    -1,
     179,   196,    -1,   181,   196,    -1,   183,   196,    -1,   200,
     196,    -1,   254,   196,    -1,   204,   196,    -1,   212,   196,
      -1,   214,   196,    -1,   188,   196,    -1,   194,   196,    -1,
     195,   196,    -1,   170,   251,    -1,   188,   251,    -1,   190,
     251,    -1,   192,   251,    -1,   252,   251,    -1,   194,   251,
      -1,   167,   237,    -1,   171,   237,    -1,   168,   237,    -1,
     169,   237,    -1,   173,   237,    -1,   245,   237,    -1,   176,
     237,    -1,   184,   237,    -1,   178,   237,    -1,   187,   237,
      -1,   197,   237,    -1,   198,   237,    -1,   193,   237,    -1,
     209,   237,    -1,   213,   237,    -1,   202,   237,    -1,   253,
     237,    -1,   251,   237,    -1,   199,    35,    -1,   166,   127,
     205,   128,    -1,   201,    -1,   193,   127,   205,   128,    -1,
     123,   201,    -1,   202,    35,    -1,   208,    -1,   205,   126,
     208,    -1,   218,    -1,   207,    -1,   123,   166,    -1,   123,
     189,    -1,   123,   197,    -1,   123,   209,    -1,   123,   199,
      -1,   107,    -1,   206,    -1,   220,   131,   210,    -1,   211,
     131,   210,    -1,   131,   210,    -1,   166,    -1,   193,    -1,
     127,   123,   166,   128,    -1,   209,    35,    -1,   209,   127,
     205,   128,    -1,   213,    35,    -1,   167,    -1,   171,    -1,
     168,    -1,   169,    -1,   173,    -1,   245,    -1,   176,    -1,
     178,    -1,   178,   147,    -1,   180,    -1,   182,    -1,   184,
      -1,   197,    -1,   198,    -1,   189,    -1,   191,    -1,   199,
      -1,   202,    -1,   202,   147,    -1,   253,    -1,   209,    -1,
     209,   147,    -1,   213,    -1,   213,   147,    -1,   226,    -1,
     233,    -1,   222,    -1,   223,    -1,   224,    -1,   234,    -1,
     235,    -1,   236,    -1,   215,    -1,   187,    -1,   251,    -1,
     187,   147,    -1,   251,   147,    -1,   203,    -1,   107,    -1,
     216,    -1,    -1,   216,    -1,   166,    -1,   197,    -1,   189,
      -1,   191,    -1,   209,    -1,   199,    -1,   251,    -1,   167,
      -1,   171,    -1,   168,    -1,   169,    -1,   173,    -1,   245,
      -1,   176,    -1,   178,    -1,   180,    -1,   182,    -1,   184,
      -1,   197,    -1,   198,    -1,   193,    -1,   187,    -1,   199,
      -1,   251,    -1,   202,    -1,   253,    -1,   209,    -1,   213,
      -1,    33,    -1,    34,    -1,   220,   221,    -1,    33,   216,
      -1,    34,   216,    -1,    28,   216,    -1,   116,   216,    -1,
     115,   216,    -1,   220,   111,   216,    -1,   220,    21,   216,
      -1,   220,    55,   216,    -1,   220,    56,   216,    -1,   220,
      57,   216,    -1,   220,    58,   216,    -1,   220,    61,   216,
      -1,   220,    60,   216,    -1,   227,    -1,   228,    -1,   229,
      -1,   230,    -1,   231,    -1,   232,    -1,   216,   115,   216,
      -1,   216,   116,   216,    -1,   216,   117,   216,    -1,   216,
     118,   216,    -1,   216,   119,   216,    -1,   216,    59,   216,
      -1,   216,    26,   216,    -1,   216,    27,   216,    -1,   216,
      30,   216,    -1,   216,   112,   216,    -1,   216,   113,   216,
      -1,   216,    50,   216,    -1,   216,    51,   216,    -1,   216,
      31,   216,    -1,   216,    32,   216,    -1,   216,   114,   216,
      -1,   216,    53,   216,    -1,   216,   111,   216,    -1,   238,
     132,    -1,   133,   217,    -1,   238,   126,   217,    -1,   238,
     132,   133,   217,    -1,   208,    -1,   239,   126,   208,    -1,
      -1,    97,   241,   242,   134,    -1,    -1,   107,    -1,   243,
      -1,   243,   126,   107,    -1,   166,   145,    -1,   243,   126,
     166,   145,    -1,   216,    -1,   244,   126,   216,    -1,    -1,
      -1,   240,   246,   244,   247,   130,    -1,    -1,   240,   381,
     248,   163,   249,    -1,   130,    -1,    16,   125,    -1,   216,
      -1,   250,   126,   216,    -1,   127,   250,   128,    -1,   251,
      35,    -1,    10,   127,   216,   126,   206,   126,   206,   128,
      -1,   253,    35,    -1,    -1,     8,   256,   260,   381,    -1,
      -1,     9,   257,   260,   381,    -1,    -1,   109,   258,   260,
     381,    -1,    -1,    54,   259,   273,   381,    -1,   263,    -1,
     260,   126,   263,    -1,   262,    -1,   261,   126,   262,    -1,
     263,    -1,   189,   145,    -1,   189,   145,    21,   216,    -1,
     189,   265,   146,    -1,   166,   145,    -1,    -1,   166,   145,
     264,    21,   216,    -1,   166,   265,   146,    -1,   266,   132,
      -1,   133,   216,    -1,   266,   126,   216,    -1,   266,   132,
     133,   216,    -1,    -1,    52,   268,   269,   270,   381,    -1,
     166,   145,    -1,   269,   126,   166,   145,    -1,    -1,    53,
     166,    -1,    -1,    41,   272,   273,   381,    -1,   166,   145,
      -1,   273,   126,   166,   145,    -1,    -1,    92,   166,   127,
     275,   284,   128,   145,   381,    -1,    -1,    92,   166,   276,
     279,   381,    -1,    94,   166,   381,    -1,    94,   166,   166,
     381,    -1,    95,   280,   381,    -1,    -1,    95,   129,   145,
     277,   278,   130,   381,    -1,   282,    -1,   278,   126,   282,
      -1,   280,    -1,   279,   280,    -1,   282,    -1,   279,   282,
      -1,    -1,   166,   127,   281,   285,   128,   145,    -1,    -1,
     166,   283,   145,    -1,    -1,   288,    -1,   289,    -1,   288,
     126,   289,    -1,    -1,   288,    -1,   289,    -1,   107,    -1,
     288,   126,   107,    -1,   288,   126,   289,    -1,   288,   126,
     289,   126,   107,    -1,   287,    -1,   286,   126,   287,    -1,
     218,    -1,   166,   145,    -1,   123,   166,   145,    -1,   123,
     166,   127,   286,   128,    -1,   288,   126,   166,   145,    -1,
     288,   126,   123,   166,   145,    -1,   288,   126,   123,   166,
     127,   286,   128,    -1,    93,   166,   145,    -1,    93,   123,
     166,   145,    -1,    93,   123,   166,   127,   286,   128,    -1,
     289,   126,    93,   166,   145,    -1,   289,   126,    93,   123,
     166,   145,    -1,   289,   126,    93,   123,   166,   127,   286,
     128,    -1,   298,    -1,   311,    -1,   326,    -1,   332,    -1,
     362,    -1,   344,    -1,   349,    -1,   378,    -1,    47,    -1,
      39,    -1,    15,    -1,   104,    -1,    68,    -1,    40,    -1,
     102,    -1,   299,   309,    -1,   299,   302,   309,    -1,   299,
     304,   309,    -1,   299,   304,   302,   309,    -1,    -1,    -1,
      11,   250,   300,   381,   301,   163,    -1,    -1,    12,   381,
     303,   163,    -1,    -1,    -1,    13,   305,   250,   381,   306,
     163,    -1,    -1,    -1,   304,    13,   307,   250,   381,   308,
     163,    -1,   310,    -1,    15,    -1,    14,    -1,    16,    -1,
     291,    -1,   292,    -1,   296,    -1,   294,    -1,   295,    -1,
     297,    -1,   316,   317,   312,    -1,   316,   322,   312,    -1,
     316,   312,    -1,   316,   317,   322,   312,    -1,   313,    -1,
      39,    -1,    14,    -1,    16,    -1,   293,    -1,   291,    -1,
     296,    -1,   294,    -1,   295,    -1,   297,    -1,    -1,    36,
     315,   381,    -1,   314,    -1,   314,   162,    -1,    -1,    -1,
      37,   318,   250,   381,   319,   163,    -1,    -1,    -1,   317,
      37,   320,   250,   381,   321,   163,    -1,    -1,    -1,    38,
     323,   381,   324,   163,    -1,    -1,   322,    38,   325,   381,
     163,    -1,    -1,    -1,   329,   250,   381,   327,   163,   328,
     330,    -1,    42,    -1,   331,    -1,    40,    -1,    14,    -1,
      16,    -1,   293,    -1,   291,    -1,   292,    -1,   294,    -1,
     295,    -1,   297,    -1,    -1,    -1,    -1,    46,   219,   336,
     216,   333,    48,   250,   337,   334,   381,   335,   338,    -1,
     111,    -1,    21,    -1,    -1,    49,   250,    -1,   163,   339,
      -1,    47,    -1,    47,   166,    -1,    14,    -1,    16,    -1,
     293,    -1,   292,    -1,   296,    -1,   294,    -1,   295,    -1,
     297,    -1,   166,    -1,   197,    -1,   340,    -1,   341,   126,
     340,    -1,   123,   166,    -1,   216,    -1,   342,    -1,   343,
     126,   342,    -1,    -1,    -1,    -1,    99,   341,    53,   343,
     345,   348,   346,   381,   347,   338,    -1,    -1,   100,    -1,
      -1,   355,   350,   356,   351,    -1,   355,   351,    -1,   352,
      -1,   102,    -1,    14,    -1,    16,    -1,   293,    -1,   291,
      -1,   292,    -1,   296,    -1,   294,    -1,   295,    -1,    -1,
     101,   354,   216,   381,    -1,   353,    -1,   353,   162,    -1,
      -1,    37,   216,   357,   381,   163,    -1,    -1,   356,    37,
     216,   358,   381,   163,    -1,   359,    -1,   356,   359,    -1,
      -1,    -1,    38,   360,   381,   361,   163,    -1,    -1,    -1,
      -1,    -1,    63,   363,   368,   381,   163,   364,   371,   365,
     369,   366,   367,    -1,    68,    -1,    14,    -1,    16,    -1,
     293,    -1,   291,    -1,   292,    -1,   296,    -1,   294,    -1,
     297,    -1,    -1,    70,   216,    -1,    -1,   370,   381,   163,
      -1,    67,    -1,    -1,   372,   381,   163,    -1,   373,   381,
     163,    -1,    65,    -1,    66,   166,    -1,    69,   193,   375,
      -1,    98,   375,    -1,    -1,    70,   376,    -1,   126,    -1,
     126,   377,    -1,   377,    -1,   376,   126,    -1,   376,   126,
     377,    -1,   166,    -1,   207,    -1,   203,    -1,   215,    -1,
     251,    -1,    -1,   103,   216,   381,   379,   163,   380,    -1,
     104,    -1,    14,    -1,    16,    -1,   293,    -1,   291,    -1,
     292,    -1,   296,    -1,   295,    -1,   297,    -1,   124,    -1,
     125,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   294,   294,   295,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   312,   315,   320,   328,
     328,   329,   329,   330,   330,   331,   331,   334,   335,   336,
     337,   340,   341,   344,   345,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   370,   371,   379,   380,   381,   382,   383,
     384,   390,   391,   392,   393,   394,   395,   396,   397,   399,
     399,   405,   406,   407,   420,   420,   441,   443,   441,   447,
     449,   447,   453,   454,   455,   456,   457,   458,   458,   464,
     467,   475,   494,   494,   497,   498,   499,   500,   502,   515,
     516,   519,   520,   523,   524,   527,   528,   531,   532,   533,
     534,   535,   536,   537,   538,   539,   540,   541,   542,   543,
     544,   545,   546,   547,   548,   553,   554,   557,   560,   563,
     564,   569,   572,   577,   583,   588,   593,   594,   597,   602,
     605,   616,   619,   624,   627,   630,   631,   634,   637,   638,
     643,   646,   651,   652,   655,   660,   663,   666,   667,   674,
     675,   680,   681,   682,   683,   684,   685,   686,   687,   688,
     689,   690,   691,   692,   693,   696,   697,   700,   701,   702,
     703,   704,   705,   706,   707,   708,   709,   710,   711,   712,
     713,   714,   715,   716,   717,   718,   719,   728,   729,   730,
     731,   732,   733,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   758,   762,   765,   766,   770,   773,   776,   777,   780,
     781,   784,   785,   786,   787,   788,   791,   792,   797,   798,
     799,   805,   806,   809,   812,   817,   820,   829,   830,   831,
     832,   833,   834,   835,   836,   837,   838,   839,   840,   841,
     842,   843,   844,   845,   846,   847,   848,   849,   850,   851,
     852,   853,   854,   855,   856,   857,   858,   859,   860,   863,
     864,   865,   866,   867,   868,   871,   872,   875,   876,   879,
     880,   881,   882,   883,   884,   885,   892,   893,   894,   895,
     896,   897,   898,   899,   900,   901,   902,   903,   904,   905,
     906,   907,   908,   909,   910,   911,   912,   918,   919,   922,
     925,   926,   929,   930,   931,   934,   937,   940,   943,   946,
     949,   952,   955,   958,   959,   960,   961,   962,   963,   966,
     967,   968,   969,   970,   971,   974,   975,   978,   979,   980,
     981,   982,   983,   984,   985,   986,   987,   990,   996,   997,
     998,  1001,  1002,  1005,  1005,  1011,  1012,  1013,  1014,  1017,
    1018,  1021,  1022,  1026,  1029,  1025,  1032,  1031,  1073,  1074,
    1078,  1079,  1081,  1084,  1093,  1097,  1100,  1100,  1102,  1102,
    1104,  1104,  1106,  1106,  1116,  1117,  1120,  1121,  1129,  1130,
    1132,  1136,  1143,  1161,  1161,  1190,  1196,  1199,  1200,  1201,
    1204,  1204,  1211,  1212,  1215,  1216,  1219,  1219,  1222,  1223,
    1226,  1226,  1245,  1245,  1246,  1247,  1248,  1249,  1249,  1252,
    1253,  1256,  1257,  1258,  1259,  1262,  1262,  1281,  1281,  1336,
    1337,  1338,  1339,  1342,  1343,  1344,  1345,  1346,  1347,  1348,
    1351,  1352,  1355,  1358,  1359,  1360,  1361,  1362,  1363,  1366,
    1367,  1368,  1369,  1370,  1371,  1374,  1375,  1376,  1377,  1378,
    1379,  1380,  1381,  1384,  1387,  1390,  1393,  1396,  1399,  1402,
    1405,  1406,  1407,  1408,  1412,  1414,  1411,  1419,  1419,  1423,
    1425,  1423,  1433,  1435,  1433,  1444,  1452,  1453,  1454,  1455,
    1456,  1457,  1458,  1459,  1460,  1463,  1467,  1471,  1474,  1480,
    1487,  1488,  1489,  1490,  1491,  1492,  1493,  1494,  1495,  1498,
    1498,  1501,  1502,  1510,  1511,  1510,  1522,  1523,  1522,  1535,
    1535,  1535,  1537,  1537,  1542,  1547,  1541,  1561,  1570,  1574,
    1575,  1576,  1577,  1578,  1579,  1580,  1581,  1582,  1586,  1599,
    1604,  1585,  1652,  1653,  1656,  1657,  1660,  1668,  1669,  1670,
    1671,  1672,  1673,  1674,  1675,  1676,  1677,  1680,  1681,  1684,
    1685,  1688,  1689,  1692,  1693,  1698,  1704,  1714,  1697,  1733,
    1734,  1738,  1737,  1750,  1757,  1765,  1766,  1767,  1768,  1769,
    1770,  1771,  1772,  1773,  1777,  1776,  1787,  1788,  1797,  1797,
    1800,  1800,  1803,  1805,  1808,  1808,  1808,  1813,  1822,  1833,
    1841,  1812,  1876,  1877,  1878,  1879,  1880,  1881,  1882,  1883,
    1884,  1887,  1888,  1896,  1897,  1900,  1910,  1916,  1917,  1920,
    1931,  1949,  1953,  1961,  1962,  1965,  1966,  1967,  1968,  1969,
    1972,  1973,  1974,  1975,  1976,  1980,  1979,  2002,  2003,  2004,
    2005,  2006,  2007,  2008,  2009,  2010,  2013,  2014
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "FUNCTION", "PROCEDURE", "IDENTIFIER",
  "RETURN", "NIL", "LOCAL", "STATIC", "IIF", "IF", "ELSE", "ELSEIF", "END",
  "ENDIF", "ENDERR", "LITERAL", "TRUEVALUE", "FALSEVALUE", "NUM_DOUBLE",
  "INASSIGN", "NUM_LONG", "ANNOUNCE", "EXTERN", "DYNAMIC", "AND", "OR",
  "NOT", "PUBLIC", "EQ", "NE1", "NE2", "INC", "DEC", "ALIASOP", "DOCASE",
  "CASE", "OTHERWISE", "ENDCASE", "ENDDO", "MEMVAR", "WHILE", "LOOP",
  "EXIT", "INIT", "FOR", "NEXT", "TO", "STEP", "LE", "GE", "FIELD", "IN",
  "PARAMETERS", "PLUSEQ", "MINUSEQ", "MULTEQ", "DIVEQ", "POWER", "EXPEQ",
  "MODEQ", "PRIVATE", "BEGINSEQ", "BREAK", "RECOVER", "RECOVERUSING",
  "ALWAYS", "ENDSEQ", "DO", "WITH", "SELF", "LINE", "MACROVAR",
  "MACROTEXT", "AS_ARRAY", "AS_BLOCK", "AS_CHARACTER", "AS_CLASS",
  "AS_DATE", "AS_LOGICAL", "AS_NUMERIC", "AS_OBJECT", "AS_VARIANT",
  "AS_ARRAY_ARRAY", "AS_BLOCK_ARRAY", "AS_CHARACTER_ARRAY",
  "AS_CLASS_ARRAY", "AS_DATE_ARRAY", "AS_LOGICAL_ARRAY",
  "AS_NUMERIC_ARRAY", "AS_OBJECT_ARRAY", "DECLARE", "OPTIONAL",
  "DECLARE_CLASS", "DECLARE_MEMBER", "PROCREQ", "CBSTART", "DOIDENT",
  "FOREACH", "DESCEND", "DOSWITCH", "ENDSWITCH", "WITHOBJECT", "ENDWITH",
  "NUM_DATE", "TIMESTAMP", "EPSILON", "HASHOP", "THREAD_STATIC", "POST",
  "'='", "'<'", "'>'", "'$'", "'+'", "'-'", "'*'", "'/'", "'%'", "UNARY",
  "PRE", "'&'", "'@'", "'\\n'", "';'", "','", "'('", "')'", "'{'", "'}'",
  "':'", "']'", "'['", "'|'", "$accept", "Main", "Source", "Line",
  "Function", "$@1", "$@2", "$@3", "$@4", "Params", "AsType",
  "AsArrayType", "StrongType", "AsArray", "ParamList", "Statement", "$@5",
  "$@6", "$@7", "$@8", "$@9", "$@10", "$@11", "CompTimeStr", "CrlfStmnt",
  "$@12", "LineStat", "Statements", "EmptyStats", "ExtList", "DynList",
  "IdentName", "NumValue", "DateValue", "TimeStampValue", "NumAlias",
  "NilValue", "NilAlias", "LiteralValue", "LiteralAlias", "CodeBlockAlias",
  "Logical", "LogicalAlias", "SelfValue", "SelfAlias", "Array",
  "ArrayAlias", "ArrayAt", "ArrayAtAlias", "Hash", "HashAlias", "HashList",
  "Variable", "VarAlias", "MacroVar", "MacroVarAlias", "MacroExpr",
  "MacroExprAlias", "MacroAny", "FieldAlias", "FieldVarAlias", "AliasId",
  "AliasVar", "AliasExpr", "VariableAt", "VariableAtAlias", "FunIdentCall",
  "FunCall", "FunRef", "FunCallAlias", "ArgList", "Argument",
  "RefArgument", "ExtArgument", "ObjectData", "SendId", "ObjectRef",
  "ObjectDataAlias", "ObjectMethod", "ObjectMethodAlias",
  "SimpleExpression", "Expression", "ExtExpression", "EmptyExpression",
  "LValue", "LeftExpression", "PostOp", "ExprPostOp", "ExprPreOp",
  "ExprUnary", "ExprEqual", "ExprAssign", "ExprPlusEq", "ExprMinusEq",
  "ExprMultEq", "ExprDivEq", "ExprModEq", "ExprExpEq", "ExprOperEq",
  "ExprMath", "ExprBool", "ExprRelation", "ArrayIndex", "IndexList",
  "ElemList", "BlockHead", "@13", "BlockVars", "BlockVarList",
  "BlockExpList", "CodeBlock", "@14", "$@15", "@16", "BlockEnd", "ExpList",
  "PareExpList", "PareExpListAlias", "IfInline", "IfInlineAlias",
  "VarDefs", "$@17", "$@18", "$@19", "$@20", "VarList", "ExtVarList",
  "ExtVarDef", "VarDef", "@21", "DimList", "DimIndex", "FieldsDef", "$@22",
  "FieldList", "InAlias", "MemvarDef", "$@23", "MemvarList", "Declaration",
  "$@24", "$@25", "$@26", "DecDataList", "ClassInfo", "DecMethod", "$@27",
  "DecData", "$@28", "DecList", "DecListExt", "DummyArgList",
  "DummyArgument", "FormalList", "OptList", "ExecFlow", "ErrEndFor",
  "ErrEndCase", "ErrEndIf", "ErrEndWith", "ErrEndSeq", "ErrEndWhile",
  "ErrEndSwitch", "IfEndif", "IfBegin", "$@29", "@30", "IfElse", "$@31",
  "IfElseIf", "$@32", "@33", "$@34", "@35", "EndIf", "EndIfID", "DoCase",
  "EndCase", "EndCaseID", "DoCaseStart", "$@36", "DoCaseBegin", "Cases",
  "$@37", "@38", "$@39", "@40", "Otherwise", "$@41", "$@42", "$@43",
  "DoWhile", "@44", "$@45", "WhileBegin", "EndWhile", "EndWhileID",
  "ForNext", "@46", "@47", "@48", "ForAssign", "StepExpr", "ForStatements",
  "EndForID", "ForVar", "ForList", "ForExpr", "ForArgs", "ForEach", "$@49",
  "@50", "@51", "Descend", "DoSwitch", "$@52", "EndSwitch", "EndSwitchID",
  "SwitchStart", "$@53", "SwitchBegin", "SwitchCases", "$@54", "$@55",
  "SwitchDefault", "$@56", "$@57", "BeginSeq", "@58", "@59", "$@60",
  "$@61", "EndSeqID", "BlockSeq", "AlwaysSeq", "Always", "RecoverSeq",
  "RecoverEmpty", "RecoverUsing", "DoProc", "DoArgs", "DoArgList",
  "DoArgument", "WithObject", "@62", "EndWithID", "Crlf", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    61,    60,    62,    36,    43,    45,    42,    47,    37,
     366,   367,    38,    64,    10,    59,    44,    40,    41,   123,
     125,    58,    93,    91,   124
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   135,   136,   136,   137,   137,   137,   137,   137,   137,
     137,   137,   137,   137,   137,   137,   138,   138,   138,   140,
     139,   141,   139,   142,   139,   143,   139,   144,   144,   144,
     144,   145,   145,   146,   146,   147,   147,   147,   147,   147,
     147,   147,   147,   147,   148,   148,   148,   148,   148,   148,
     148,   148,   148,   149,   149,   150,   150,   150,   150,   150,
     150,   150,   150,   150,   150,   150,   150,   150,   150,   151,
     150,   150,   150,   150,   152,   150,   153,   154,   150,   155,
     156,   150,   150,   150,   150,   150,   150,   157,   150,   150,
     158,   158,   160,   159,   161,   161,   161,   161,   161,   162,
     162,   163,   163,   164,   164,   165,   165,   166,   166,   166,
     166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
     166,   166,   166,   166,   166,   167,   167,   168,   169,   170,
     170,   171,   172,   173,   174,   175,   176,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   184,   185,   186,   186,
     187,   188,   189,   189,   190,   191,   192,   193,   193,   194,
     194,   195,   195,   195,   195,   195,   195,   195,   195,   195,
     195,   195,   195,   195,   195,   196,   196,   197,   197,   197,
     197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
     197,   197,   197,   197,   197,   197,   197,   198,   198,   198,
     198,   198,   198,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   200,   201,   202,   202,   203,   204,   205,   205,   206,
     206,   207,   207,   207,   207,   207,   208,   208,   209,   209,
     209,   210,   210,   211,   212,   213,   214,   215,   215,   215,
     215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
     215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
     215,   215,   215,   215,   215,   215,   215,   215,   215,   216,
     216,   216,   216,   216,   216,   217,   217,   218,   218,   219,
     219,   219,   219,   219,   219,   219,   220,   220,   220,   220,
     220,   220,   220,   220,   220,   220,   220,   220,   220,   220,
     220,   220,   220,   220,   220,   220,   220,   221,   221,   222,
     223,   223,   224,   224,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   233,   233,   233,   233,   233,   234,
     234,   234,   234,   234,   234,   235,   235,   236,   236,   236,
     236,   236,   236,   236,   236,   236,   236,   237,   238,   238,
     238,   239,   239,   241,   240,   242,   242,   242,   242,   243,
     243,   244,   244,   246,   247,   245,   248,   245,   249,   249,
     250,   250,   251,   252,   253,   254,   256,   255,   257,   255,
     258,   255,   259,   255,   260,   260,   261,   261,   262,   262,
     262,   262,   263,   264,   263,   263,   265,   266,   266,   266,
     268,   267,   269,   269,   270,   270,   272,   271,   273,   273,
     275,   274,   276,   274,   274,   274,   274,   277,   274,   278,
     278,   279,   279,   279,   279,   281,   280,   283,   282,   284,
     284,   284,   284,   285,   285,   285,   285,   285,   285,   285,
     286,   286,   287,   288,   288,   288,   288,   288,   288,   289,
     289,   289,   289,   289,   289,   290,   290,   290,   290,   290,
     290,   290,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   298,   298,   298,   300,   301,   299,   303,   302,   305,
     306,   304,   307,   308,   304,   309,   310,   310,   310,   310,
     310,   310,   310,   310,   310,   311,   311,   311,   311,   312,
     313,   313,   313,   313,   313,   313,   313,   313,   313,   315,
     314,   316,   316,   318,   319,   317,   320,   321,   317,   323,
     324,   322,   325,   322,   327,   328,   326,   329,   330,   331,
     331,   331,   331,   331,   331,   331,   331,   331,   333,   334,
     335,   332,   336,   336,   337,   337,   338,   339,   339,   339,
     339,   339,   339,   339,   339,   339,   339,   340,   340,   341,
     341,   342,   342,   343,   343,   345,   346,   347,   344,   348,
     348,   350,   349,   349,   351,   352,   352,   352,   352,   352,
     352,   352,   352,   352,   354,   353,   355,   355,   357,   356,
     358,   356,   356,   356,   360,   361,   359,   363,   364,   365,
     366,   362,   367,   367,   367,   367,   367,   367,   367,   367,
     367,   368,   368,   369,   369,   370,   371,   371,   371,   372,
     373,   374,   374,   375,   375,   376,   376,   376,   376,   376,
     377,   377,   377,   377,   377,   379,   378,   380,   380,   380,
     380,   380,   380,   380,   380,   380,   381,   381
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     2,     2,     3,     3,     4,     6,     0,
       4,     0,     4,     0,     7,     0,     7,     0,     1,     1,
       3,     0,     1,     0,     1,     1,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     4,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     0,
       4,     2,     2,     2,     0,     4,     0,     0,     5,     0,
       0,     5,     1,     1,     1,     3,     3,     0,     4,     4,
       1,     3,     0,     2,     1,     1,     1,     1,     1,     1,
       2,     0,     1,     1,     3,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     2,     1,     2,     2,     1,     1,     2,     1,
       2,     3,     2,     2,     2,     3,     3,     2,     3,     5,
       1,     2,     1,     1,     2,     2,     2,     1,     1,     2,
       3,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     1,     1,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     4,     1,     4,     2,     2,     1,     3,     1,
       1,     2,     2,     2,     2,     2,     1,     1,     3,     3,
       2,     1,     1,     4,     2,     4,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     2,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     1,     1,     0,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     1,     1,     1,     1,     1,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     2,     2,     3,
       4,     1,     3,     0,     4,     0,     1,     1,     3,     2,
       4,     1,     3,     0,     0,     5,     0,     5,     1,     2,
       1,     3,     3,     2,     8,     2,     0,     4,     0,     4,
       0,     4,     0,     4,     1,     3,     1,     3,     1,     2,
       4,     3,     2,     0,     5,     3,     2,     2,     3,     4,
       0,     5,     2,     4,     0,     2,     0,     4,     2,     4,
       0,     8,     0,     5,     3,     4,     3,     0,     7,     1,
       3,     1,     2,     1,     2,     0,     6,     0,     3,     0,
       1,     1,     3,     0,     1,     1,     1,     3,     3,     5,
       1,     3,     1,     2,     3,     5,     4,     5,     7,     3,
       4,     6,     5,     6,     8,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     3,     3,     4,     0,     0,     6,     0,     4,     0,
       0,     6,     0,     0,     7,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     3,     2,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       3,     1,     2,     0,     0,     6,     0,     0,     7,     0,
       0,     5,     0,     5,     0,     0,     7,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     0,
       0,    12,     1,     1,     0,     2,     2,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     2,     1,     1,     3,     0,     0,     0,    10,     0,
       1,     0,     4,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     4,     1,     2,     0,     5,
       0,     6,     1,     2,     0,     0,     5,     0,     0,     0,
       0,    11,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     2,     0,     3,     1,     0,     3,     3,     1,
       2,     3,     2,     0,     2,     1,     2,     1,     2,     3,
       1,     1,     1,     1,     1,     0,     6,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,     0,     0,     0,   107,    74,   131,   386,   388,     0,
       0,   133,   136,   137,   125,   126,   116,   114,   115,    76,
       0,     0,   519,   416,   537,   110,   111,     0,   109,   108,
     410,   112,   392,    79,   607,    69,     0,   139,     0,   152,
     153,     0,   113,     0,     0,   123,   363,   633,     0,   124,
     594,     0,   127,   128,   390,     0,   656,   657,     0,   287,
       0,     0,     0,     8,     6,     7,   150,   296,   298,   299,
       0,   297,     0,   300,     0,     0,   302,     0,   303,     0,
     304,     0,   305,     0,   306,     0,   310,     0,   157,     0,
     158,     0,   309,     0,     0,   307,   308,   311,     0,   223,
     313,     0,   315,     0,     0,   316,     0,     0,    92,    92,
      92,    92,   333,   334,   335,   336,   337,   338,    92,   373,
     301,   312,     0,   314,     0,    82,    83,    84,     5,    92,
     465,     0,   466,     0,     0,   467,     0,   468,   470,   471,
       0,   581,   469,    92,   472,     4,     9,   117,   119,   116,
     114,   115,   121,   118,   110,   111,   122,   120,   123,    19,
      21,     0,    73,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   247,   249,   250,   248,   251,   253,   254,   256,
     257,   258,   280,   261,   262,   309,   259,   260,   263,   264,
     284,   267,   269,   279,   380,     0,   273,   274,   275,   271,
     272,   276,   277,   278,   252,   484,   281,   266,   130,   129,
      87,     0,   103,     0,   105,     0,   320,   321,     0,     0,
      72,    71,   150,   157,   158,   290,   308,   294,   313,   293,
     316,     0,     0,   295,   314,   159,     0,     0,     0,   621,
       0,    68,   157,   158,   633,     0,   422,     0,    31,     0,
       0,    90,     0,   365,     0,   632,   150,   568,   312,   569,
       0,     0,     0,     0,     0,   155,     0,     0,   236,     0,
       0,     0,   237,   230,   361,   288,   229,     0,   241,   242,
     240,     1,     0,    14,    12,    13,    11,    10,   151,   287,
       0,   203,     0,   205,   206,   175,   176,   177,   197,   132,
     204,   181,   134,   207,   182,   184,   138,   209,   183,   140,
     211,   186,   142,   143,   187,   144,   188,   147,   210,   185,
     212,   194,   198,   154,   178,   199,   156,   179,   200,   287,
      60,   215,     0,     0,   175,   162,     0,   166,     0,   167,
     169,     0,   168,     0,   170,     0,   171,     0,   172,     0,
     173,   161,   164,   165,   195,     0,   202,   163,     0,   174,
     196,   213,    58,   214,   221,   189,   226,    57,   218,   191,
     244,   287,   216,     0,   192,   246,    59,   217,   193,     0,
     317,   318,     0,     0,     0,     0,     0,     0,     0,     0,
     319,    63,    62,    65,    66,    64,     0,   376,   135,   208,
     383,    61,   220,   180,   201,   385,    56,   219,   190,    55,
       0,   489,   497,   496,   498,   474,   478,   473,   477,   479,
     476,   499,   500,   502,   503,   501,   504,     0,     0,   480,
     495,    98,    97,    95,    99,     0,    96,    94,   511,   475,
     512,   523,   529,   510,   514,   513,   516,   517,   515,   518,
     507,   509,     0,     0,     0,     0,   586,   587,   585,   589,
     590,   588,   592,   593,   591,     0,   583,   584,    67,     0,
       0,     0,     0,     0,    93,    31,     0,   394,     0,     0,
     322,   324,   323,     0,   225,    44,    39,    36,     0,    37,
      38,    35,    40,    42,    49,    50,    46,     0,    47,    48,
      45,    51,   255,    43,   282,   265,   268,   270,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   283,     0,
       0,    85,     0,    86,    31,    77,   396,   398,   520,    31,
       0,   553,   552,     0,   160,    31,   414,     0,    80,     0,
       0,     0,   631,     0,    16,   420,     0,     0,   424,   427,
      32,   435,   426,     0,     0,   366,    31,     0,   367,   635,
     150,   284,   641,   279,     0,   281,   634,   637,     0,     0,
       0,   645,     0,     0,   382,   145,   231,   232,   233,   235,
     225,   234,     0,   146,   287,   287,   141,    15,     0,   227,
     288,   285,   286,   358,     0,   357,     0,     0,   239,   326,
     327,   328,   329,   330,   332,   331,   325,   238,   371,   374,
       0,   487,     0,   481,   492,     0,   482,   100,     0,     0,
     526,   505,     0,   532,   506,   534,     0,   604,     0,   602,
      20,    27,    22,    27,    75,     0,   402,    33,     0,     0,
     387,   389,   287,    41,    52,   345,   346,   347,   352,   353,
     350,   351,   355,   344,   356,   348,   349,   354,   339,   340,
     341,   342,   343,   381,   485,    88,   104,   106,   399,    33,
       0,     0,   418,     0,   417,   548,   412,     0,     0,     0,
     393,     0,   622,     0,    70,     0,    17,   439,   437,     0,
     431,   433,   425,     0,   443,    91,    89,   369,   364,     0,
     636,   638,     0,   572,   573,   575,   570,   595,     0,   391,
     243,     0,   148,   362,   287,   222,   359,     0,   224,   245,
       0,     0,     0,     0,     0,     0,     0,   483,     0,   530,
       0,   508,     0,     0,   598,     0,     0,   582,   603,    28,
       0,    29,    31,     0,   407,     0,   405,    34,     0,   406,
     395,     0,     0,     0,   401,   397,    78,    31,     0,   415,
      31,   411,    81,   608,     0,   113,     0,    31,     0,   440,
     441,    31,   432,   434,   423,   437,     0,   429,   446,     0,
     444,   445,   368,    31,   639,   571,     0,   579,     0,   287,
     228,   360,   372,   375,     0,   378,   377,   488,   490,     0,
     524,     0,     0,     0,   535,     0,   605,   600,     0,     0,
      53,     0,     0,   408,     0,   287,   486,   400,   419,     0,
     413,   626,    18,     0,    31,    31,   453,    31,     0,     0,
     438,     0,     0,    31,     0,   370,   574,   580,   576,   648,
     649,   647,   651,   652,   650,   654,   653,   655,   646,   149,
     379,     0,   493,     0,   531,   527,   533,     0,     0,     0,
       0,    24,    30,    31,    26,   404,   409,     0,   554,   629,
       0,   609,     0,     0,    31,   459,   287,   454,     0,     0,
      31,   442,     0,   430,   428,   436,   447,   448,     0,   491,
       0,   525,     0,   540,   541,   539,   543,   544,   542,   545,
     546,   547,   536,   538,   599,   606,     0,    54,   384,     0,
     549,   630,   623,     0,     0,   287,   460,   452,     0,   450,
     421,    31,   456,     0,    31,     0,   577,   494,   528,   601,
     555,     0,   625,   610,     0,   627,   628,     0,   287,   455,
     287,   457,    31,   462,   449,     0,   550,     0,     0,   461,
     451,     0,   287,   463,     0,   578,     0,   613,   614,   612,
     616,   617,   615,   619,   618,   620,   611,   624,   458,     0,
     559,   560,   557,   562,   561,   564,   565,   563,   566,   556,
     551,   464,   558
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    61,    62,   432,    64,   469,   471,   470,   472,   750,
     559,   756,   560,   503,   751,   433,   240,   161,   215,   681,
     238,   691,   529,   252,   162,   163,   434,   732,   964,   211,
     213,    66,   172,   173,   174,    70,   175,    72,   176,    74,
      75,   177,    77,   178,    79,   179,    81,   180,    83,   181,
      85,   271,   182,    87,   183,    89,   184,    91,   185,    93,
      94,   297,   186,   187,   188,    98,    99,   189,   190,   101,
     598,   272,   273,   599,   191,   280,   103,   104,   192,   106,
     193,   600,   603,   276,   231,   195,   390,   196,   197,   198,
     110,   199,   112,   113,   114,   115,   116,   117,   200,   201,
     202,   203,   361,   292,   277,   119,   253,   567,   568,   619,
     204,   396,   731,   620,   806,   267,   206,   122,   207,   124,
     125,   164,   165,   263,   237,   476,   535,   536,   477,   755,
     647,   648,   126,   236,   546,   689,   127,   219,   540,   436,
     697,   556,   703,   786,   699,   250,   704,   701,   781,   778,
     789,   928,   929,   779,   780,   129,   421,   422,   445,   423,
     424,   425,   426,   130,   131,   527,   762,   427,   734,   428,
     622,   861,   736,   900,   429,   430,   132,   450,   451,   133,
     218,   134,   452,   628,   863,   740,   902,   453,   629,   811,
     742,   135,   743,   867,   136,   912,   913,   137,   768,   941,
     966,   543,   920,   965,   989,   259,   260,   714,   715,   138,
     797,   898,   955,   848,   139,   465,   466,   467,   140,   261,
     141,   638,   815,   870,   639,   745,   869,   142,   239,   831,
     922,   957,   976,   550,   943,   944,   881,   882,   883,   143,
     255,   576,   577,   144,   718,   858,   437
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -708
static const yytype_int16 yypact[] =
{
    4463,   135,  8246,  8246,  -708,   157,  -708,  1418,  1852,   -72,
    6748,  -708,  -708,  -708,    30,    66,  8246,  8246,  8246,  2024,
    6748,  6748,  -708,  2180,  -708,   157,   157,  7248,  -708,  -708,
      71,  -708,  2681,  2862,  -708,   157,   174,  -708,   149,  -708,
    -708,  8246,  -708,  8246,   561,   224,  -708,   180,  7248,  -708,
    -708,  6748,  -708,  -708,  -708,   138,  -708,  -708,  6873,  6248,
    7523,   271,  4597,  -708,  -708,  -708,   131,   143,   143,   143,
    1752,    24,  7523,    45,  7523,  7523,    60,  7523,    65,  7523,
      82,  7523,   262,  7523,    95,  7523,   143,  1752,   279,  1752,
     297,  1752,   234,  7342,  7523,   143,   196,   320,  7523,  -708,
      14,  7523,    68,   169,  7523,    81,  7523,  2013,  -708,  -708,
    -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,   135,
     109,    83,  1752,    86,  7523,  -708,  -708,  -708,  -708,  -708,
    -708,   560,  -708,  4978,  1287,  -708,  6748,  -708,  -708,  -708,
    5105,   442,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,
    -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,   183,
     225,  6748,  -708,   135,  8246,  8246,  6748,  6748,    71,  6748,
    6748,  8246,   233,   846,  1503,    93,   251,  1212,  7707,  1882,
    2196,  2340,  7941,   838,  3014,   -51,  3403,  3504,  2441,  7745,
    -708,  7628,  7824,  -708,  7933,  2854,  -708,  -708,  -708,  -708,
    -708,  -708,  -708,  -708,  3067,   239,  7862,  3156,  -708,  -708,
    -708,   268,  -708,   273,  -708,  8224,  -708,  -708,   135,  8246,
    -708,  -708,    73,   252,   313,   -88,   143,   102,   124,     2,
     129,   242,   243,    34,   162,   331,  8246,  8246,  8224,   318,
    6748,  -708,  -708,  -708,   180,    31,   289,  3055,  6749,   295,
     135,   311,   302,  8032,  6373,  -708,   264,   -88,   168,  -708,
      -3,  6748,  7367,  8246,  6748,  -708,  8246,   199,  -708,   309,
    7248,    64,  -708,  -708,  -708,  7699,  -708,   123,  -708,  -708,
    -708,  -708,   135,  -708,  -708,  -708,  -708,  -708,  -708,  6498,
    6623,  -708,   -66,  -708,  -708,  -708,  -708,  -708,  -708,  -708,
    -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,
    -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,
    -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  6498,
    -708,  -708,    30,    66,   412,  -708,   424,  -708,   425,  -708,
    -708,   434,  -708,   435,  -708,    82,  -708,   262,  -708,   437,
    -708,  -708,  -708,  -708,  -708,   439,   440,  -708,   449,  -708,
    -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,
    -708,  6498,  -708,  7523,  -708,  -708,  -708,  -708,  -708,  6748,
    -708,  -708,  6748,  6748,  6748,  6748,  6748,  6748,  6748,  7523,
    -708,  -708,  -708,  -708,  -708,  -708,  6748,  -708,  -708,  -708,
    -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,
     135,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,
    -708,  -708,  -708,  -708,  -708,  -708,  -708,   923,   711,  -708,
    -708,  -708,  -708,  -708,  -708,  5232,  -708,  -708,  -708,  -708,
    -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,
    -708,  -708,  1466,   907,   281,  5359,  -708,  -708,  -708,  -708,
    -708,  -708,  -708,  -708,  -708,   265,  -708,  -708,  -708,   135,
     336,   135,   358,  7367,  -708,  2255,   325,  -708,   325,  4234,
    3710,  -708,  -708,   364,  -708,  -708,  -708,  -708,  8246,  -708,
    -708,  -708,  -708,  -708,  -708,  -708,  -708,  8246,  -708,  -708,
    -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  6748,  6748,
    6748,  6748,  6748,  6748,  6748,  6748,  6748,  6748,  6748,  6748,
    6748,  6748,  6748,  6748,  6748,  6748,  6748,   135,  -708,   135,
    8246,  -708,  8246,  -708,  2255,   366,  -708,  -708,  -708,  6749,
     341,  -708,  -708,  6748,  -708,  6749,   172,   341,   366,  6748,
     135,  7367,  -708,   354,  -708,  -708,  8246,   135,  -708,  -708,
    -708,  -708,  -708,   477,   135,  -708,  6749,   362,   371,  6998,
     153,   387,  -708,   410,  7933,  7549,   373,  -708,  7123,  7248,
    7367,  -708,   325,   308,  -708,  -708,     9,    96,   -88,   102,
     106,     2,  6748,  -708,  6748,  6498,  -708,  -708,   216,  -708,
    7933,  -708,  7933,  -708,  6623,   368,   249,   253,  -708,  7933,
    7933,  7933,  7933,  7933,  7933,  7933,  7933,  -708,  7933,   376,
    6121,  -708,  6748,  -708,  -708,   923,  -708,  -708,  6748,   135,
    -708,  -708,   907,  -708,  -708,  -708,  6748,  -708,  2479,  -708,
    -708,  8054,  -708,  8054,  -708,  6748,   495,  1001,   -48,  8246,
    -708,  -708,  6998,  -708,  -708,  3542,  7933,  3710,  3710,  3710,
     739,   739,   739,   459,  3710,   739,   739,   739,   389,   389,
      -7,    -7,    -7,  7933,  -708,  -708,  -708,  -708,   499,  1001,
    8224,   135,  -708,  8246,  -708,  7933,  -708,  8246,  8246,   135,
    -708,   135,  7933,  4851,  -708,   505,  -708,  2526,   295,  3055,
    -708,  -708,  -708,  8246,  4271,  -708,  -708,  -708,  -708,  8128,
    -708,  6998,  8246,  7933,  -708,   397,  -708,  -708,  5994,  -708,
    -708,  7816,  -708,  -708,  6498,  -708,  -708,  6623,  -708,  -708,
    6748,   395,  4724,    13,  5994,   281,  6748,  -708,   281,  -708,
    6748,  -708,   135,  5994,  7933,   135,  6748,  -708,  -708,  -708,
     401,   405,  6749,   404,  7933,   516,  -708,  -708,  6748,   406,
    -708,   414,  5486,  6748,  -708,  -708,  -708,  6749,   493,  -708,
    6749,  -708,  -708,  -708,   135,  3289,  8246,  6749,   415,   419,
     421,  6749,  -708,  -708,  -708,  -708,   144,  -708,  -708,   427,
     430,   421,  -708,  6749,  -708,   364,  7123,   457,  1307,  6748,
    -708,  -708,  7933,  -708,   417,  -708,  -708,  -708,  -708,   281,
    -708,  5740,   281,  5740,  -708,   135,  -708,  7933,   135,  8150,
    -708,   135,  6748,  7933,  6748,  6998,  -708,  7933,  -708,  6748,
    -708,   388,  -708,  8246,  6749,  6249,  -708,  6749,  4105,   466,
    -708,  8246,   135,  6749,  7400,  -708,  -708,  -708,  -708,  -708,
    -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,
    -708,  5486,  -708,  5613,  -708,  -708,  -708,  1604,  5613,  5613,
     135,  -708,  -708,  6749,  -708,  7933,  7933,   432,   -19,  -708,
    8246,  -708,   135,   135,  6374,  -708,  6748,  -708,   135,  8246,
    6749,   421,  7465,  -708,  -708,  -708,  -708,   438,   135,  -708,
    5486,  -708,  5613,  -708,  -708,  -708,  -708,  -708,  -708,  -708,
    -708,  -708,  -708,  -708,  -708,  -708,  5613,  -708,  -708,  6748,
    -708,  -708,   496,  5867,  5867,  6748,  -708,  -708,   275,  -708,
    -708,  6499,  -708,  8246,  6749,   139,  -708,  -708,  -708,  -708,
     239,   135,  -708,  -708,   135,  -708,  -708,   285,  6748,  -708,
    6748,  -708,  6624,  -708,  -708,  5994,  -708,  1645,  5994,  -708,
    -708,   314,  6748,  -708,  1740,  -708,  5994,  -708,  -708,  -708,
    -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,   317,
    -708,  -708,  8246,  -708,  -708,  -708,  -708,  -708,  -708,  -708,
    -708,  -708,  -708
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -708,  -708,  -708,    53,   517,  -708,  -708,  -708,  -708,   -65,
     749,   -99,  -171,  -591,  -708,    57,  -708,  -708,  -708,  -708,
    -708,  -708,  -708,  -708,  1623,  -708,  -427,   -47,   416,  -708,
    -708,    -2,  1554,  1567,  1676,   488,   182,   489,   500,   490,
     494,   672,   498,   687,   502,   978,   503,  1138,   504,  1238,
     508,  -708,  1828,   510,    98,   513,   256,   515,   340,   357,
    -708,  3316,  1893,  1969,  2088,  -708,  -161,  2244,  -250,  -708,
    -258,  -639,  -223,   -57,  2324,  -326,  -708,  -708,  2585,  -708,
    -218,  3699,  -582,  -530,  -708,  2630,  -708,  2511,  2801,  -708,
    -708,  2876,  -708,  -708,  -708,  -708,  -708,  -708,  2886,  -708,
    -708,  -708,  3841,  -708,  -708,  -708,  -708,  -708,  -708,  -708,
    1310,  -708,  -708,  -708,  -708,    -4,   428,   518,  1398,   519,
    -708,  -708,  -708,  -708,  -708,    75,   351,   -82,  -212,  -708,
      79,  -708,  -708,  -708,  -708,  -708,  -708,  -708,   379,    62,
    -708,  -708,  -708,  -708,  -708,  -547,  -708,  -665,  -708,  -708,
    -708,  -707,  -329,   -84,  -664,  -708,  -129,  -124,  -114,   -80,
     -67,   -44,   -83,  -708,  -708,  -708,  -708,   193,  -708,  -708,
    -708,  -708,  -708,  -708,  -404,  -708,  -708,  -420,  -708,  -708,
    -708,  -708,  -708,  -708,  -708,  -708,  -708,   170,  -708,  -708,
    -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,
    -708,  -708,  -708,  -341,  -708,    47,  -708,  -169,  -708,  -708,
    -708,  -708,  -708,  -708,  -708,  -708,    -8,  -708,  -708,  -708,
    -708,  -708,  -708,  -708,    -6,  -708,  -708,  -708,  -708,  -708,
    -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,
     390,  -708,  -550,  -708,  -708,  -708,  3428
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -645
static const yytype_int16 yytable[] =
{
     159,   160,   274,   537,   571,   444,   205,   502,   627,   700,
     484,   504,   459,   761,   210,   212,   214,   460,   505,   710,
     506,   507,   726,   623,   626,   222,   537,   461,   627,   804,
     919,   572,   631,   634,   783,   528,   573,   370,   787,   246,
     791,   247,   249,  -307,   288,   290,   256,   608,   553,   366,
     578,   449,   516,    63,   446,   166,   757,    65,   278,   299,
     604,   462,   128,   617,   722,   208,   605,   447,   295,   400,
     295,   606,   295,   295,   463,   295,   329,   295,   758,   295,
     302,   295,   290,   295,   759,   295,   435,   295,   757,   295,
     448,   334,   295,   455,  -289,   306,   295,   464,    88,   295,
     309,   209,   295,   370,   295,   484,   235,   526,   288,   590,
     523,   524,   525,   607,  -297,   283,   375,   312,   400,   285,
     295,   405,   295,   579,   286,   223,  -297,  -297,   299,   371,
     317,   323,   454,  -315,   242,   290,   289,   364,   -92,   -92,
    -150,  -223,  -150,   805,   398,   801,    88,   290,  -297,  -297,
    -297,  -297,   782,  -297,  -297,    56,    57,   290,   242,   366,
      88,   794,   475,   475,   375,  -312,   288,   290,   242,   483,
     242,   245,   242,   242,   891,   242,   893,   242,   290,   242,
     897,   242,    71,   242,  -289,   242,   877,   242,   288,   242,
     592,    88,   242,   290,   593,   371,   242,   405,   290,   242,
     289,   290,   242,   400,   242,   -92,   -92,   -92,   -92,    71,
     -92,   -92,   741,   475,   290,   290,   290,   539,   947,   290,
     242,   737,   242,  -157,  -297,   687,   290,  -157,   290,  -157,
      71,    88,   892,  -311,   545,   539,   475,  -223,    88,  -223,
     478,   251,   290,   961,    71,   557,   954,    39,    40,   595,
     254,   566,   570,   596,  -296,   979,    90,   290,   289,    56,
      57,   475,   290,   541,   583,   264,  -296,  -296,   586,   859,
     841,   281,  -300,  -291,   842,   336,   290,  -640,  -640,  -640,
     289,   -92,   -92,   224,  -300,  -300,   302,   323,  -296,  -296,
    -296,  -296,   243,  -296,  -296,   290,    55,   315,   688,   288,
     373,   290,   636,   637,    90,   627,  -300,  -300,  -300,  -300,
     -23,  -300,  -300,   534,   323,    71,   243,  -567,    90,   571,
     -92,   -92,    71,   444,   444,   526,   243,   584,   243,   290,
     243,   243,   326,   243,  -292,   243,   534,   243,   582,   243,
      92,   243,   724,   243,   725,   243,   572,   243,   326,    90,
     243,   573,   -25,   542,   243,   364,   927,   243,   -92,   -92,
     243,   329,   243,  -291,  -296,   526,   290,   290,   587,   449,
     449,   278,   446,   446,   389,   724,   244,   728,   243,   724,
     243,   729,  -300,   168,   290,   447,   447,   278,   549,    90,
    -567,   289,    56,    57,   530,   927,    90,    56,    57,   532,
     279,   948,    92,   949,   528,    56,    57,   526,   448,   448,
     296,   948,   296,   959,   296,   296,   555,   296,   927,   296,
     927,   296,   561,   296,  -292,   296,   563,   296,   121,   296,
     564,   296,   927,   296,   296,   289,   720,   760,   296,   585,
     948,   296,   978,   948,   296,   991,   296,   288,   516,    56,
      57,   649,    71,   879,   880,   233,   456,   439,   457,   299,
     302,   571,   296,   641,   296,    56,    57,   683,   537,   306,
     309,   242,   317,    92,   398,   400,   258,   695,    56,    57,
      92,   415,   416,   265,   405,   643,   653,   242,   572,   417,
     121,   289,   680,   573,   705,   654,   708,   709,   298,   711,
      73,   727,   730,   444,   521,   522,   523,   524,   525,   459,
     418,  -642,  -642,  -642,   460,   322,  -403,   325,   516,   328,
     763,   356,   774,   796,   461,   803,    90,    73,   676,   818,
     677,   819,   821,    88,  -643,  -643,  -643,   822,   723,   824,
     825,   829,   860,   837,   458,   838,   420,   839,    73,   449,
     404,   484,   446,    88,   698,   843,   844,   847,   462,   892,
     918,   121,    73,   942,   935,   447,     4,   570,   121,   147,
     148,   463,   410,   411,   412,   413,   414,   256,   753,   284,
     764,   335,   337,   339,   149,   150,   151,   340,   448,   548,
     152,   342,   544,   338,   464,   344,   346,   348,   765,   415,
     416,   350,   153,   351,   154,   155,   352,   417,   353,    28,
      29,   357,   359,   679,    31,   156,   547,    71,   735,   960,
     790,   625,   632,   157,   738,   990,   716,   846,   418,   243,
     747,     0,   748,    73,   552,     0,     0,    71,     0,   752,
      73,   752,     0,     0,     0,   243,     0,   475,     0,     0,
       0,     0,     0,     0,    42,     0,     0,   158,     0,     0,
       0,    49,   419,     0,   420,     0,     0,   800,     0,   852,
       0,     0,    76,     0,   853,     0,     0,    88,   475,     0,
       0,   767,   575,     0,   854,   769,   770,    78,     0,     0,
     248,    90,     0,     0,     0,   777,     0,   698,   258,    76,
       0,   785,   777,     0,     0,     0,     0,   793,     0,   570,
     795,    90,     0,   279,    78,   857,     0,     0,    88,     0,
      76,     0,     0,   410,   624,   412,   413,   414,     0,   279,
       0,   855,   809,     0,    76,    78,   812,     0,   906,     0,
       0,     0,     0,   907,     0,     0,     0,     0,     0,    78,
     415,   416,     0,   908,   856,     0,     0,     0,   417,     0,
       0,    71,     0,     0,     0,   341,     0,     0,     0,     0,
      73,     0,     0,   834,   835,    92,     0,     0,   534,   418,
     343,     0,     0,     0,   911,     0,     0,   909,     0,   513,
     514,    88,   515,     0,     0,    92,     0,     0,   516,     0,
     910,     0,    71,     0,     0,    76,     0,     0,     0,     0,
       0,     0,    76,   419,     0,   420,    88,   873,     0,     0,
      78,     0,     0,     0,     0,   878,     0,    78,   970,     0,
      88,   884,    88,   971,     0,    90,   890,     0,     0,   785,
     983,    88,   890,   972,     0,     0,     0,     0,     0,     0,
     984,   518,   519,   520,   521,   522,   523,   524,   525,  -157,
      88,     0,     0,   121,     0,     0,     0,  -298,     0,     0,
       0,  -157,  -157,   323,   975,    71,    90,   973,   921,  -298,
    -298,   988,     0,   121,   985,     0,     0,   931,     0,     0,
     934,     0,     0,  -157,  -157,  -157,  -157,   986,  -157,  -157,
      71,  -298,  -298,  -298,  -298,     0,  -298,  -298,     0,    88,
       0,    88,     0,   974,    71,   940,    71,     0,     0,     0,
     987,   438,   439,   440,     0,    71,     0,     0,     0,     0,
       0,   952,     0,     0,     0,    73,     0,   412,   413,   414,
       0,     0,    76,     0,    71,   633,   443,   416,     0,    90,
       0,     0,     0,     0,   417,    73,     0,    78,     0,    88,
      92,    88,   415,   416,     0,  -157,    88,    88,     0,  -157,
     417,  -157,     0,     0,    90,   418,     0,  -298,    80,   290,
     992,     0,     0,     0,     0,     0,     0,     0,    90,     0,
      90,   418,     0,    71,     0,    71,     0,   575,    88,    90,
      88,     0,     0,     0,     0,    80,     0,   258,     0,   419,
       0,   420,     0,     0,    88,     0,     0,     0,    90,     0,
       0,    88,    88,     0,     0,   419,    80,   420,     0,     0,
       0,     0,     0,    92,     0,     0,   733,     0,     0,     0,
      80,     0,     0,    71,     0,    71,     0,     0,   121,     0,
      71,    71,     0,    88,     0,     0,    88,     0,    92,     0,
       0,     0,     0,     0,    88,     0,     0,    90,     0,    90,
       0,   345,    92,     0,    92,     0,   485,     0,     0,    73,
       0,     0,    71,    92,    71,   494,   495,   496,   497,   498,
     499,   500,   501,     0,     0,     0,     0,     0,    71,     0,
       0,     0,    92,     0,     0,    71,    71,    76,     0,   773,
       0,    80,     0,     0,     0,     0,     0,    90,    80,    90,
      73,   121,    78,     0,    90,    90,     0,    76,     0,     0,
       0,     0,     0,     0,   798,     0,     0,    71,    82,   575,
      71,     0,    78,     0,     0,     0,   121,     0,    71,     0,
     807,    92,     0,    92,     0,     0,    90,     0,    90,   814,
     121,     0,   121,     0,     0,    82,     0,     0,     0,     0,
       0,   121,    90,     0,     0,     0,     0,     0,   826,    90,
      90,     0,     0,     0,     0,     0,    82,     0,     0,     0,
     121,     0,     0,    73,     0,     0,     0,     0,     0,     0,
      82,    92,     0,    92,     0,     0,     0,     0,    92,    92,
       0,    90,     0,     0,    90,     0,     0,     0,    73,     0,
       0,     0,    90,     0,   646,     0,     0,   864,     0,   866,
       0,   347,    73,  -302,    73,     0,     0,     0,    84,   121,
      92,   121,    92,    73,     0,  -302,  -302,   306,    80,     0,
       0,    76,     0,     0,     0,     0,    92,     0,     0,     0,
       0,     0,    73,    92,    92,    84,    78,  -302,  -302,  -302,
    -302,    82,  -302,  -302,     0,     0,     0,   899,    82,   901,
       0,     0,     0,   678,   914,   915,    84,     0,   682,   121,
       0,   121,    76,     0,   686,    92,   121,   121,    92,     0,
      84,   438,   439,   440,     0,     0,    92,    78,     0,     0,
     120,    73,     0,    73,     0,   707,   937,     0,   938,     0,
       0,   849,   439,   850,   441,   442,   443,   416,   121,     0,
     121,   349,   939,     0,   417,     0,     0,   120,     0,   945,
     946,     0,     0,  -302,   121,   290,   415,   416,     0,     0,
       0,   121,   121,     0,   417,   418,     0,     0,   120,     0,
       0,    73,     0,    73,     0,    76,     0,     0,    73,    73,
       0,    84,   120,     0,   977,   418,     0,     0,    84,     0,
      78,     0,     0,   121,     0,     0,   121,     0,     0,   419,
      76,   420,     0,     0,   121,     0,     0,     0,   123,     0,
      73,     0,    73,   355,    76,    78,    76,     0,    82,   419,
       0,   851,     0,    80,     0,    76,    73,     0,     0,    78,
       0,    78,     0,    73,    73,   234,     0,     0,     0,     0,
      78,     0,     0,    80,    76,     0,     0,     0,     0,  -117,
       0,     0,     0,   120,     0,     0,   234,     0,     0,    78,
     120,  -117,  -117,  -117,     0,    73,     0,     0,    73,     0,
     123,     0,     0,     0,     0,     0,    73,     0,     0,     0,
       0,     0,     0,  -117,  -117,  -117,  -117,     0,  -117,  -117,
     438,   439,   440,    76,     0,    76,     0,     0,     0,     0,
       0,   358,     0,     0,     0,     0,     0,     0,    78,     0,
      78,   820,     0,   630,   442,   443,   416,     0,    84,     0,
       0,     0,     0,   417,     0,     0,   828,     0,     0,   830,
       0,     0,     0,     0,  -299,     0,   836,     0,     0,  -117,
     840,   123,     0,    76,   418,    76,  -299,  -299,   123,     0,
      76,    76,   845,     0,     0,  -117,     0,     0,    78,  -117,
      78,  -117,     0,     0,    67,    78,    78,    80,  -299,  -299,
    -299,  -299,     0,  -299,  -299,     0,     0,    68,   419,     0,
     420,     0,    76,    82,    76,     0,     0,     0,     0,     0,
     120,    67,     0,   885,   887,     0,   888,    78,    76,    78,
       0,     0,   895,    82,    68,    76,    76,     0,    80,     0,
       0,     0,    67,    78,     0,     0,     0,     0,     0,     0,
      78,    78,     0,     0,     0,    68,    67,     0,   903,   439,
     904,     0,   917,     0,     0,     0,     0,    76,     0,    68,
      76,     0,     0,   926,  -299,     0,   290,     0,    76,   932,
       0,     0,    78,   415,   905,    78,     0,     0,   220,   221,
       0,   417,     0,    78,     0,     0,     0,     0,   241,   967,
     439,   968,     0,     0,     0,     0,     0,     0,   234,     0,
       0,    80,   418,    84,     0,     0,    69,     0,     0,     0,
     951,     0,     0,   953,   415,   416,     0,    67,     0,     0,
       0,     0,   417,    84,    67,     0,    80,     0,     0,     0,
      68,   963,     0,    69,     0,     0,   419,    68,   420,     0,
      80,     0,    80,   969,     0,   330,     0,    82,     0,   362,
       0,    80,     0,   367,    69,     0,     0,     0,   376,     0,
       0,   391,   392,   393,   394,     0,     0,     0,    69,     0,
      80,   395,     0,     0,   401,   120,   406,   419,     0,   420,
       0,     0,   409,     0,   980,   439,   981,     4,    82,     0,
     147,   148,     0,     0,     0,   120,   468,     0,     0,     0,
       0,     0,     0,     0,     0,   149,   150,   151,     0,   415,
     416,   152,     0,     0,     0,     0,     0,   982,     0,    80,
       0,    80,     0,   153,     0,   154,   155,     0,     0,     0,
      28,    29,     0,     0,     0,    31,   156,     0,   418,    69,
       0,     0,     0,     0,   157,     0,    69,    84,     0,     0,
       0,     0,     0,     0,    67,    39,    40,     0,    86,     0,
       0,    82,     0,   123,     0,     0,     0,    68,     0,    80,
       0,    80,   419,     0,   420,    42,    80,    80,   158,     0,
       0,     0,    49,   123,     0,    86,    82,     0,    84,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      82,     0,    82,  -119,    55,     0,    86,     0,    80,   264,
      80,    82,     0,     0,     0,  -119,  -119,  -119,     0,   120,
      86,     0,     0,    95,    80,     0,     0,     0,     0,     0,
      82,    80,    80,  -304,     0,     0,     0,  -119,  -119,  -119,
    -119,     0,  -119,  -119,     0,  -304,  -304,   312,     0,     0,
     225,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,    84,     0,    80,     0,     0,    80,  -304,  -304,  -304,
    -304,   257,  -304,  -304,    80,     0,    69,     0,     0,    82,
       0,    82,     0,     0,     0,    95,    84,     0,     0,     0,
       0,    86,     0,  -119,     0,     0,     0,     0,    86,    96,
      84,     0,    84,     0,     0,     0,     0,   234,     0,  -119,
       0,    84,     0,  -119,     0,  -119,     0,     0,     0,    67,
       0,     0,     0,     0,     0,     0,   226,     0,     0,    82,
      84,    82,    68,   120,     0,     0,    82,    82,     0,    67,
       0,     0,     0,  -304,     0,   290,     0,   226,   123,     0,
       0,     0,    68,     0,     0,     0,    95,     0,   120,     0,
       0,    96,     0,    95,   379,     0,     0,     0,    82,     0,
      82,     0,   120,     0,   120,  -121,   380,   381,     0,    84,
       0,    84,     0,   120,    82,     0,     0,  -121,  -121,  -121,
       0,    82,    82,     0,     0,     0,     0,     0,   382,   383,
     384,   385,   120,   386,   387,     0,     0,     0,     0,  -121,
    -121,  -121,  -121,     0,  -121,  -121,     0,     0,    97,     0,
       0,   123,     0,    82,     0,     0,    82,     0,    86,    84,
       0,    84,    96,     0,    82,     0,    84,    84,     0,    96,
       0,    69,     0,     0,     0,   227,   123,     0,     0,     0,
       0,   120,     0,   120,   388,     0,     0,     0,     0,     0,
     123,    69,   123,    67,     0,  -121,    97,     0,    84,     0,
      84,   123,     0,     0,   389,     0,    68,     0,     0,     0,
      97,  -121,     0,     0,    84,  -121,     0,  -121,     0,     0,
     123,    84,    84,   588,     0,     0,     0,     0,     0,     0,
       0,   120,     0,   120,    67,     0,     0,     0,   120,   120,
       0,     0,     0,     0,     0,     0,     0,    68,     0,     0,
       0,     0,     0,    84,     0,     0,    84,     0,     0,     0,
       0,  -118,     0,     0,    84,     0,     0,     0,     0,   123,
     120,   123,   120,  -118,  -118,  -118,     0,  -305,     0,     0,
       0,    97,     0,     0,     0,     0,   120,     0,    97,  -305,
    -305,   315,     0,   120,   120,  -118,  -118,  -118,  -118,   226,
    -118,  -118,     0,     0,   100,     0,     0,    67,     0,     0,
       0,  -305,  -305,  -305,  -305,    69,  -305,  -305,     0,   123,
      68,   123,     0,    86,     0,   120,   123,   123,   120,     0,
       0,   228,    67,     0,     0,     0,   120,     0,     0,     0,
       0,     0,     0,    86,     0,    68,    67,     0,    67,     0,
       0,  -118,   228,     0,     0,     0,    69,    67,   123,    68,
     123,    68,     0,     0,     0,     0,   100,  -118,     0,     0,
      68,  -118,     0,  -118,   123,     0,    67,     0,     0,     0,
       0,   123,   123,     0,   102,     0,     0,  -305,    95,    68,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,     0,    95,     0,
       0,   229,     0,   123,     0,     0,   123,     0,   589,     0,
       0,  -306,     0,     0,   123,    67,     0,    67,     0,    69,
       0,     0,   102,  -306,  -306,   317,     0,   100,    68,     0,
      68,     0,     0,     0,   100,     0,   102,     0,   645,     0,
       0,     0,     0,     0,    69,  -306,  -306,  -306,  -306,     0,
    -306,  -306,     0,     0,    96,     0,     0,    86,    69,     0,
      69,     0,     0,     0,     0,    67,     0,    67,     0,    69,
       0,     0,    67,    67,    96,     0,     0,     0,    68,     0,
      68,     0,     0,     0,     0,    68,    68,     0,    69,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    86,     0,
       0,     0,     0,     0,    67,     0,    67,   102,     0,     0,
       0,     0,  -311,     0,   102,     0,     0,    68,     0,    68,
      67,  -306,   257,   290,  -311,  -311,   364,    67,    67,     0,
       0,     0,     0,    68,     0,     0,     0,    69,     0,    69,
      68,    68,     0,   456,   439,   457,  -311,  -311,  -311,  -311,
       0,  -311,  -311,     0,     0,     0,     0,     0,     0,    67,
       0,   108,    67,    95,   228,     0,   746,   637,   415,   416,
      67,    86,    68,    97,     0,    68,   417,     0,     0,     0,
       0,     4,     0,    68,   147,   148,     0,    69,     0,    69,
       0,     0,     0,    97,    69,    69,    86,   418,   226,   149,
     150,   151,     0,     0,     0,   152,     0,     0,     0,     0,
      86,     0,    86,     0,     0,     0,     0,   153,     0,   154,
     155,    86,  -311,   108,    28,    29,    69,     0,    69,    31,
     156,   458,     0,   420,     0,   105,    95,     0,   157,    96,
      86,     0,    69,     0,   591,     0,     0,     0,     0,    69,
      69,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    95,   230,     0,     0,     0,     0,     0,     0,   775,
       0,     0,   158,     0,     0,    95,    49,    95,     0,     0,
     107,    69,     0,   230,    69,     0,    95,     0,     0,    86,
       0,    86,    69,     0,   108,     0,     0,   105,     0,   776,
       0,   108,     0,     0,     0,    95,     0,   232,     0,     0,
       0,     0,    96,     0,     0,     0,     0,    97,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   232,   100,
       0,     0,     0,     0,     0,     0,     0,    96,     0,    86,
       0,    86,   107,     0,     0,     0,    86,    86,     0,   100,
       0,    96,  -122,    96,    95,     0,    95,     0,    97,     0,
       0,     0,    96,     0,  -122,  -122,  -122,     0,   105,     0,
       0,     0,     0,     0,     0,   105,     0,     0,    86,     0,
      86,    96,     0,     0,     0,     0,  -122,  -122,  -122,  -122,
       0,  -122,  -122,     0,    86,     0,     0,     0,     0,     0,
       0,    86,    86,     0,    95,     0,    95,     0,     0,   102,
       0,    95,    95,   107,     0,     0,     0,     0,     0,     0,
     107,     0,     0,     0,     0,     0,     0,     0,     0,   102,
      96,    97,    96,    86,     0,     0,    86,     0,     0,     0,
       0,     0,  -122,    95,    86,    95,     0,     0,     0,     0,
       0,   109,     0,     0,     0,     0,    97,     0,  -122,    95,
       0,     0,  -122,     0,  -122,     0,    95,    95,     0,     0,
      97,     0,    97,   228,     0,     0,     0,     0,     0,     0,
      96,    97,    96,     0,     0,     0,     0,    96,    96,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    95,     0,
      97,    95,     0,     0,     0,   230,     0,     0,     0,    95,
       0,     0,     0,   109,   100,     0,     0,     0,     0,    96,
       0,    96,     0,     0,     0,   379,   111,     0,     0,     0,
       0,     0,     0,  -120,     0,    96,   118,   380,   381,     0,
       0,     0,    96,    96,     0,  -120,  -120,  -120,     0,    97,
     232,    97,     0,   102,     0,     0,     0,     0,     0,   382,
     383,   384,   385,     0,   386,   387,     0,  -120,  -120,  -120,
    -120,     0,  -120,  -120,    96,     0,     0,    96,     0,     0,
       0,     0,     0,     0,   109,    96,     0,   100,   111,     0,
       0,   109,     0,     0,   102,     0,   108,     0,   118,    97,
       0,    97,     0,     0,     0,     0,    97,    97,     0,     0,
       0,     0,   100,     0,     0,     0,   108,     0,     0,     0,
       0,     0,     0,  -120,     0,     0,   100,     0,   100,     0,
       0,     0,     0,     0,     0,   389,     0,   100,    97,  -120,
      97,     0,     0,  -120,     0,  -120,     0,     0,     0,     0,
       0,     0,     0,     0,    97,     0,   100,     0,     0,   111,
       0,    97,    97,     0,     0,     0,   111,   102,     0,   118,
     105,     0,     0,     0,     0,     0,   118,     0,     0,     0,
       0,     0,     0,     0,     0,  -158,     0,     0,     0,     0,
     105,     0,   102,    97,     0,     0,    97,  -158,  -158,   326,
       0,     0,     0,     0,    97,   100,   102,   100,   102,     0,
       4,     0,     0,   147,   148,   107,     0,   102,     0,  -158,
    -158,  -158,  -158,     0,  -158,  -158,     0,     0,   149,   150,
     151,     0,     0,     0,   152,   107,   102,     0,  -301,     0,
       0,     0,     0,     0,     0,     0,   153,     0,   154,   155,
    -301,  -301,   398,    28,    29,   100,     0,   100,    31,   156,
       0,     0,   100,   100,     0,     0,     0,   157,     0,     0,
       0,     0,  -301,  -301,  -301,  -301,     0,  -301,  -301,     0,
       0,   108,     0,     0,     0,   102,     0,   102,     0,     0,
       0,  -158,     0,     0,   100,  -158,   100,  -158,    42,     0,
       0,   158,     0,     0,     0,    49,     0,     0,     0,     0,
     100,     0,     0,     0,   230,     0,     0,   100,   100,     0,
       0,     0,     0,     0,     0,     0,     0,  -314,     0,    56,
      57,     0,     0,     0,     0,   102,     0,   102,     0,  -314,
    -314,   405,   102,   102,     0,     0,     0,     0,  -301,   100,
     290,     0,   100,     0,   108,   105,     0,     0,     0,   232,
     100,  -314,  -314,  -314,  -314,     0,  -314,  -314,     0,     0,
       0,     0,     0,     0,   102,     0,   102,     0,     0,   108,
       0,     0,     0,     0,     0,     0,   109,     0,     0,     0,
     102,     0,     0,   108,     0,   108,     0,   102,   102,     0,
     107,     0,     0,     0,   108,     0,   109,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   108,     0,     0,     0,     0,   105,   102,
       0,     0,   102,     0,     0,     0,     0,  -314,     0,   290,
     102,     0,     0,     0,     4,     0,     0,   147,   148,     0,
       0,     0,     0,   105,     0,     0,     0,     0,     0,     0,
       0,   111,   149,   150,   151,     0,     0,   105,   152,   105,
       0,   118,   108,   107,   108,     0,     0,     0,   105,     0,
     153,   111,   154,   155,     0,     0,     0,    28,    29,     0,
       0,   118,    31,   156,     0,     0,     0,   105,   107,     0,
       0,   157,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   107,     0,   107,     0,     0,     0,     0,     0,
       0,     0,   108,   107,   108,     0,     0,     0,     0,   108,
     108,     0,    42,     0,     0,   158,     0,     0,   301,    49,
     304,   305,   107,   308,     0,   311,   105,   314,   105,   316,
       0,   319,     0,   321,     0,   324,     0,   327,     0,   354,
     360,   108,   833,   108,   365,     0,     0,   369,     0,     0,
     374,   109,   378,     0,  -307,     0,     0,   108,   145,   146,
       0,     0,     0,     0,   108,   108,  -307,  -307,   403,     0,
     408,   107,     0,   107,     0,     0,   105,     0,   105,     0,
       0,     0,     0,   105,   105,     0,     0,     0,  -307,  -307,
    -307,  -307,     0,  -307,  -307,     0,   108,     0,     0,   108,
       0,     0,     0,     0,     0,     0,     0,   108,     0,     0,
       0,     0,     0,     0,     0,   105,     0,   105,     0,     0,
     287,   107,     0,   107,   109,     0,   111,     0,   107,   107,
       0,   105,     0,     0,     0,     0,   118,     0,   105,   105,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   109,
       0,     0,     0,     0,     0,  -308,     0,     0,     0,     0,
     107,     0,   107,   109,  -307,   109,   290,  -308,  -308,     0,
     105,     0,     0,   105,   109,     0,   107,   397,     0,     0,
       0,   105,     0,   107,   107,     0,     0,     0,     0,  -308,
    -308,  -308,  -308,   109,  -308,  -308,     0,     0,   508,   111,
       0,     0,   510,   511,   512,     0,     0,     0,     0,   118,
       0,     0,     0,     0,     0,   107,     0,     0,   107,     0,
       0,   474,   513,   514,   111,   515,   107,     0,     0,     0,
       0,   516,     0,     0,   118,     0,     0,     0,   111,     0,
     111,     0,   109,     0,   109,     0,     0,     0,   118,   111,
     118,     0,     0,     0,     0,     0,     0,     0,     0,   118,
       0,     0,     0,     0,     0,  -308,     0,   290,   111,   531,
       0,   533,     0,     0,     0,     0,   538,     0,   118,     0,
       0,     0,     0,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   109,     0,   109,     0,     0,     0,     0,   109,
     109,     0,     0,   554,     0,   558,     0,     0,   562,     0,
       0,     0,     0,     0,     0,     0,     0,   111,     0,   111,
     581,     0,     0,     0,     0,     0,     0,   118,     0,   118,
       0,   109,     0,   109,     0,     0,     0,     0,     0,   194,
     597,     0,     0,     0,     0,     0,     0,   109,     0,   216,
     217,     0,     0,     0,   109,   109,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   111,     0,   111,
     510,   511,   512,     0,   111,   111,     0,   118,     0,   118,
     262,     0,     0,     0,   118,   118,   109,   194,   275,   109,
     513,   514,     0,   515,     0,     0,     0,   109,     0,   516,
       0,     0,     0,     0,     0,     0,   111,     0,   111,     0,
       0,     0,     0,     0,     0,     0,   118,     0,   118,     0,
       0,     0,   111,     0,     0,     0,     0,     0,     0,   111,
     111,     0,   118,     0,     0,     0,     0,     0,     0,   118,
     118,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,   524,   525,
       0,   111,     0,     0,   111,   194,     0,     0,   621,     0,
       0,   118,   111,     0,   118,     0,     0,     0,     0,     0,
       0,     0,   118,     0,     0,     0,     0,     0,     0,     0,
     473,     0,     0,     0,     0,   479,   480,     0,   481,   482,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   635,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   640,     0,   642,
       0,   644,     0,     0,   650,     0,   651,     0,   291,   293,
     294,     0,   300,     0,   303,     0,     0,   307,     0,   310,
       0,   313,     0,     0,     0,   318,     0,   320,     0,     0,
       0,     0,     0,   331,     0,     0,     0,   363,     0,   551,
       0,   368,     0,   372,     0,     0,   377,     0,     0,     0,
       0,     0,     0,   574,     0,   674,     0,   675,     0,     0,
     580,   399,   402,   194,   407,     0,     0,     0,   684,     0,
       0,     0,     0,     0,     0,   690,     0,     0,   693,   694,
       0,   696,     0,     0,     0,   702,     0,     0,     0,   602,
       0,     0,   706,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   717,     0,
     719,     0,     0,   291,   293,   294,   300,   303,   307,   310,
     313,     0,   318,   320,     0,     0,   331,     0,   363,     0,
     368,     0,   372,   377,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   399,     0,   402,   407,     0,
       0,     0,     0,     0,     0,     0,     0,   739,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   363,     0,   368,
     372,   377,     0,     0,   402,   407,     0,     0,   609,     0,
       0,   610,   611,   612,   613,   614,   615,   616,     0,     0,
       0,     0,     0,     0,     0,   618,     0,     0,     0,   402,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   766,
       4,     0,     0,   147,   148,     0,     0,   771,     0,   772,
       0,     0,     0,     0,     0,     0,     0,   784,   149,   150,
     151,     0,     0,     0,   152,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   153,     0,   154,   155,
       0,     0,     0,    28,    29,     0,     0,     0,    31,   156,
       0,     0,     0,   808,     0,     0,   810,   157,     0,     0,
     813,     0,     0,   816,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   775,     0,
       0,   158,   832,     0,     0,    49,     0,   655,   656,   657,
     658,   659,   660,   661,   662,   663,   664,   665,   666,   667,
     668,   669,   670,   671,   672,   673,     0,     0,   889,     0,
       0,     0,     0,     0,     0,     0,     0,   862,     0,     0,
     865,     0,   685,   868,     0,     0,   871,     0,   692,   874,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     508,   509,     0,     0,   510,   511,   512,     0,   574,     0,
     894,     0,     0,     0,     0,     0,     4,   713,     0,   147,
     148,     0,     0,     0,   513,   514,     0,   515,     0,     0,
       0,   721,     0,   516,   149,   150,   151,     0,   916,     0,
     152,     0,     0,   602,     0,     0,     0,     0,     0,     0,
     923,   924,   153,     0,   154,   155,   930,     0,     0,    28,
      29,   194,     0,     0,    31,   156,   936,   194,     0,     0,
       0,     0,     0,   157,     0,   744,     0,     0,     0,     0,
       0,     0,     0,     0,   754,   517,   518,   519,   520,   521,
     522,   523,   524,   525,     0,     0,     0,     0,     0,     0,
     652,     0,     0,     0,   775,     0,     0,   158,     0,   956,
       0,    49,   958,     0,     0,     0,     0,     0,   788,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   776,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     574,     0,     0,     0,     0,     0,   402,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   602,     0,     0,   802,
       0,     0,   372,     0,     0,   194,     0,     0,     0,   194,
       0,     0,     0,     0,     0,   817,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   823,     0,     0,
       0,     0,   827,    -3,     1,     0,     2,     3,     4,     5,
       6,     7,     8,     9,    10,     0,     0,     0,     0,     0,
      11,    12,    13,    14,     0,    15,    16,    17,    18,     0,
       0,     0,    19,     0,     0,   713,    20,    21,     0,    22,
       0,     0,     0,     0,    23,    24,    25,    26,     0,    27,
       0,    28,    29,     0,     0,    30,    31,    32,     0,     0,
       0,   875,     0,   876,     0,    33,    34,    35,   194,     0,
       0,     0,    36,     0,    37,    38,    39,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,     0,    51,     0,    52,    53,
       0,     0,    54,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    55,     0,    56,    57,     0,
      58,     0,    59,     0,    60,     0,     0,    -2,   282,     0,
       2,     3,     4,     5,     6,     7,     8,     9,    10,     0,
       0,     0,     0,     0,    11,    12,    13,    14,   194,    15,
      16,    17,    18,     0,     0,     0,    19,     0,     0,     0,
      20,    21,     0,    22,     0,     0,     0,     0,    23,    24,
      25,    26,     0,    27,     0,    28,    29,     0,     0,    30,
      31,    32,     0,     0,     0,     0,     0,     0,     0,    33,
      34,    35,     0,     0,     0,     0,    36,     0,    37,    38,
      39,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,     0,
      51,     0,    52,    53,     0,     0,    54,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
       0,    56,    57,     0,    58,   431,    59,     0,    60,     4,
       5,     6,     7,     8,     9,    10,  -102,  -102,  -102,  -102,
    -102,    11,    12,    13,    14,     0,    15,    16,    17,    18,
       0,     0,     0,    19,     0,     0,     0,    20,    21,     0,
      22,  -102,  -102,  -102,  -102,    23,    24,    25,    26,     0,
      27,  -102,    28,    29,     0,     0,    30,    31,    32,     0,
       0,     0,     0,     0,     0,     0,    33,    34,    35,  -102,
    -102,  -102,  -102,    36,     0,    37,    38,    39,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,  -102,    51,  -102,    52,
      53,     0,     0,    54,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    55,     0,    56,    57,
       0,    58,   431,    59,  -102,    60,     4,     5,     6,     7,
       8,     9,    10,     0,     0,  -101,  -101,  -101,    11,    12,
      13,    14,     0,    15,    16,    17,    18,     0,     0,     0,
      19,     0,     0,     0,    20,    21,     0,    22,     0,     0,
    -101,  -101,    23,    24,    25,    26,     0,    27,  -101,    28,
      29,     0,     0,    30,    31,    32,     0,     0,     0,     0,
       0,     0,     0,    33,    34,    35,  -101,  -101,  -101,  -101,
      36,     0,    37,    38,    39,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,  -101,    51,  -101,    52,    53,     0,     0,
      54,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    55,     0,    56,    57,     0,    58,   431,
      59,     0,    60,     4,     5,     6,     7,     8,     9,    10,
       0,     0,  -521,  -521,  -521,    11,    12,    13,    14,     0,
      15,    16,    17,    18,     0,     0,     0,    19,     0,     0,
       0,    20,    21,     0,    22,  -521,  -521,  -521,  -521,    23,
      24,    25,    26,     0,    27,  -521,    28,    29,     0,     0,
      30,    31,    32,     0,     0,     0,     0,     0,     0,     0,
      33,    34,    35,     0,     0,     0,  -521,    36,     0,    37,
      38,    39,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    -521,    51,  -521,    52,    53,     0,     0,    54,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      55,     0,    56,    57,     0,    58,   431,    59,     0,    60,
       4,     5,     6,     7,     8,     9,    10,     0,     0,  -596,
    -596,  -596,    11,    12,    13,    14,     0,    15,    16,    17,
      18,     0,     0,     0,    19,     0,     0,     0,    20,    21,
       0,    22,  -596,  -596,  -596,  -596,    23,    24,    25,    26,
       0,    27,  -596,    28,    29,     0,     0,    30,    31,    32,
       0,     0,     0,     0,     0,     0,     0,    33,    34,    35,
       0,     0,     0,  -596,    36,     0,    37,    38,    39,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,  -596,    51,  -596,
      52,    53,     0,     0,    54,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    55,     0,    56,
      57,     0,    58,   431,    59,     0,    60,     4,     5,     6,
       7,     8,     9,    10,     0,     0,  -522,  -522,  -522,    11,
      12,    13,    14,     0,    15,    16,    17,    18,     0,     0,
       0,    19,     0,     0,     0,    20,    21,     0,    22,  -522,
    -522,  -522,  -522,    23,    24,    25,    26,     0,    27,  -522,
      28,    29,     0,     0,    30,    31,    32,     0,     0,     0,
       0,     0,     0,     0,    33,    34,    35,     0,     0,     0,
    -522,    36,     0,    37,    38,    39,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,  -522,    51,  -522,    52,    53,     0,
       0,    54,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    55,     0,    56,    57,     0,    58,
     431,    59,     0,    60,     4,     5,     6,     7,     8,     9,
      10,     0,     0,  -597,  -597,  -597,    11,    12,    13,    14,
       0,    15,    16,    17,    18,     0,     0,     0,    19,     0,
       0,     0,    20,    21,     0,    22,  -597,  -597,  -597,  -597,
      23,    24,    25,    26,     0,    27,  -597,    28,    29,     0,
       0,    30,    31,    32,     0,     0,     0,     0,     0,     0,
       0,    33,    34,    35,     0,     0,     0,  -597,    36,     0,
      37,    38,    39,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,  -597,    51,  -597,    52,    53,     0,     0,    54,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    55,     0,    56,    57,     0,    58,   431,    59,     0,
      60,     4,     5,     6,     7,     8,     9,    10,  -101,  -101,
    -101,  -101,  -101,    11,    12,    13,    14,     0,    15,    16,
      17,    18,     0,     0,     0,    19,     0,     0,     0,    20,
      21,     0,    22,     0,     0,  -101,  -101,    23,    24,    25,
      26,     0,    27,  -101,    28,    29,     0,     0,    30,    31,
      32,     0,     0,     0,     0,     0,     0,     0,    33,    34,
      35,     0,     0,     0,  -101,    36,     0,    37,    38,    39,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,  -101,    51,
    -101,    52,    53,     0,     0,    54,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    55,     0,
      56,    57,     0,    58,   431,    59,     0,    60,     4,     5,
       6,     7,     8,     9,    10,     0,     0,  -101,  -101,  -101,
      11,    12,    13,    14,     0,    15,    16,    17,    18,     0,
       0,     0,    19,     0,     0,     0,    20,    21,     0,    22,
    -101,  -101,  -101,  -101,    23,    24,    25,    26,     0,    27,
    -101,    28,    29,     0,     0,    30,    31,    32,     0,     0,
       0,     0,     0,     0,     0,    33,    34,    35,     0,     0,
       0,  -101,    36,     0,    37,    38,    39,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,  -101,    51,  -101,    52,    53,
       0,     0,    54,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    55,     0,    56,    57,     0,
      58,   431,    59,     0,    60,     4,     5,     6,     7,     8,
       9,    10,     0,     0,  -101,  -101,  -101,    11,    12,    13,
      14,     0,    15,    16,    17,    18,     0,     0,     0,    19,
       0,     0,     0,    20,    21,     0,    22,     0,  -101,  -101,
    -101,    23,    24,    25,    26,     0,    27,  -101,    28,    29,
       0,     0,    30,    31,    32,     0,     0,     0,     0,     0,
       0,     0,    33,    34,    35,     0,     0,     0,  -101,    36,
       0,    37,    38,    39,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,  -101,    51,  -101,    52,    53,     0,     0,    54,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    55,     0,    56,    57,     0,    58,   431,    59,
       0,    60,     4,     5,     6,     7,     8,     9,    10,     0,
       0,  -101,  -101,  -101,    11,    12,    13,    14,     0,    15,
      16,    17,    18,     0,     0,     0,    19,     0,     0,     0,
      20,    21,     0,    22,     0,     0,  -101,  -101,    23,    24,
      25,    26,     0,    27,  -101,    28,    29,     0,     0,    30,
      31,    32,     0,     0,     0,     0,     0,     0,     0,    33,
      34,    35,     0,     0,  -101,  -101,    36,     0,    37,    38,
      39,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,  -101,
      51,  -101,    52,    53,     0,     0,    54,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
       0,    56,    57,     0,    58,   431,    59,     0,    60,     4,
       5,     6,     7,     8,     9,    10,     0,     0,  -101,  -101,
    -101,    11,    12,    13,    14,     0,    15,    16,    17,    18,
       0,     0,     0,    19,     0,     0,     0,    20,    21,     0,
      22,     0,     0,  -101,  -101,    23,    24,    25,    26,     0,
      27,  -101,    28,    29,     0,     0,    30,    31,    32,     0,
       0,     0,     0,     0,     0,     0,    33,    34,    35,     0,
       0,     0,  -101,    36,     0,    37,    38,    39,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,  -101,    51,  -101,    52,
      53,     0,     0,    54,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    55,     0,    56,    57,
       0,    58,   431,    59,     0,    60,     4,     5,     6,     7,
       8,     9,    10,     0,     0,     0,     0,  -101,    11,    12,
      13,    14,     0,    15,    16,    17,    18,     0,     0,     0,
      19,     0,     0,     0,    20,    21,     0,    22,     0,     0,
       0,     0,    23,    24,    25,    26,     0,    27,     0,    28,
      29,     0,     0,    30,    31,    32,     0,     0,     0,     0,
       0,     0,     0,    33,    34,    35,     0,     0,     0,     0,
      36,     0,    37,    38,    39,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,     0,    51,     0,    52,    53,     0,     0,
      54,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    55,     0,    56,    57,     0,    58,     0,
      59,  -101,    60,     4,     0,     6,   147,   148,     9,     0,
       0,     0,     0,     0,     0,    11,    12,    13,    14,     0,
      15,   149,   150,   151,     0,     0,   167,   152,     0,     0,
       0,    20,    21,     0,     0,     0,     0,     0,     0,   153,
       0,   154,   155,     0,     0,     0,    28,    29,     0,     0,
     168,    31,   156,     0,     0,     0,     0,     0,     0,     0,
     157,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,    39,    40,     0,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,    42,     0,     0,   158,    46,     0,     0,    49,     0,
       0,     0,     0,    52,    53,   268,   269,     0,     0,     0,
       0,     0,     0,   169,   170,     0,     0,     0,     0,     0,
      55,   270,     0,     0,     0,    58,   886,    59,     4,    60,
       6,   147,   148,     9,     0,     0,     0,     0,     0,     0,
      11,    12,    13,    14,     0,    15,   149,   150,   151,     0,
       0,   167,   152,     0,     0,     0,    20,    21,     0,     0,
       0,     0,     0,     0,   153,     0,   154,   155,     0,     0,
       0,    28,    29,     0,     0,   168,    31,   156,     0,     0,
       0,     0,     0,     0,     0,   157,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,    39,    40,     0,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,    42,     0,     0,   158,
      46,     0,     0,    49,     0,     0,     0,     0,    52,    53,
       0,     0,     0,     0,     0,     0,     0,     0,   169,   170,
       0,     0,     0,     0,     0,    55,   270,     0,     0,   569,
      58,   925,    59,     4,    60,     6,   147,   148,     9,     0,
       0,     0,     0,     0,     0,    11,    12,    13,    14,     0,
      15,   149,   150,   151,     0,     0,   167,   152,     0,     0,
       0,    20,    21,     0,     0,     0,     0,     0,     0,   153,
       0,   154,   155,     0,     0,     0,    28,    29,     0,     0,
     168,    31,   156,     0,     0,     0,     0,     0,     0,     0,
     157,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,    39,    40,     0,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,    42,     0,     0,   158,    46,     0,     0,    49,     0,
       0,     0,     0,    52,    53,   268,     0,     0,     0,     0,
       0,     0,     0,   169,   170,     0,     0,     0,     0,     0,
      55,   270,     0,     0,     0,    58,   950,    59,     4,    60,
       6,   147,   148,     9,     0,     0,     0,     0,     0,     0,
      11,    12,    13,    14,     0,    15,   149,   150,   151,     0,
       0,   167,   152,     0,     0,     0,    20,    21,     0,     0,
       0,     0,     0,     0,   153,     0,   154,   155,     0,     0,
       0,    28,    29,     0,     0,   168,    31,   156,     0,     0,
       0,     0,     0,     0,     0,   157,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,    39,    40,     0,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,    42,     0,     0,   158,
      46,     0,     0,    49,     0,     0,     0,     0,    52,    53,
     601,     0,     0,     0,     0,     0,     0,     0,   169,   170,
       0,     0,     0,     0,     0,    55,   171,     0,     0,     0,
      58,   962,    59,     4,    60,     6,   147,   148,     9,     0,
       0,     0,     0,     0,     0,    11,    12,    13,    14,     0,
      15,   149,   150,   151,     0,     0,   167,   152,     0,     0,
       0,    20,    21,     0,     0,     0,     0,     0,     0,   153,
       0,   154,   155,     0,     0,     0,    28,    29,     0,     0,
     168,    31,   156,     0,     0,     0,     0,     0,     0,     0,
     157,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,    39,    40,     0,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,    42,     0,     0,   158,    46,     0,     0,    49,     0,
       0,     0,     0,    52,    53,     0,     0,     0,     0,     0,
       0,     0,     0,   169,   170,     0,     0,     0,     0,     0,
      55,   171,     0,     0,     0,    58,     0,    59,     4,    60,
       6,   147,   148,     9,     0,     0,     0,     0,     0,     0,
      11,    12,    13,    14,     0,    15,   149,   150,   151,     0,
       0,   167,   152,     0,     0,     0,    20,    21,     0,     0,
       0,     0,     0,     0,   153,     0,   154,   155,     0,     0,
       0,    28,    29,     0,     0,   168,    31,   156,     0,     0,
       0,     0,     0,     0,     0,   157,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,    39,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     0,     0,   158,
      46,     0,     0,    49,     0,     0,     0,     0,    52,    53,
       0,     0,     0,     0,     0,     0,     0,     0,   169,   170,
       0,     0,     0,     0,     0,    55,   266,     0,     0,     0,
      58,     0,    59,     4,    60,     6,   147,   148,     9,     0,
       0,     0,     0,     0,     0,    11,    12,    13,    14,     0,
      15,   149,   150,   151,     0,     0,   167,   152,     0,     0,
       0,    20,    21,     0,     0,     0,     0,     0,     0,   153,
       0,   154,   155,     0,     0,     0,    28,    29,     0,     0,
     168,    31,   156,     0,     0,     0,     0,     0,     0,     0,
     157,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,    39,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    42,     0,     0,   158,    46,     0,     0,    49,     0,
       0,     0,     0,    52,    53,     0,     0,     0,     0,     0,
       0,     0,     0,   169,   170,     0,     0,     0,     0,     0,
      55,   270,     0,     0,     0,    58,     0,    59,     4,    60,
       6,   147,   148,     9,     0,     0,     0,     0,     0,     0,
      11,    12,    13,    14,     0,    15,   149,   150,   151,     0,
       0,   167,   152,     0,     0,     0,    20,    21,     0,     0,
       0,     0,     0,     0,   153,     0,   154,   155,     0,     0,
       0,    28,    29,     0,     0,   168,    31,   156,     0,     0,
       0,     0,     0,     0,     0,   157,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,    39,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     0,     0,   158,
      46,     0,     0,    49,     0,     0,     0,     0,    52,    53,
       0,     0,     0,     0,     0,     0,     0,     0,   169,   170,
       0,     0,     0,     0,     0,    55,   712,     0,     0,     0,
      58,     0,    59,     4,    60,     6,   147,   148,     9,     0,
       0,     0,     0,     0,     0,    11,    12,    13,    14,     0,
      15,   149,   150,   151,     0,     0,     0,   152,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   153,
       0,   154,   155,     0,     0,     0,    28,    29,     0,     0,
     168,    31,   156,     0,     0,     0,     0,     0,     0,     0,
     157,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,    39,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    42,     0,     0,   158,    46,     0,     4,    49,     6,
     147,   148,     9,    52,    53,     0,     0,     0,     0,    11,
      12,    13,   332,     0,   333,   149,   150,   151,     0,     0,
      55,   152,     0,     0,     0,    58,     0,    59,     0,    60,
       0,     0,     0,   153,     0,   154,   155,     0,     0,     0,
      28,    29,     0,   508,   509,    31,   156,   510,   511,   512,
       0,     0,     0,     0,   157,     4,     0,     0,   147,   148,
       0,     0,     0,    37,     0,    39,    40,   513,   514,     0,
     515,     0,     0,   149,   150,   151,   516,     0,     0,   152,
       0,     0,     0,     0,     0,    42,     0,     0,   158,    46,
       0,   153,    49,   154,   155,     0,     0,     0,    28,    29,
       0,     0,     0,    31,   156,     0,     0,     0,     0,     0,
       0,     0,   157,     0,    55,     0,     0,     0,     0,   264,
       4,    59,     0,   147,   148,     0,     0,     0,   517,   518,
     519,   520,   521,   522,   523,   524,   525,     0,   149,   150,
     151,    56,    57,   775,   152,     0,   158,     0,     0,     0,
      49,     0,     0,     0,     0,     0,   153,   896,   154,   155,
       0,     0,     0,    28,    29,     0,     0,     0,    31,   156,
       0,     0,     0,   889,     0,     0,     0,   157,     4,     0,
       0,   147,   148,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   149,   150,   151,     0,
       0,     0,   152,     0,     0,     0,     0,     0,    42,     0,
       0,   158,     0,     0,   153,    49,   154,   155,     0,     0,
    -312,    28,    29,     0,     0,     0,    31,   156,     0,     0,
       0,     0,  -312,  -312,   400,   157,     0,     0,   933,     0,
       0,     0,     0,     0,     0,     0,    39,    40,     0,     0,
       0,     0,     0,     0,  -312,  -312,  -312,  -312,     0,  -312,
    -312,     0,     0,     0,     0,     0,    42,     0,     0,   158,
       0,     0,     0,    49,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,     0,     0,     0,     0,    55,     0,     0,     0,  -315,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -315,  -315,   370,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -644,  -644,  -644,     0,     0,     0,     0,
    -312,     0,   290,  -315,  -315,  -315,  -315,     0,  -315,  -315,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
       0,     0,     0,     0,     0,   508,   509,     0,  -303,   510,
     511,   512,     0,     0,     0,     0,     0,     0,     0,     0,
    -303,  -303,   309,     0,     0,     0,     0,     0,     0,   513,
     514,     0,   515,     0,     0,   371,     0,     0,   516,  -315,
       0,   290,  -303,  -303,  -303,  -303,  -313,  -303,  -303,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -313,  -313,
     366,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,     0,
    -313,  -313,  -313,  -313,     0,  -313,  -313,   594,     0,     0,
     517,   518,   519,   520,   521,   522,   523,   524,   525,     0,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,     0,  -303,     0,
     290,     0,   508,   509,     0,  -316,   510,   511,   512,     0,
       0,     0,     0,     0,     0,     0,     0,  -316,  -316,   375,
       0,     0,     0,     0,     0,     0,   513,   514,     0,   515,
       0,     0,     0,     0,     0,   516,  -313,     0,   290,  -316,
    -316,  -316,  -316,  -312,  -316,  -316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -312,  -312,   400,     0,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,     0,  -312,  -312,  -312,
    -312,     0,  -312,  -312,   799,     0,     0,   517,   518,   519,
     520,   521,   522,   523,   524,   525,     0,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,     0,  -316,     0,   290,     0,   508,
     509,     0,  -310,   510,   511,   512,     0,     0,     0,     0,
       0,     0,     0,     0,  -310,  -310,     0,     0,     0,     0,
       0,     0,     0,   513,   514,     0,   515,     0,     0,     0,
       0,     0,   516,  -312,     0,   290,  -310,  -310,  -310,  -310,
       0,  -310,  -310,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,     0,     0,     0,     0,     4,     0,     0,
     147,   148,     0,     0,   517,   518,   519,   520,   521,   522,
     523,   524,   525,     0,     0,   149,   150,   151,     0,     4,
       0,   152,   147,   148,     0,     0,     0,     0,     0,     0,
       0,     0,  -310,   153,   290,   154,   155,   149,   150,   151,
      28,    29,     0,   152,     0,    31,   156,     0,     0,     0,
       0,     0,     0,     0,   157,   153,     0,   154,   155,     0,
       0,     0,    28,    29,     0,     0,     0,    31,   156,     0,
       0,     0,     0,     0,     0,     0,   157,     0,     0,     0,
       0,     0,     0,     0,     0,    42,     0,     0,   158,     0,
       0,     0,    49,     4,     0,     0,   147,   148,     0,   565,
       0,     0,     0,     0,     0,     0,     0,    42,     0,     0,
     158,   149,   150,   151,    49,     4,     0,   152,   147,   148,
       0,   749,     0,     0,     0,     0,     0,     0,     0,   153,
       0,   154,   155,   149,   150,   151,    28,    29,     0,   152,
       0,    31,   156,     0,     0,     0,     0,     0,     0,     0,
     157,   153,     0,   154,   155,     0,     0,     0,    28,    29,
       0,     0,     0,    31,   156,     0,     0,     0,     0,     0,
       0,     0,   157,     0,     0,     0,     0,     0,     0,     0,
       0,    42,     0,     0,   158,     0,     0,     0,    49,     4,
       0,     0,   147,   148,     0,   792,     0,     0,     0,     0,
       0,     0,     0,    42,     0,     0,   158,   149,   150,   151,
      49,     4,     0,   152,   147,   148,     0,   872,     0,     0,
       0,     0,     0,     0,     0,   153,     0,   154,   155,   149,
     150,   151,    28,    29,     0,   152,     0,    31,   156,     0,
       0,     0,     0,     0,     0,     0,   157,   153,     0,   154,
     155,     0,     0,     0,    28,    29,     0,    39,    40,    31,
     156,     0,     0,     0,     0,     0,     0,     0,   157,     0,
       0,     0,     0,     0,     0,     0,     0,    42,     0,     0,
     158,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,   158,     0,     0,     0,    49
};

static const yytype_int16 yycheck[] =
{
       2,     3,    59,   215,   254,   134,    10,   178,   435,   556,
     171,   182,   141,   652,    16,    17,    18,   141,   189,   569,
     191,   192,   604,   427,   428,    27,   238,   141,   455,    16,
      49,   254,   452,   453,   699,   206,   254,    35,   703,    41,
     704,    43,    44,   131,    35,   133,    48,   373,    17,    35,
      53,   134,    59,     0,   134,   127,   647,     0,    60,    35,
     126,   141,     0,   389,   594,    35,   132,   134,    70,    35,
      72,   329,    74,    75,   141,    77,   127,    79,   126,    81,
      35,    83,   133,    85,   132,    87,   133,    89,   679,    91,
     134,    93,    94,   140,    21,    35,    98,   141,     0,   101,
      35,    35,   104,    35,   106,   266,    35,   126,    35,   270,
     117,   118,   119,   371,    21,    62,    35,    35,    35,    62,
     122,    35,   124,   126,    62,    27,    33,    34,    35,   127,
      35,    35,   136,   131,    36,   133,   127,    35,   124,   125,
     131,    35,   133,   130,    35,   727,    48,   133,    55,    56,
      57,    58,   699,    60,    61,   124,   125,   133,    60,    35,
      62,   711,   164,   165,    35,   131,    35,   133,    70,   171,
      72,    22,    74,    75,   838,    77,   841,    79,   133,    81,
     844,    83,     0,    85,   111,    87,   825,    89,    35,    91,
     126,    93,    94,   133,   130,   127,    98,    35,   133,   101,
     127,   133,   104,    35,   106,   124,   125,   124,   125,    27,
     124,   125,   632,   215,   133,   133,   133,   219,   925,   133,
     122,   625,   124,   127,   131,    53,   133,   131,   133,   133,
      48,   133,    93,   131,   236,   237,   238,   131,   140,   133,
     165,    17,   133,   950,    62,   247,   107,    73,    74,   126,
      70,   253,   254,   130,    21,   962,     0,   133,   127,   124,
     125,   263,   133,    21,   266,   127,    33,    34,   270,   799,
     126,     0,    21,    21,   130,    93,   133,   124,   125,   126,
     127,   124,   125,    27,    33,    34,    35,    35,    55,    56,
      57,    58,    36,    60,    61,   133,   122,    35,   126,    35,
     131,   133,    37,    38,    48,   732,    55,    56,    57,    58,
     127,    60,    61,   215,    35,   133,    60,    53,    62,   569,
     124,   125,   140,   452,   453,   126,    70,   128,    72,   133,
      74,    75,    35,    77,    21,    79,   238,    81,   263,    83,
       0,    85,   126,    87,   128,    89,   569,    91,    35,    93,
      94,   569,   127,   111,    98,    35,   886,   101,   124,   125,
     104,   127,   106,   111,   131,   126,   133,   133,   270,   452,
     453,   373,   452,   453,   131,   126,    36,   128,   122,   126,
     124,   128,   131,    52,   133,   452,   453,   389,    70,   133,
     126,   127,   124,   125,   126,   925,   140,   124,   125,   126,
      60,   126,    62,   128,   575,   124,   125,   126,   452,   453,
      70,   126,    72,   128,    74,    75,   127,    77,   948,    79,
     950,    81,   127,    83,   111,    85,   115,    87,     0,    89,
     128,    91,   962,    93,    94,   127,   128,   649,    98,   130,
     126,   101,   128,   126,   104,   128,   106,    35,    59,   124,
     125,   126,   270,    65,    66,    27,    14,    15,    16,    35,
      35,   711,   122,   127,   124,   124,   125,   126,   680,    35,
      35,   373,    35,   133,    35,    35,    48,   123,   124,   125,
     140,    39,    40,    55,    35,   127,   488,   389,   711,    47,
      62,   127,   126,   711,    17,   497,   134,   126,    70,   126,
       0,   133,   126,   632,   115,   116,   117,   118,   119,   638,
      68,   124,   125,   126,   638,    87,    21,    89,    59,    91,
      21,    93,    17,   126,   638,   130,   270,    27,   530,   128,
     532,   126,   128,   435,   124,   125,   126,    21,   595,   133,
     126,    48,   125,   128,   102,   126,   104,   126,    48,   632,
     122,   712,   632,   455,   556,   128,   126,   100,   638,    93,
     128,   133,    62,    67,   126,   632,     5,   569,   140,     8,
       9,   638,    12,    13,    14,    15,    16,   579,   643,    62,
     679,    93,    93,    93,    23,    24,    25,    93,   632,   238,
      29,    93,   235,    93,   638,    93,    93,    93,   680,    39,
      40,    93,    41,    93,    43,    44,    93,    47,    93,    48,
      49,    93,    93,   534,    53,    54,   237,   435,   622,   948,
     704,   428,   452,    62,   628,   966,   579,   796,    68,   373,
     638,    -1,   638,   133,   244,    -1,    -1,   455,    -1,   641,
     140,   643,    -1,    -1,    -1,   389,    -1,   649,    -1,    -1,
      -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,
      -1,   100,   102,    -1,   104,    -1,    -1,   724,    -1,   798,
      -1,    -1,     0,    -1,   798,    -1,    -1,   579,   680,    -1,
      -1,   683,   254,    -1,   798,   687,   688,     0,    -1,    -1,
     129,   435,    -1,    -1,    -1,   697,    -1,   699,   270,    27,
      -1,   703,   704,    -1,    -1,    -1,    -1,   709,    -1,   711,
     712,   455,    -1,   373,    27,   798,    -1,    -1,   620,    -1,
      48,    -1,    -1,    12,    13,    14,    15,    16,    -1,   389,
      -1,   798,   736,    -1,    62,    48,   740,    -1,   867,    -1,
      -1,    -1,    -1,   867,    -1,    -1,    -1,    -1,    -1,    62,
      39,    40,    -1,   867,   798,    -1,    -1,    -1,    47,    -1,
      -1,   579,    -1,    -1,    -1,    93,    -1,    -1,    -1,    -1,
     270,    -1,    -1,   775,   776,   435,    -1,    -1,   680,    68,
      93,    -1,    -1,    -1,   867,    -1,    -1,   867,    -1,    50,
      51,   693,    53,    -1,    -1,   455,    -1,    -1,    59,    -1,
     867,    -1,   620,    -1,    -1,   133,    -1,    -1,    -1,    -1,
      -1,    -1,   140,   102,    -1,   104,   718,   819,    -1,    -1,
     133,    -1,    -1,    -1,    -1,   829,    -1,   140,   957,    -1,
     732,   833,   734,   957,    -1,   579,   838,    -1,    -1,   841,
     964,   743,   844,   957,    -1,    -1,    -1,    -1,    -1,    -1,
     964,   112,   113,   114,   115,   116,   117,   118,   119,    21,
     762,    -1,    -1,   435,    -1,    -1,    -1,    21,    -1,    -1,
      -1,    33,    34,    35,   957,   693,   620,   957,   880,    33,
      34,   964,    -1,   455,   964,    -1,    -1,   889,    -1,    -1,
     892,    -1,    -1,    55,    56,    57,    58,   964,    60,    61,
     718,    55,    56,    57,    58,    -1,    60,    61,    -1,   811,
      -1,   813,    -1,   957,   732,   919,   734,    -1,    -1,    -1,
     964,    14,    15,    16,    -1,   743,    -1,    -1,    -1,    -1,
      -1,   933,    -1,    -1,    -1,   435,    -1,    14,    15,    16,
      -1,    -1,   270,    -1,   762,    38,    39,    40,    -1,   693,
      -1,    -1,    -1,    -1,    47,   455,    -1,   270,    -1,   861,
     620,   863,    39,    40,    -1,   127,   868,   869,    -1,   131,
      47,   133,    -1,    -1,   718,    68,    -1,   131,     0,   133,
     982,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   732,    -1,
     734,    68,    -1,   811,    -1,   813,    -1,   569,   900,   743,
     902,    -1,    -1,    -1,    -1,    27,    -1,   579,    -1,   102,
      -1,   104,    -1,    -1,   916,    -1,    -1,    -1,   762,    -1,
      -1,   923,   924,    -1,    -1,   102,    48,   104,    -1,    -1,
      -1,    -1,    -1,   693,    -1,    -1,   620,    -1,    -1,    -1,
      62,    -1,    -1,   861,    -1,   863,    -1,    -1,   620,    -1,
     868,   869,    -1,   955,    -1,    -1,   958,    -1,   718,    -1,
      -1,    -1,    -1,    -1,   966,    -1,    -1,   811,    -1,   813,
      -1,    93,   732,    -1,   734,    -1,    75,    -1,    -1,   579,
      -1,    -1,   900,   743,   902,    84,    85,    86,    87,    88,
      89,    90,    91,    -1,    -1,    -1,    -1,    -1,   916,    -1,
      -1,    -1,   762,    -1,    -1,   923,   924,   435,    -1,   693,
      -1,   133,    -1,    -1,    -1,    -1,    -1,   861,   140,   863,
     620,   693,   435,    -1,   868,   869,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,   718,    -1,    -1,   955,     0,   711,
     958,    -1,   455,    -1,    -1,    -1,   718,    -1,   966,    -1,
     734,   811,    -1,   813,    -1,    -1,   900,    -1,   902,   743,
     732,    -1,   734,    -1,    -1,    27,    -1,    -1,    -1,    -1,
      -1,   743,   916,    -1,    -1,    -1,    -1,    -1,   762,   923,
     924,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
     762,    -1,    -1,   693,    -1,    -1,    -1,    -1,    -1,    -1,
      62,   861,    -1,   863,    -1,    -1,    -1,    -1,   868,   869,
      -1,   955,    -1,    -1,   958,    -1,    -1,    -1,   718,    -1,
      -1,    -1,   966,    -1,   475,    -1,    -1,   811,    -1,   813,
      -1,    93,   732,    21,   734,    -1,    -1,    -1,     0,   811,
     900,   813,   902,   743,    -1,    33,    34,    35,   270,    -1,
      -1,   579,    -1,    -1,    -1,    -1,   916,    -1,    -1,    -1,
      -1,    -1,   762,   923,   924,    27,   579,    55,    56,    57,
      58,   133,    60,    61,    -1,    -1,    -1,   861,   140,   863,
      -1,    -1,    -1,   534,   868,   869,    48,    -1,   539,   861,
      -1,   863,   620,    -1,   545,   955,   868,   869,   958,    -1,
      62,    14,    15,    16,    -1,    -1,   966,   620,    -1,    -1,
       0,   811,    -1,   813,    -1,   566,   900,    -1,   902,    -1,
      -1,    14,    15,    16,    37,    38,    39,    40,   900,    -1,
     902,    93,   916,    -1,    47,    -1,    -1,    27,    -1,   923,
     924,    -1,    -1,   131,   916,   133,    39,    40,    -1,    -1,
      -1,   923,   924,    -1,    47,    68,    -1,    -1,    48,    -1,
      -1,   861,    -1,   863,    -1,   693,    -1,    -1,   868,   869,
      -1,   133,    62,    -1,   958,    68,    -1,    -1,   140,    -1,
     693,    -1,    -1,   955,    -1,    -1,   958,    -1,    -1,   102,
     718,   104,    -1,    -1,   966,    -1,    -1,    -1,     0,    -1,
     900,    -1,   902,    93,   732,   718,   734,    -1,   270,   102,
      -1,   104,    -1,   435,    -1,   743,   916,    -1,    -1,   732,
      -1,   734,    -1,   923,   924,    27,    -1,    -1,    -1,    -1,
     743,    -1,    -1,   455,   762,    -1,    -1,    -1,    -1,    21,
      -1,    -1,    -1,   133,    -1,    -1,    48,    -1,    -1,   762,
     140,    33,    34,    35,    -1,   955,    -1,    -1,   958,    -1,
      62,    -1,    -1,    -1,    -1,    -1,   966,    -1,    -1,    -1,
      -1,    -1,    -1,    55,    56,    57,    58,    -1,    60,    61,
      14,    15,    16,   811,    -1,   813,    -1,    -1,    -1,    -1,
      -1,    93,    -1,    -1,    -1,    -1,    -1,    -1,   811,    -1,
     813,   752,    -1,    37,    38,    39,    40,    -1,   270,    -1,
      -1,    -1,    -1,    47,    -1,    -1,   767,    -1,    -1,   770,
      -1,    -1,    -1,    -1,    21,    -1,   777,    -1,    -1,   111,
     781,   133,    -1,   861,    68,   863,    33,    34,   140,    -1,
     868,   869,   793,    -1,    -1,   127,    -1,    -1,   861,   131,
     863,   133,    -1,    -1,     0,   868,   869,   579,    55,    56,
      57,    58,    -1,    60,    61,    -1,    -1,     0,   102,    -1,
     104,    -1,   900,   435,   902,    -1,    -1,    -1,    -1,    -1,
     270,    27,    -1,   834,   835,    -1,   837,   900,   916,   902,
      -1,    -1,   843,   455,    27,   923,   924,    -1,   620,    -1,
      -1,    -1,    48,   916,    -1,    -1,    -1,    -1,    -1,    -1,
     923,   924,    -1,    -1,    -1,    48,    62,    -1,    14,    15,
      16,    -1,   873,    -1,    -1,    -1,    -1,   955,    -1,    62,
     958,    -1,    -1,   884,   131,    -1,   133,    -1,   966,   890,
      -1,    -1,   955,    39,    40,   958,    -1,    -1,    25,    26,
      -1,    47,    -1,   966,    -1,    -1,    -1,    -1,    35,    14,
      15,    16,    -1,    -1,    -1,    -1,    -1,    -1,   270,    -1,
      -1,   693,    68,   435,    -1,    -1,     0,    -1,    -1,    -1,
     931,    -1,    -1,   934,    39,    40,    -1,   133,    -1,    -1,
      -1,    -1,    47,   455,   140,    -1,   718,    -1,    -1,    -1,
     133,   952,    -1,    27,    -1,    -1,   102,   140,   104,    -1,
     732,    -1,   734,    68,    -1,    92,    -1,   579,    -1,    96,
      -1,   743,    -1,   100,    48,    -1,    -1,    -1,   105,    -1,
      -1,   108,   109,   110,   111,    -1,    -1,    -1,    62,    -1,
     762,   118,    -1,    -1,   121,   435,   123,   102,    -1,   104,
      -1,    -1,   129,    -1,    14,    15,    16,     5,   620,    -1,
       8,     9,    -1,    -1,    -1,   455,   143,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    25,    -1,    39,
      40,    29,    -1,    -1,    -1,    -1,    -1,    47,    -1,   811,
      -1,   813,    -1,    41,    -1,    43,    44,    -1,    -1,    -1,
      48,    49,    -1,    -1,    -1,    53,    54,    -1,    68,   133,
      -1,    -1,    -1,    -1,    62,    -1,   140,   579,    -1,    -1,
      -1,    -1,    -1,    -1,   270,    73,    74,    -1,     0,    -1,
      -1,   693,    -1,   435,    -1,    -1,    -1,   270,    -1,   861,
      -1,   863,   102,    -1,   104,    93,   868,   869,    96,    -1,
      -1,    -1,   100,   455,    -1,    27,   718,    -1,   620,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     732,    -1,   734,    21,   122,    -1,    48,    -1,   900,   127,
     902,   743,    -1,    -1,    -1,    33,    34,    35,    -1,   579,
      62,    -1,    -1,     0,   916,    -1,    -1,    -1,    -1,    -1,
     762,   923,   924,    21,    -1,    -1,    -1,    55,    56,    57,
      58,    -1,    60,    61,    -1,    33,    34,    35,    -1,    -1,
      27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     620,   693,    -1,   955,    -1,    -1,   958,    55,    56,    57,
      58,    48,    60,    61,   966,    -1,   270,    -1,    -1,   811,
      -1,   813,    -1,    -1,    -1,    62,   718,    -1,    -1,    -1,
      -1,   133,    -1,   111,    -1,    -1,    -1,    -1,   140,     0,
     732,    -1,   734,    -1,    -1,    -1,    -1,   579,    -1,   127,
      -1,   743,    -1,   131,    -1,   133,    -1,    -1,    -1,   435,
      -1,    -1,    -1,    -1,    -1,    -1,    27,    -1,    -1,   861,
     762,   863,   435,   693,    -1,    -1,   868,   869,    -1,   455,
      -1,    -1,    -1,   131,    -1,   133,    -1,    48,   620,    -1,
      -1,    -1,   455,    -1,    -1,    -1,   133,    -1,   718,    -1,
      -1,    62,    -1,   140,    21,    -1,    -1,    -1,   900,    -1,
     902,    -1,   732,    -1,   734,    21,    33,    34,    -1,   811,
      -1,   813,    -1,   743,   916,    -1,    -1,    33,    34,    35,
      -1,   923,   924,    -1,    -1,    -1,    -1,    -1,    55,    56,
      57,    58,   762,    60,    61,    -1,    -1,    -1,    -1,    55,
      56,    57,    58,    -1,    60,    61,    -1,    -1,     0,    -1,
      -1,   693,    -1,   955,    -1,    -1,   958,    -1,   270,   861,
      -1,   863,   133,    -1,   966,    -1,   868,   869,    -1,   140,
      -1,   435,    -1,    -1,    -1,    27,   718,    -1,    -1,    -1,
      -1,   811,    -1,   813,   111,    -1,    -1,    -1,    -1,    -1,
     732,   455,   734,   579,    -1,   111,    48,    -1,   900,    -1,
     902,   743,    -1,    -1,   131,    -1,   579,    -1,    -1,    -1,
      62,   127,    -1,    -1,   916,   131,    -1,   133,    -1,    -1,
     762,   923,   924,   270,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   861,    -1,   863,   620,    -1,    -1,    -1,   868,   869,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   620,    -1,    -1,
      -1,    -1,    -1,   955,    -1,    -1,   958,    -1,    -1,    -1,
      -1,    21,    -1,    -1,   966,    -1,    -1,    -1,    -1,   811,
     900,   813,   902,    33,    34,    35,    -1,    21,    -1,    -1,
      -1,   133,    -1,    -1,    -1,    -1,   916,    -1,   140,    33,
      34,    35,    -1,   923,   924,    55,    56,    57,    58,   270,
      60,    61,    -1,    -1,     0,    -1,    -1,   693,    -1,    -1,
      -1,    55,    56,    57,    58,   579,    60,    61,    -1,   861,
     693,   863,    -1,   435,    -1,   955,   868,   869,   958,    -1,
      -1,    27,   718,    -1,    -1,    -1,   966,    -1,    -1,    -1,
      -1,    -1,    -1,   455,    -1,   718,   732,    -1,   734,    -1,
      -1,   111,    48,    -1,    -1,    -1,   620,   743,   900,   732,
     902,   734,    -1,    -1,    -1,    -1,    62,   127,    -1,    -1,
     743,   131,    -1,   133,   916,    -1,   762,    -1,    -1,    -1,
      -1,   923,   924,    -1,     0,    -1,    -1,   131,   435,   762,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    -1,   455,    -1,
      -1,    27,    -1,   955,    -1,    -1,   958,    -1,   270,    -1,
      -1,    21,    -1,    -1,   966,   811,    -1,   813,    -1,   693,
      -1,    -1,    48,    33,    34,    35,    -1,   133,   811,    -1,
     813,    -1,    -1,    -1,   140,    -1,    62,    -1,   133,    -1,
      -1,    -1,    -1,    -1,   718,    55,    56,    57,    58,    -1,
      60,    61,    -1,    -1,   435,    -1,    -1,   579,   732,    -1,
     734,    -1,    -1,    -1,    -1,   861,    -1,   863,    -1,   743,
      -1,    -1,   868,   869,   455,    -1,    -1,    -1,   861,    -1,
     863,    -1,    -1,    -1,    -1,   868,   869,    -1,   762,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   620,    -1,
      -1,    -1,    -1,    -1,   900,    -1,   902,   133,    -1,    -1,
      -1,    -1,    21,    -1,   140,    -1,    -1,   900,    -1,   902,
     916,   131,   579,   133,    33,    34,    35,   923,   924,    -1,
      -1,    -1,    -1,   916,    -1,    -1,    -1,   811,    -1,   813,
     923,   924,    -1,    14,    15,    16,    55,    56,    57,    58,
      -1,    60,    61,    -1,    -1,    -1,    -1,    -1,    -1,   955,
      -1,     0,   958,   620,   270,    -1,    37,    38,    39,    40,
     966,   693,   955,   435,    -1,   958,    47,    -1,    -1,    -1,
      -1,     5,    -1,   966,     8,     9,    -1,   861,    -1,   863,
      -1,    -1,    -1,   455,   868,   869,   718,    68,   579,    23,
      24,    25,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,
     732,    -1,   734,    -1,    -1,    -1,    -1,    41,    -1,    43,
      44,   743,   131,    62,    48,    49,   900,    -1,   902,    53,
      54,   102,    -1,   104,    -1,     0,   693,    -1,    62,   620,
     762,    -1,   916,    -1,   270,    -1,    -1,    -1,    -1,   923,
     924,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   718,    27,    -1,    -1,    -1,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    -1,   732,   100,   734,    -1,    -1,
       0,   955,    -1,    48,   958,    -1,   743,    -1,    -1,   811,
      -1,   813,   966,    -1,   133,    -1,    -1,    62,    -1,   123,
      -1,   140,    -1,    -1,    -1,   762,    -1,    27,    -1,    -1,
      -1,    -1,   693,    -1,    -1,    -1,    -1,   579,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,   435,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   718,    -1,   861,
      -1,   863,    62,    -1,    -1,    -1,   868,   869,    -1,   455,
      -1,   732,    21,   734,   811,    -1,   813,    -1,   620,    -1,
      -1,    -1,   743,    -1,    33,    34,    35,    -1,   133,    -1,
      -1,    -1,    -1,    -1,    -1,   140,    -1,    -1,   900,    -1,
     902,   762,    -1,    -1,    -1,    -1,    55,    56,    57,    58,
      -1,    60,    61,    -1,   916,    -1,    -1,    -1,    -1,    -1,
      -1,   923,   924,    -1,   861,    -1,   863,    -1,    -1,   435,
      -1,   868,   869,   133,    -1,    -1,    -1,    -1,    -1,    -1,
     140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
     811,   693,   813,   955,    -1,    -1,   958,    -1,    -1,    -1,
      -1,    -1,   111,   900,   966,   902,    -1,    -1,    -1,    -1,
      -1,     0,    -1,    -1,    -1,    -1,   718,    -1,   127,   916,
      -1,    -1,   131,    -1,   133,    -1,   923,   924,    -1,    -1,
     732,    -1,   734,   579,    -1,    -1,    -1,    -1,    -1,    -1,
     861,   743,   863,    -1,    -1,    -1,    -1,   868,   869,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   955,    -1,
     762,   958,    -1,    -1,    -1,   270,    -1,    -1,    -1,   966,
      -1,    -1,    -1,    62,   620,    -1,    -1,    -1,    -1,   900,
      -1,   902,    -1,    -1,    -1,    21,     0,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    -1,   916,     0,    33,    34,    -1,
      -1,    -1,   923,   924,    -1,    33,    34,    35,    -1,   811,
     270,   813,    -1,   579,    -1,    -1,    -1,    -1,    -1,    55,
      56,    57,    58,    -1,    60,    61,    -1,    55,    56,    57,
      58,    -1,    60,    61,   955,    -1,    -1,   958,    -1,    -1,
      -1,    -1,    -1,    -1,   133,   966,    -1,   693,    62,    -1,
      -1,   140,    -1,    -1,   620,    -1,   435,    -1,    62,   861,
      -1,   863,    -1,    -1,    -1,    -1,   868,   869,    -1,    -1,
      -1,    -1,   718,    -1,    -1,    -1,   455,    -1,    -1,    -1,
      -1,    -1,    -1,   111,    -1,    -1,   732,    -1,   734,    -1,
      -1,    -1,    -1,    -1,    -1,   131,    -1,   743,   900,   127,
     902,    -1,    -1,   131,    -1,   133,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   916,    -1,   762,    -1,    -1,   133,
      -1,   923,   924,    -1,    -1,    -1,   140,   693,    -1,   133,
     435,    -1,    -1,    -1,    -1,    -1,   140,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    -1,    -1,    -1,    -1,
     455,    -1,   718,   955,    -1,    -1,   958,    33,    34,    35,
      -1,    -1,    -1,    -1,   966,   811,   732,   813,   734,    -1,
       5,    -1,    -1,     8,     9,   435,    -1,   743,    -1,    55,
      56,    57,    58,    -1,    60,    61,    -1,    -1,    23,    24,
      25,    -1,    -1,    -1,    29,   455,   762,    -1,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    43,    44,
      33,    34,    35,    48,    49,   861,    -1,   863,    53,    54,
      -1,    -1,   868,   869,    -1,    -1,    -1,    62,    -1,    -1,
      -1,    -1,    55,    56,    57,    58,    -1,    60,    61,    -1,
      -1,   620,    -1,    -1,    -1,   811,    -1,   813,    -1,    -1,
      -1,   127,    -1,    -1,   900,   131,   902,   133,    93,    -1,
      -1,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
     916,    -1,    -1,    -1,   579,    -1,    -1,   923,   924,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    -1,   124,
     125,    -1,    -1,    -1,    -1,   861,    -1,   863,    -1,    33,
      34,    35,   868,   869,    -1,    -1,    -1,    -1,   131,   955,
     133,    -1,   958,    -1,   693,   620,    -1,    -1,    -1,   579,
     966,    55,    56,    57,    58,    -1,    60,    61,    -1,    -1,
      -1,    -1,    -1,    -1,   900,    -1,   902,    -1,    -1,   718,
      -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,
     916,    -1,    -1,   732,    -1,   734,    -1,   923,   924,    -1,
     620,    -1,    -1,    -1,   743,    -1,   455,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   762,    -1,    -1,    -1,    -1,   693,   955,
      -1,    -1,   958,    -1,    -1,    -1,    -1,   131,    -1,   133,
     966,    -1,    -1,    -1,     5,    -1,    -1,     8,     9,    -1,
      -1,    -1,    -1,   718,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   435,    23,    24,    25,    -1,    -1,   732,    29,   734,
      -1,   435,   811,   693,   813,    -1,    -1,    -1,   743,    -1,
      41,   455,    43,    44,    -1,    -1,    -1,    48,    49,    -1,
      -1,   455,    53,    54,    -1,    -1,    -1,   762,   718,    -1,
      -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   732,    -1,   734,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   861,   743,   863,    -1,    -1,    -1,    -1,   868,
     869,    -1,    93,    -1,    -1,    96,    -1,    -1,    72,   100,
      74,    75,   762,    77,    -1,    79,   811,    81,   813,    83,
      -1,    85,    -1,    87,    -1,    89,    -1,    91,    -1,    93,
      94,   900,   123,   902,    98,    -1,    -1,   101,    -1,    -1,
     104,   620,   106,    -1,    21,    -1,    -1,   916,     0,     1,
      -1,    -1,    -1,    -1,   923,   924,    33,    34,   122,    -1,
     124,   811,    -1,   813,    -1,    -1,   861,    -1,   863,    -1,
      -1,    -1,    -1,   868,   869,    -1,    -1,    -1,    55,    56,
      57,    58,    -1,    60,    61,    -1,   955,    -1,    -1,   958,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   966,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   900,    -1,   902,    -1,    -1,
      62,   861,    -1,   863,   693,    -1,   620,    -1,   868,   869,
      -1,   916,    -1,    -1,    -1,    -1,   620,    -1,   923,   924,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   718,
      -1,    -1,    -1,    -1,    -1,    21,    -1,    -1,    -1,    -1,
     900,    -1,   902,   732,   131,   734,   133,    33,    34,    -1,
     955,    -1,    -1,   958,   743,    -1,   916,   119,    -1,    -1,
      -1,   966,    -1,   923,   924,    -1,    -1,    -1,    -1,    55,
      56,    57,    58,   762,    60,    61,    -1,    -1,    26,   693,
      -1,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,   693,
      -1,    -1,    -1,    -1,    -1,   955,    -1,    -1,   958,    -1,
      -1,   163,    50,    51,   718,    53,   966,    -1,    -1,    -1,
      -1,    59,    -1,    -1,   718,    -1,    -1,    -1,   732,    -1,
     734,    -1,   811,    -1,   813,    -1,    -1,    -1,   732,   743,
     734,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   743,
      -1,    -1,    -1,    -1,    -1,   131,    -1,   133,   762,   211,
      -1,   213,    -1,    -1,    -1,    -1,   218,    -1,   762,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   861,    -1,   863,    -1,    -1,    -1,    -1,   868,
     869,    -1,    -1,   245,    -1,   247,    -1,    -1,   250,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   811,    -1,   813,
     262,    -1,    -1,    -1,    -1,    -1,    -1,   811,    -1,   813,
      -1,   900,    -1,   902,    -1,    -1,    -1,    -1,    -1,    10,
     282,    -1,    -1,    -1,    -1,    -1,    -1,   916,    -1,    20,
      21,    -1,    -1,    -1,   923,   924,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   861,    -1,   863,
      30,    31,    32,    -1,   868,   869,    -1,   861,    -1,   863,
      51,    -1,    -1,    -1,   868,   869,   955,    58,    59,   958,
      50,    51,    -1,    53,    -1,    -1,    -1,   966,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    -1,   900,    -1,   902,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   900,    -1,   902,    -1,
      -1,    -1,   916,    -1,    -1,    -1,    -1,    -1,    -1,   923,
     924,    -1,   916,    -1,    -1,    -1,    -1,    -1,    -1,   923,
     924,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,   955,    -1,    -1,   958,   136,    -1,    -1,   410,    -1,
      -1,   955,   966,    -1,   958,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   966,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     161,    -1,    -1,    -1,    -1,   166,   167,    -1,   169,   170,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   454,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   469,    -1,   471,
      -1,   473,    -1,    -1,   476,    -1,   478,    -1,    67,    68,
      69,    -1,    71,    -1,    73,    -1,    -1,    76,    -1,    78,
      -1,    80,    -1,    -1,    -1,    84,    -1,    86,    -1,    -1,
      -1,    -1,    -1,    92,    -1,    -1,    -1,    96,    -1,   240,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
      -1,    -1,    -1,   254,    -1,   527,    -1,   529,    -1,    -1,
     261,   120,   121,   264,   123,    -1,    -1,    -1,   540,    -1,
      -1,    -1,    -1,    -1,    -1,   547,    -1,    -1,   550,   551,
      -1,   553,    -1,    -1,    -1,   557,    -1,    -1,    -1,   290,
      -1,    -1,   564,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   580,    -1,
     582,    -1,    -1,   172,   173,   174,   175,   176,   177,   178,
     179,    -1,   181,   182,    -1,    -1,   185,    -1,   187,    -1,
     189,    -1,   191,   192,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   204,    -1,   206,   207,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   629,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,   228,
     229,   230,    -1,    -1,   233,   234,    -1,    -1,   379,    -1,
      -1,   382,   383,   384,   385,   386,   387,   388,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,   258,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   681,
       5,    -1,    -1,     8,     9,    -1,    -1,   689,    -1,   691,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   699,    23,    24,
      25,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    43,    44,
      -1,    -1,    -1,    48,    49,    -1,    -1,    -1,    53,    54,
      -1,    -1,    -1,   735,    -1,    -1,   738,    62,    -1,    -1,
     742,    -1,    -1,   745,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,
      -1,    96,   774,    -1,    -1,   100,    -1,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,    -1,    -1,   123,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   809,    -1,    -1,
     812,    -1,   543,   815,    -1,    -1,   818,    -1,   549,   821,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      26,    27,    -1,    -1,    30,    31,    32,    -1,   569,    -1,
     842,    -1,    -1,    -1,    -1,    -1,     5,   578,    -1,     8,
       9,    -1,    -1,    -1,    50,    51,    -1,    53,    -1,    -1,
      -1,   592,    -1,    59,    23,    24,    25,    -1,   870,    -1,
      29,    -1,    -1,   604,    -1,    -1,    -1,    -1,    -1,    -1,
     882,   883,    41,    -1,    43,    44,   888,    -1,    -1,    48,
      49,   622,    -1,    -1,    53,    54,   898,   628,    -1,    -1,
      -1,    -1,    -1,    62,    -1,   636,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   645,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,    -1,    -1,
     126,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,   941,
      -1,   100,   944,    -1,    -1,    -1,    -1,    -1,   107,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     711,    -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   727,    -1,    -1,   730,
      -1,    -1,   591,    -1,    -1,   736,    -1,    -1,    -1,   740,
      -1,    -1,    -1,    -1,    -1,   746,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   758,    -1,    -1,
      -1,    -1,   763,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    18,    19,    20,    -1,    22,    23,    24,    25,    -1,
      -1,    -1,    29,    -1,    -1,   796,    33,    34,    -1,    36,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    -1,    -1,
      -1,   822,    -1,   824,    -1,    62,    63,    64,   829,    -1,
      -1,    -1,    69,    -1,    71,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,    -1,   103,    -1,   105,   106,
      -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   122,    -1,   124,   125,    -1,
     127,    -1,   129,    -1,   131,    -1,    -1,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    18,    19,    20,   919,    22,
      23,    24,    25,    -1,    -1,    -1,    29,    -1,    -1,    -1,
      33,    34,    -1,    36,    -1,    -1,    -1,    -1,    41,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,
      63,    64,    -1,    -1,    -1,    -1,    69,    -1,    71,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,    -1,
     103,    -1,   105,   106,    -1,    -1,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,
      -1,   124,   125,    -1,   127,     1,   129,    -1,   131,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    -1,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    -1,
      46,    47,    48,    49,    -1,    -1,    52,    53,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    73,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,    -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,   124,   125,
      -1,   127,     1,   129,   130,   131,     5,     6,     7,     8,
       9,    10,    11,    -1,    -1,    14,    15,    16,    17,    18,
      19,    20,    -1,    22,    23,    24,    25,    -1,    -1,    -1,
      29,    -1,    -1,    -1,    33,    34,    -1,    36,    -1,    -1,
      39,    40,    41,    42,    43,    44,    -1,    46,    47,    48,
      49,    -1,    -1,    52,    53,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    62,    63,    64,    65,    66,    67,    68,
      69,    -1,    71,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,    -1,    -1,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   122,    -1,   124,   125,    -1,   127,     1,
     129,    -1,   131,     5,     6,     7,     8,     9,    10,    11,
      -1,    -1,    14,    15,    16,    17,    18,    19,    20,    -1,
      22,    23,    24,    25,    -1,    -1,    -1,    29,    -1,    -1,
      -1,    33,    34,    -1,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    -1,    46,    47,    48,    49,    -1,    -1,
      52,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      62,    63,    64,    -1,    -1,    -1,    68,    69,    -1,    71,
      72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,    -1,    -1,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     122,    -1,   124,   125,    -1,   127,     1,   129,    -1,   131,
       5,     6,     7,     8,     9,    10,    11,    -1,    -1,    14,
      15,    16,    17,    18,    19,    20,    -1,    22,    23,    24,
      25,    -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,
      -1,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      -1,    46,    47,    48,    49,    -1,    -1,    52,    53,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    63,    64,
      -1,    -1,    -1,    68,    69,    -1,    71,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,    -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,   124,
     125,    -1,   127,     1,   129,    -1,   131,     5,     6,     7,
       8,     9,    10,    11,    -1,    -1,    14,    15,    16,    17,
      18,    19,    20,    -1,    22,    23,    24,    25,    -1,    -1,
      -1,    29,    -1,    -1,    -1,    33,    34,    -1,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    -1,    46,    47,
      48,    49,    -1,    -1,    52,    53,    54,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    62,    63,    64,    -1,    -1,    -1,
      68,    69,    -1,    71,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,    -1,
      -1,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   122,    -1,   124,   125,    -1,   127,
       1,   129,    -1,   131,     5,     6,     7,     8,     9,    10,
      11,    -1,    -1,    14,    15,    16,    17,    18,    19,    20,
      -1,    22,    23,    24,    25,    -1,    -1,    -1,    29,    -1,
      -1,    -1,    33,    34,    -1,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    -1,    46,    47,    48,    49,    -1,
      -1,    52,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    62,    63,    64,    -1,    -1,    -1,    68,    69,    -1,
      71,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,    -1,    -1,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   122,    -1,   124,   125,    -1,   127,     1,   129,    -1,
     131,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    -1,    22,    23,
      24,    25,    -1,    -1,    -1,    29,    -1,    -1,    -1,    33,
      34,    -1,    36,    -1,    -1,    39,    40,    41,    42,    43,
      44,    -1,    46,    47,    48,    49,    -1,    -1,    52,    53,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    63,
      64,    -1,    -1,    -1,    68,    69,    -1,    71,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,    -1,    -1,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,
     124,   125,    -1,   127,     1,   129,    -1,   131,     5,     6,
       7,     8,     9,    10,    11,    -1,    -1,    14,    15,    16,
      17,    18,    19,    20,    -1,    22,    23,    24,    25,    -1,
      -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    -1,    46,
      47,    48,    49,    -1,    -1,    52,    53,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    63,    64,    -1,    -1,
      -1,    68,    69,    -1,    71,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
      -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   122,    -1,   124,   125,    -1,
     127,     1,   129,    -1,   131,     5,     6,     7,     8,     9,
      10,    11,    -1,    -1,    14,    15,    16,    17,    18,    19,
      20,    -1,    22,    23,    24,    25,    -1,    -1,    -1,    29,
      -1,    -1,    -1,    33,    34,    -1,    36,    -1,    38,    39,
      40,    41,    42,    43,    44,    -1,    46,    47,    48,    49,
      -1,    -1,    52,    53,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    62,    63,    64,    -1,    -1,    -1,    68,    69,
      -1,    71,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,    -1,    -1,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   122,    -1,   124,   125,    -1,   127,     1,   129,
      -1,   131,     5,     6,     7,     8,     9,    10,    11,    -1,
      -1,    14,    15,    16,    17,    18,    19,    20,    -1,    22,
      23,    24,    25,    -1,    -1,    -1,    29,    -1,    -1,    -1,
      33,    34,    -1,    36,    -1,    -1,    39,    40,    41,    42,
      43,    44,    -1,    46,    47,    48,    49,    -1,    -1,    52,
      53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    71,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,    -1,    -1,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,
      -1,   124,   125,    -1,   127,     1,   129,    -1,   131,     5,
       6,     7,     8,     9,    10,    11,    -1,    -1,    14,    15,
      16,    17,    18,    19,    20,    -1,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    -1,    -1,    39,    40,    41,    42,    43,    44,    -1,
      46,    47,    48,    49,    -1,    -1,    52,    53,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    62,    63,    64,    -1,
      -1,    -1,    68,    69,    -1,    71,    72,    73,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,    -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,   124,   125,
      -1,   127,     1,   129,    -1,   131,     5,     6,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    16,    17,    18,
      19,    20,    -1,    22,    23,    24,    25,    -1,    -1,    -1,
      29,    -1,    -1,    -1,    33,    34,    -1,    36,    -1,    -1,
      -1,    -1,    41,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    62,    63,    64,    -1,    -1,    -1,    -1,
      69,    -1,    71,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,    -1,   103,    -1,   105,   106,    -1,    -1,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   122,    -1,   124,   125,    -1,   127,    -1,
     129,   130,   131,     5,    -1,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,
      22,    23,    24,    25,    -1,    -1,    28,    29,    -1,    -1,
      -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      -1,    43,    44,    -1,    -1,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
      -1,    73,    74,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    93,    -1,    -1,    96,    97,    -1,    -1,   100,    -1,
      -1,    -1,    -1,   105,   106,   107,   108,    -1,    -1,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,    -1,
     122,   123,    -1,    -1,    -1,   127,   127,   129,     5,   131,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      17,    18,    19,    20,    -1,    22,    23,    24,    25,    -1,
      -1,    28,    29,    -1,    -1,    -1,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    43,    44,    -1,    -1,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    71,    -1,    73,    74,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    93,    -1,    -1,    96,
      97,    -1,    -1,   100,    -1,    -1,    -1,    -1,   105,   106,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,    -1,   122,   123,    -1,    -1,   126,
     127,   127,   129,     5,   131,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,
      22,    23,    24,    25,    -1,    -1,    28,    29,    -1,    -1,
      -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      -1,    43,    44,    -1,    -1,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
      -1,    73,    74,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    93,    -1,    -1,    96,    97,    -1,    -1,   100,    -1,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,    -1,
     122,   123,    -1,    -1,    -1,   127,   127,   129,     5,   131,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      17,    18,    19,    20,    -1,    22,    23,    24,    25,    -1,
      -1,    28,    29,    -1,    -1,    -1,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    43,    44,    -1,    -1,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    71,    -1,    73,    74,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    93,    -1,    -1,    96,
      97,    -1,    -1,   100,    -1,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,    -1,   122,   123,    -1,    -1,    -1,
     127,   127,   129,     5,   131,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,
      22,    23,    24,    25,    -1,    -1,    28,    29,    -1,    -1,
      -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      -1,    43,    44,    -1,    -1,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
      -1,    73,    74,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    93,    -1,    -1,    96,    97,    -1,    -1,   100,    -1,
      -1,    -1,    -1,   105,   106,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,    -1,
     122,   123,    -1,    -1,    -1,   127,    -1,   129,     5,   131,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      17,    18,    19,    20,    -1,    22,    23,    24,    25,    -1,
      -1,    28,    29,    -1,    -1,    -1,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    43,    44,    -1,    -1,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    71,    -1,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,
      97,    -1,    -1,   100,    -1,    -1,    -1,    -1,   105,   106,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,    -1,   122,   123,    -1,    -1,    -1,
     127,    -1,   129,     5,   131,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,
      22,    23,    24,    25,    -1,    -1,    28,    29,    -1,    -1,
      -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      -1,    43,    44,    -1,    -1,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
      -1,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    93,    -1,    -1,    96,    97,    -1,    -1,   100,    -1,
      -1,    -1,    -1,   105,   106,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,    -1,
     122,   123,    -1,    -1,    -1,   127,    -1,   129,     5,   131,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      17,    18,    19,    20,    -1,    22,    23,    24,    25,    -1,
      -1,    28,    29,    -1,    -1,    -1,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    43,    44,    -1,    -1,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    71,    -1,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,
      97,    -1,    -1,   100,    -1,    -1,    -1,    -1,   105,   106,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,    -1,   122,   123,    -1,    -1,    -1,
     127,    -1,   129,     5,   131,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,
      22,    23,    24,    25,    -1,    -1,    -1,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      -1,    43,    44,    -1,    -1,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
      -1,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    93,    -1,    -1,    96,    97,    -1,     5,   100,     7,
       8,     9,    10,   105,   106,    -1,    -1,    -1,    -1,    17,
      18,    19,    20,    -1,    22,    23,    24,    25,    -1,    -1,
     122,    29,    -1,    -1,    -1,   127,    -1,   129,    -1,   131,
      -1,    -1,    -1,    41,    -1,    43,    44,    -1,    -1,    -1,
      48,    49,    -1,    26,    27,    53,    54,    30,    31,    32,
      -1,    -1,    -1,    -1,    62,     5,    -1,    -1,     8,     9,
      -1,    -1,    -1,    71,    -1,    73,    74,    50,    51,    -1,
      53,    -1,    -1,    23,    24,    25,    59,    -1,    -1,    29,
      -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    97,
      -1,    41,   100,    43,    44,    -1,    -1,    -1,    48,    49,
      -1,    -1,    -1,    53,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    62,    -1,   122,    -1,    -1,    -1,    -1,   127,
       5,   129,    -1,     8,     9,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    23,    24,
      25,   124,   125,    93,    29,    -1,    96,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    41,   107,    43,    44,
      -1,    -1,    -1,    48,    49,    -1,    -1,    -1,    53,    54,
      -1,    -1,    -1,   123,    -1,    -1,    -1,    62,     5,    -1,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,    -1,
      -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    -1,    41,   100,    43,    44,    -1,    -1,
      21,    48,    49,    -1,    -1,    -1,    53,    54,    -1,    -1,
      -1,    -1,    33,    34,    35,    62,    -1,    -1,   123,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    55,    56,    57,    58,    -1,    60,
      61,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    -1,    -1,   100,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   124,   125,   126,    -1,    -1,    -1,    -1,
     131,    -1,   133,    55,    56,    57,    58,    -1,    60,    61,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      -1,    -1,    -1,    -1,    -1,    26,    27,    -1,    21,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      33,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      51,    -1,    53,    -1,    -1,   127,    -1,    -1,    59,   131,
      -1,   133,    55,    56,    57,    58,    21,    60,    61,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    34,
      35,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    -1,
      55,    56,    57,    58,    -1,    60,    61,   108,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    -1,   131,    -1,
     133,    -1,    26,    27,    -1,    21,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    34,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    50,    51,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    59,   131,    -1,   133,    55,
      56,    57,    58,    21,    60,    61,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    33,    34,    35,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    -1,    55,    56,    57,
      58,    -1,    60,    61,   108,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    -1,   131,    -1,   133,    -1,    26,
      27,    -1,    21,    30,    31,    32,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    50,    51,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    59,   131,    -1,   133,    55,    56,    57,    58,
      -1,    60,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    -1,    -1,    -1,    -1,     5,    -1,    -1,
       8,     9,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,    23,    24,    25,    -1,     5,
      -1,    29,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   131,    41,   133,    43,    44,    23,    24,    25,
      48,    49,    -1,    29,    -1,    53,    54,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    62,    41,    -1,    43,    44,    -1,
      -1,    -1,    48,    49,    -1,    -1,    -1,    53,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      -1,    -1,   100,     5,    -1,    -1,     8,     9,    -1,   107,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,
      96,    23,    24,    25,   100,     5,    -1,    29,     8,     9,
      -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      -1,    43,    44,    23,    24,    25,    48,    49,    -1,    29,
      -1,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      62,    41,    -1,    43,    44,    -1,    -1,    -1,    48,    49,
      -1,    -1,    -1,    53,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    -1,    -1,   100,     5,
      -1,    -1,     8,     9,    -1,   107,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    93,    -1,    -1,    96,    23,    24,    25,
     100,     5,    -1,    29,     8,     9,    -1,   107,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    -1,    43,    44,    23,
      24,    25,    48,    49,    -1,    29,    -1,    53,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    62,    41,    -1,    43,
      44,    -1,    -1,    -1,    48,    49,    -1,    73,    74,    53,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    -1,    -1,   100
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    17,    18,    19,    20,    22,    23,    24,    25,    29,
      33,    34,    36,    41,    42,    43,    44,    46,    48,    49,
      52,    53,    54,    62,    63,    64,    69,    71,    72,    73,
      74,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   103,   105,   106,   109,   122,   124,   125,   127,   129,
     131,   136,   137,   138,   139,   150,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   197,   198,   199,   200,   201,
     202,   204,   209,   211,   212,   213,   214,   220,   222,   223,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   240,
     245,   251,   252,   253,   254,   255,   267,   271,   274,   290,
     298,   299,   311,   314,   316,   326,   329,   332,   344,   349,
     353,   355,   362,   374,   378,   381,   381,     8,     9,    23,
      24,    25,    29,    41,    43,    44,    54,    62,    96,   166,
     166,   152,   159,   160,   256,   257,   127,    28,    52,   115,
     116,   123,   167,   168,   169,   171,   173,   176,   178,   180,
     182,   184,   187,   189,   191,   193,   197,   198,   199,   202,
     203,   209,   213,   215,   216,   220,   222,   223,   224,   226,
     233,   234,   235,   236,   245,   250,   251,   253,    35,    35,
     166,   164,   166,   165,   166,   153,   216,   216,   315,   272,
     159,   159,   166,   189,   191,   197,   198,   199,   202,   209,
     213,   219,   220,   251,   253,    35,   268,   259,   155,   363,
     151,   159,   189,   191,   193,    22,   166,   166,   129,   166,
     280,    17,   158,   241,    70,   375,   166,   197,   251,   340,
     341,   354,   216,   258,   127,   251,   123,   250,   107,   108,
     123,   186,   206,   207,   208,   216,   218,   239,   166,   193,
     210,     0,     1,   138,   139,   150,   274,   381,    35,   127,
     133,   237,   238,   237,   237,   166,   193,   196,   251,    35,
     237,   196,    35,   237,   196,   196,    35,   237,   196,    35,
     237,   196,    35,   237,   196,    35,   196,    35,   237,   196,
     237,   196,   251,    35,   196,   251,    35,   196,   251,   127,
     159,   237,    20,    22,   166,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   188,   190,   192,   196,   245,   251,   252,   253,   254,
     196,   237,   159,   237,    35,   196,    35,   159,   237,   196,
      35,   127,   237,   131,   196,    35,   159,   237,   196,    21,
      33,    34,    55,    56,    57,    58,    60,    61,   111,   131,
     221,   159,   159,   159,   159,   159,   246,   381,    35,   237,
      35,   159,   237,   196,   251,    35,   159,   237,   196,   159,
      12,    13,    14,    15,    16,    39,    40,    47,    68,   102,
     104,   291,   292,   294,   295,   296,   297,   302,   304,   309,
     310,     1,   138,   150,   161,   162,   274,   381,    14,    15,
      16,    37,    38,    39,   291,   293,   294,   295,   296,   297,
     312,   313,   317,   322,   250,   162,    14,    16,   102,   291,
     292,   293,   294,   295,   296,   350,   351,   352,   159,   140,
     142,   141,   143,   216,   381,   166,   260,   263,   260,   216,
     216,   216,   216,   166,   201,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,   147,   148,   147,   147,   147,   147,    26,    27,
      30,    31,    32,    50,    51,    53,    59,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   126,   300,   147,   157,
     126,   381,   126,   381,   189,   261,   262,   263,   381,   166,
     273,    21,   111,   336,   194,   166,   269,   273,   261,    70,
     368,   216,   375,    17,   381,   127,   276,   166,   381,   145,
     147,   127,   381,   115,   128,   107,   166,   242,   243,   126,
     166,   203,   207,   215,   216,   251,   376,   377,    53,   126,
     216,   381,   260,   166,   128,   130,   166,   189,   197,   199,
     201,   209,   126,   130,   108,   126,   130,   381,   205,   208,
     216,   107,   216,   217,   126,   132,   205,   205,   210,   216,
     216,   216,   216,   216,   216,   216,   216,   210,   216,   244,
     248,   381,   305,   309,    13,   302,   309,   161,   318,   323,
      37,   312,   322,    38,   312,   381,    37,    38,   356,   359,
     381,   127,   381,   127,   381,   133,   145,   265,   266,   126,
     381,   381,   126,   166,   166,   216,   216,   216,   216,   216,
     216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   216,   216,   381,   381,   166,   166,   145,   265,
     126,   154,   145,   126,   381,   216,   145,    53,   126,   270,
     381,   156,   216,   381,   381,   123,   381,   275,   166,   279,
     280,   282,   381,   277,   281,    17,   381,   145,   134,   126,
     377,   126,   123,   216,   342,   343,   340,   381,   379,   381,
     128,   216,   218,   208,   126,   128,   217,   133,   128,   128,
     126,   247,   162,   163,   303,   250,   307,   309,   250,   381,
     320,   312,   325,   327,   216,   360,    37,   351,   359,   107,
     144,   149,   166,   144,   216,   264,   146,   148,   126,   132,
     263,   206,   301,    21,   146,   262,   381,   166,   333,   166,
     166,   381,   381,   163,    17,    93,   123,   166,   284,   288,
     289,   283,   280,   282,   381,   166,   278,   282,   107,   285,
     288,   289,   107,   166,   377,   166,   126,   345,   163,   108,
     208,   217,   216,   130,    16,   130,   249,   163,   381,   250,
     381,   324,   250,   381,   163,   357,   381,   216,   128,   126,
     145,   128,    21,   216,   133,   126,   163,   216,   145,    48,
     145,   364,   381,   123,   166,   166,   145,   128,   126,   126,
     145,   126,   130,   128,   126,   145,   342,   100,   348,    14,
      16,   104,   291,   292,   293,   295,   296,   297,   380,   218,
     125,   306,   381,   319,   163,   381,   163,   328,   381,   361,
     358,   381,   107,   166,   381,   216,   216,   206,   250,    65,
      66,   371,   372,   373,   166,   145,   127,   145,   145,   123,
     166,   289,    93,   282,   381,   145,   107,   289,   346,   163,
     308,   163,   321,    14,    16,    40,   291,   292,   293,   294,
     295,   297,   330,   331,   163,   163,   381,   145,   128,    49,
     337,   166,   365,   381,   381,   127,   145,   218,   286,   287,
     381,   166,   145,   123,   166,   126,   381,   163,   163,   163,
     250,   334,    67,   369,   370,   163,   163,   286,   126,   128,
     127,   145,   166,   145,   107,   347,   381,   366,   381,   128,
     287,   286,   127,   145,   163,   338,   335,    14,    16,    68,
     291,   292,   293,   294,   296,   297,   367,   163,   128,   286,
      14,    16,    47,   292,   293,   294,   295,   296,   297,   339,
     338,   128,   166
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (pComp, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, pComp)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, pComp); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, PHB_COMP pComp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, pComp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    PHB_COMP pComp;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (pComp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, PHB_COMP pComp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, pComp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    PHB_COMP pComp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, pComp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, PHB_COMP pComp)
#else
static void
yy_reduce_print (yyvsp, yyrule, pComp)
    YYSTYPE *yyvsp;
    int yyrule;
    PHB_COMP pComp;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , pComp);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, pComp); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, PHB_COMP pComp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, pComp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    PHB_COMP pComp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (pComp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 17: /* "LITERAL" */

/* Line 1000 of yacc.c  */
#line 290 "../../../harbour.y"
	{ if( (yyvaluep->valChar).dealloc ) hb_xfree( (yyvaluep->valChar).string ); };

/* Line 1000 of yacc.c  */
#line 3840 "harboury.c"
	break;
      case 97: /* "CBSTART" */

/* Line 1000 of yacc.c  */
#line 289 "../../../harbour.y"
	{ if( (yyvaluep->asCodeblock).string )  hb_xfree( (yyvaluep->asCodeblock).string ); };

/* Line 1000 of yacc.c  */
#line 3849 "harboury.c"
	break;

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (PHB_COMP pComp);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (PHB_COMP pComp)
#else
int
yyparse (pComp)
    PHB_COMP pComp;
#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 9:

/* Line 1455 of yacc.c  */
#line 303 "../../../harbour.y"
    { yyclearin; yyerrok; ;}
    break;

  case 15:

/* Line 1455 of yacc.c  */
#line 309 "../../../harbour.y"
    { yyclearin; yyerrok; ;}
    break;

  case 16:

/* Line 1455 of yacc.c  */
#line 313 "../../../harbour.y"
    { HB_COMP_PARAM->currLine = ( int ) (yyvsp[(2) - (3)].valLong).lNumber;
                    HB_COMP_PARAM->pLex->fEol = HB_FALSE; ;}
    break;

  case 17:

/* Line 1455 of yacc.c  */
#line 316 "../../../harbour.y"
    { HB_COMP_PARAM->currModule = hb_compIdentifierNew( HB_COMP_PARAM, (yyvsp[(3) - (4)].valChar).string, (yyvsp[(3) - (4)].valChar).dealloc ? HB_IDENT_FREE : HB_IDENT_STATIC );
                    HB_COMP_PARAM->currLine = ( int ) (yyvsp[(2) - (4)].valLong).lNumber;
                    HB_COMP_PARAM->pLex->fEol = HB_FALSE;
                    (yyvsp[(3) - (4)].valChar).dealloc = HB_FALSE; ;}
    break;

  case 18:

/* Line 1455 of yacc.c  */
#line 321 "../../../harbour.y"
    { HB_COMP_PARAM->currModule = hb_compIdentifierNew( HB_COMP_PARAM, (yyvsp[(5) - (6)].valChar).string, (yyvsp[(5) - (6)].valChar).dealloc ? HB_IDENT_FREE : HB_IDENT_STATIC );
                    HB_COMP_PARAM->currLine = ( int ) (yyvsp[(2) - (6)].valLong).lNumber;
                    HB_COMP_PARAM->pLex->fEol = HB_FALSE;
                    if( (yyvsp[(3) - (6)].valChar).dealloc ) { hb_xfree( (yyvsp[(3) - (6)].valChar).string ); (yyvsp[(3) - (6)].valChar).dealloc = HB_FALSE; }
                    (yyvsp[(5) - (6)].valChar).dealloc = HB_FALSE; ;}
    break;

  case 19:

/* Line 1455 of yacc.c  */
#line 328 "../../../harbour.y"
    { hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[(2) - (2)].string), ( HB_SYMBOLSCOPE ) (yyvsp[(1) - (2)].iNumber), 0 ); ;}
    break;

  case 21:

/* Line 1455 of yacc.c  */
#line 329 "../../../harbour.y"
    { hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[(2) - (2)].string), ( HB_SYMBOLSCOPE ) (yyvsp[(1) - (2)].iNumber), HB_FUNF_PROCEDURE ); ;}
    break;

  case 23:

/* Line 1455 of yacc.c  */
#line 330 "../../../harbour.y"
    { hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[(2) - (2)].string), ( HB_SYMBOLSCOPE ) (yyvsp[(1) - (2)].iNumber), 0 ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_PARAMETER; ;}
    break;

  case 25:

/* Line 1455 of yacc.c  */
#line 331 "../../../harbour.y"
    { hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[(2) - (2)].string), ( HB_SYMBOLSCOPE ) (yyvsp[(1) - (2)].iNumber), HB_FUNF_PROCEDURE ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_PARAMETER;;}
    break;

  case 27:

/* Line 1455 of yacc.c  */
#line 334 "../../../harbour.y"
    { (yyval.iNumber) = 0; ;}
    break;

  case 28:

/* Line 1455 of yacc.c  */
#line 335 "../../../harbour.y"
    { HB_COMP_PARAM->functions.pLast->fVParams = HB_TRUE; (yyval.iNumber) = 0; ;}
    break;

  case 30:

/* Line 1455 of yacc.c  */
#line 337 "../../../harbour.y"
    { HB_COMP_PARAM->functions.pLast->fVParams = HB_TRUE; (yyval.iNumber) = (yyvsp[(1) - (3)].iNumber); ;}
    break;

  case 31:

/* Line 1455 of yacc.c  */
#line 340 "../../../harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, ' ', NULL ); ;}
    break;

  case 33:

/* Line 1455 of yacc.c  */
#line 344 "../../../harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, ' ', NULL ); ;}
    break;

  case 35:

/* Line 1455 of yacc.c  */
#line 348 "../../../harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'N', NULL ); ;}
    break;

  case 36:

/* Line 1455 of yacc.c  */
#line 349 "../../../harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'C', NULL ); ;}
    break;

  case 37:

/* Line 1455 of yacc.c  */
#line 350 "../../../harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'D', NULL ); ;}
    break;

  case 38:

/* Line 1455 of yacc.c  */
#line 351 "../../../harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'L', NULL ); ;}
    break;

  case 39:

/* Line 1455 of yacc.c  */
#line 352 "../../../harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'B', NULL ); ;}
    break;

  case 40:

/* Line 1455 of yacc.c  */
#line 353 "../../../harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'O', NULL ); ;}
    break;

  case 41:

/* Line 1455 of yacc.c  */
#line 354 "../../../harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'S', (yyvsp[(2) - (2)].string) );   ;}
    break;

  case 42:

/* Line 1455 of yacc.c  */
#line 355 "../../../harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, ' ', NULL ); ;}
    break;

  case 44:

/* Line 1455 of yacc.c  */
#line 359 "../../../harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'A', NULL ); ;}
    break;

  case 45:

/* Line 1455 of yacc.c  */
#line 360 "../../../harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'n', NULL ); ;}
    break;

  case 46:

/* Line 1455 of yacc.c  */
#line 361 "../../../harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'c', NULL ); ;}
    break;

  case 47:

/* Line 1455 of yacc.c  */
#line 362 "../../../harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'd', NULL ); ;}
    break;

  case 48:

/* Line 1455 of yacc.c  */
#line 363 "../../../harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'l', NULL ); ;}
    break;

  case 49:

/* Line 1455 of yacc.c  */
#line 364 "../../../harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'a', NULL ); ;}
    break;

  case 50:

/* Line 1455 of yacc.c  */
#line 365 "../../../harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'b', NULL ); ;}
    break;

  case 51:

/* Line 1455 of yacc.c  */
#line 366 "../../../harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'o', NULL ); ;}
    break;

  case 52:

/* Line 1455 of yacc.c  */
#line 367 "../../../harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 's', (yyvsp[(2) - (2)].string) );   ;}
    break;

  case 53:

/* Line 1455 of yacc.c  */
#line 370 "../../../harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), (yyvsp[(2) - (2)].asVarType) ); (yyval.iNumber) = 1; ;}
    break;

  case 54:

/* Line 1455 of yacc.c  */
#line 371 "../../../harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(3) - (4)].string), (yyvsp[(4) - (4)].asVarType) ); (yyval.iNumber)++; ;}
    break;

  case 56:

/* Line 1455 of yacc.c  */
#line 380 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; ;}
    break;

  case 57:

/* Line 1455 of yacc.c  */
#line 381 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; ;}
    break;

  case 58:

/* Line 1455 of yacc.c  */
#line 382 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; ;}
    break;

  case 59:

/* Line 1455 of yacc.c  */
#line 383 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; ;}
    break;

  case 60:

/* Line 1455 of yacc.c  */
#line 384 "../../../harbour.y"
    { if( HB_COMP_ISSUPPORTED( HB_COMPFLAG_XBASE ) )
                                         HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) );
                                      else
                                         HB_COMP_EXPR_FREE( HB_COMP_ERROR_SYNTAX( (yyvsp[(1) - (2)].asExpr) ) );
                                      HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN;
                                    ;}
    break;

  case 61:

/* Line 1455 of yacc.c  */
#line 390 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; ;}
    break;

  case 62:

/* Line 1455 of yacc.c  */
#line 391 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; ;}
    break;

  case 63:

/* Line 1455 of yacc.c  */
#line 392 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; ;}
    break;

  case 64:

/* Line 1455 of yacc.c  */
#line 393 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; ;}
    break;

  case 65:

/* Line 1455 of yacc.c  */
#line 394 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; ;}
    break;

  case 66:

/* Line 1455 of yacc.c  */
#line 395 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; ;}
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 396 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; ;}
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 397 "../../../harbour.y"
    { hb_compGenBreak( HB_COMP_PARAM ); hb_compGenPCode2( HB_P_DOSHORT, 0, HB_COMP_PARAM );
                                      HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_BREAK_CODE; ;}
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 399 "../../../harbour.y"
    { hb_compLinePushIfInside( HB_COMP_PARAM ); ;}
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 400 "../../../harbour.y"
    {
                                       hb_compGenBreak( HB_COMP_PARAM ); HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ) );
                                       hb_compGenPCode2( HB_P_DOSHORT, 1, HB_COMP_PARAM );
                                       HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_BREAK_CODE;
                                    ;}
    break;

  case 71:

/* Line 1455 of yacc.c  */
#line 405 "../../../harbour.y"
    { hb_compLoopExit( HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_BREAK_CODE; ;}
    break;

  case 72:

/* Line 1455 of yacc.c  */
#line 406 "../../../harbour.y"
    { hb_compLoopLoop( HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_BREAK_CODE; ;}
    break;

  case 73:

/* Line 1455 of yacc.c  */
#line 407 "../../../harbour.y"
    {
                        if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "RETURN", NULL );
                        }
                        hb_compGenPCode1( HB_P_ENDPROC, HB_COMP_PARAM );
                        if( ( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_PROCEDURE ) == 0 )
                        {
                           /* return from a function without a return value */
                           hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_NO_RETURN_VALUE, NULL, NULL );
                        }
                        HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE;
                     ;}
    break;

  case 74:

/* Line 1455 of yacc.c  */
#line 420 "../../../harbour.y"
    {  hb_compLinePushIfInside( HB_COMP_PARAM ); ;}
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 422 "../../../harbour.y"
    {
                        if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "RETURN", NULL );
                        }
                        /* TODO: check if return value agree with declared value */
                        HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ) );
                        if( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_EXTBLOCK )
                           /* extended clodeblock, use HB_P_ENDBLOCK to return value and stop execution */
                           hb_compGenPCode1( HB_P_ENDBLOCK, HB_COMP_PARAM );
                        else
                           hb_compGenPCode2( HB_P_RETVALUE, HB_P_ENDPROC, HB_COMP_PARAM );
                        if( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_PROCEDURE )
                        {
                           /* procedure returns a value */
                           hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_PROC_RETURN_VALUE, NULL, NULL );
                        }
                        HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE;
                     ;}
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 441 "../../../harbour.y"
    {  hb_compLinePushIfInside( HB_COMP_PARAM ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_PUBLIC; ;}
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 443 "../../../harbour.y"
    {  hb_compRTVariableGen( HB_COMP_PARAM, "__MVPUBLIC" );
                        HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE;
                        HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN;
                     ;}
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 447 "../../../harbour.y"
    {  hb_compLinePushIfInside( HB_COMP_PARAM ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_PRIVATE; ;}
    break;

  case 80:

/* Line 1455 of yacc.c  */
#line 449 "../../../harbour.y"
    {  hb_compRTVariableGen( HB_COMP_PARAM, "__MVPRIVATE" );
                        HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE;
                        HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN;
                     ;}
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 458 "../../../harbour.y"
    {
                  if( HB_COMP_PARAM->szAnnounce == NULL )
                     HB_COMP_PARAM->szAnnounce = (yyvsp[(2) - (2)].string);
                  else
                     hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_DUPL_ANNOUNCE, (yyvsp[(2) - (2)].string), NULL );
               ;}
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 467 "../../../harbour.y"
    {
               if( (yyvsp[(1) - (1)].valChar).dealloc )
               {
                  (yyvsp[(1) - (1)].valChar).string = ( char * ) HB_UNCONST( hb_compIdentifierNew( HB_COMP_PARAM, (yyvsp[(1) - (1)].valChar).string, HB_IDENT_FREE ) );
                  (yyvsp[(1) - (1)].valChar).dealloc = HB_FALSE;
               }
               hb_compModuleAdd( HB_COMP_PARAM, (yyvsp[(1) - (1)].valChar).string, HB_FALSE );
            ;}
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 475 "../../../harbour.y"
    {
               {
                  char szFileName[ HB_PATH_MAX ];
                  hb_strncat( hb_strncpy( szFileName, (yyvsp[(1) - (3)].valChar).string, sizeof( szFileName ) - 1 ), (yyvsp[(3) - (3)].valChar).string, sizeof( szFileName ) - 1 );
                  hb_compModuleAdd( HB_COMP_PARAM, hb_compIdentifierNew( HB_COMP_PARAM, szFileName, HB_IDENT_COPY ), HB_FALSE );
                  if( (yyvsp[(1) - (3)].valChar).dealloc )
                  {
                     hb_xfree( (yyvsp[(1) - (3)].valChar).string );
                     (yyvsp[(1) - (3)].valChar).dealloc = HB_FALSE;
                  }
                  if( (yyvsp[(3) - (3)].valChar).dealloc )
                  {
                     hb_xfree( (yyvsp[(3) - (3)].valChar).string );
                     (yyvsp[(3) - (3)].valChar).dealloc = HB_FALSE;
                  }
               }
            ;}
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 494 "../../../harbour.y"
    { hb_compLinePushIfInside( HB_COMP_PARAM ); ;}
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 497 "../../../harbour.y"
    { (yyval.lNumber) = 0; ;}
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 498 "../../../harbour.y"
    { (yyval.lNumber) = 1; ;}
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 499 "../../../harbour.y"
    { (yyval.lNumber) = 1; ;}
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 500 "../../../harbour.y"
    { (yyval.lNumber) = 0; ;}
    break;

  case 98:

/* Line 1455 of yacc.c  */
#line 502 "../../../harbour.y"
    { if( HB_COMP_PARAM->ilastLineErr && HB_COMP_PARAM->ilastLineErr == HB_COMP_PARAM->currLine )
                             {
                                yyclearin;
                             }
                             else
                             {
                                yyerrok;
                                HB_COMP_PARAM->ilastLineErr = HB_COMP_PARAM->currLine;
                             }
                             (yyval.lNumber) = 0;
                           ;}
    break;

  case 100:

/* Line 1455 of yacc.c  */
#line 516 "../../../harbour.y"
    { (yyval.lNumber) += (yyvsp[(2) - (2)].lNumber); ;}
    break;

  case 101:

/* Line 1455 of yacc.c  */
#line 519 "../../../harbour.y"
    { (yyval.lNumber) = 0; ;}
    break;

  case 103:

/* Line 1455 of yacc.c  */
#line 523 "../../../harbour.y"
    { hb_compExternAdd( HB_COMP_PARAM, (yyvsp[(1) - (1)].string), 0 ); ;}
    break;

  case 104:

/* Line 1455 of yacc.c  */
#line 524 "../../../harbour.y"
    { hb_compExternAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].string), 0 ); ;}
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 527 "../../../harbour.y"
    { hb_compExternAdd( HB_COMP_PARAM, (yyvsp[(1) - (1)].string), HB_FS_DEFERRED ); ;}
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 528 "../../../harbour.y"
    { hb_compExternAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].string), HB_FS_DEFERRED ); ;}
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 532 "../../../harbour.y"
    { (yyval.string) = "STEP"; ;}
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 533 "../../../harbour.y"
    { (yyval.string) = "TO"; ;}
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 534 "../../../harbour.y"
    { (yyval.string) = "LOOP"; ;}
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 535 "../../../harbour.y"
    { (yyval.string) = "EXIT"; ;}
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 536 "../../../harbour.y"
    { (yyval.string) = "IN"; ;}
    break;

  case 113:

/* Line 1455 of yacc.c  */
#line 537 "../../../harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 538 "../../../harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 539 "../../../harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 540 "../../../harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 541 "../../../harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 542 "../../../harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 543 "../../../harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 544 "../../../harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 545 "../../../harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 546 "../../../harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 547 "../../../harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 548 "../../../harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 553 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewDouble( (yyvsp[(1) - (1)].valDouble).dNumber, (yyvsp[(1) - (1)].valDouble).bWidth, (yyvsp[(1) - (1)].valDouble).bDec, HB_COMP_PARAM ); ;}
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 554 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewLong( (yyvsp[(1) - (1)].valLong).lNumber, HB_COMP_PARAM ); ;}
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 557 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewDate( ( long ) (yyvsp[(1) - (1)].valLong).lNumber, HB_COMP_PARAM ); ;}
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 560 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewTimeStamp( (yyvsp[(1) - (1)].valTimeStamp).date, (yyvsp[(1) - (1)].valTimeStamp).time, HB_COMP_PARAM ); ;}
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 563 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewLong( (yyvsp[(1) - (2)].valLong).lNumber, HB_COMP_PARAM ); ;}
    break;

  case 130:

/* Line 1455 of yacc.c  */
#line 564 "../../../harbour.y"
    { (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, hb_compExprNewDouble( (yyvsp[(1) - (2)].valDouble).dNumber, (yyvsp[(1) - (2)].valDouble).bWidth, (yyvsp[(1) - (2)].valDouble).bDec, HB_COMP_PARAM ) ); ;}
    break;

  case 131:

/* Line 1455 of yacc.c  */
#line 569 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewNil( HB_COMP_PARAM ); ;}
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 577 "../../../harbour.y"
    {
                                 (yyval.asExpr) = hb_compExprNewString( (yyvsp[(1) - (1)].valChar).string, (yyvsp[(1) - (1)].valChar).length, (yyvsp[(1) - (1)].valChar).dealloc, HB_COMP_PARAM );
                                 (yyvsp[(1) - (1)].valChar).dealloc = HB_FALSE;
                              ;}
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 593 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewLogical( HB_TRUE, HB_COMP_PARAM ); ;}
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 594 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewLogical( HB_FALSE, HB_COMP_PARAM ); ;}
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 602 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewSelf( HB_COMP_PARAM ); ;}
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 616 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewArray( (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 624 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 145:

/* Line 1455 of yacc.c  */
#line 630 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewHash( NULL, HB_COMP_PARAM ); ;}
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 631 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewHash( (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 148:

/* Line 1455 of yacc.c  */
#line 637 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprNewList( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 638 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprAddListExpr( (yyvsp[(1) - (5)].asExpr), (yyvsp[(3) - (5)].asExpr) ), (yyvsp[(5) - (5)].asExpr) ); ;}
    break;

  case 150:

/* Line 1455 of yacc.c  */
#line 643 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 151:

/* Line 1455 of yacc.c  */
#line 646 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewAlias( (yyvsp[(1) - (2)].string), HB_COMP_PARAM ); ;}
    break;

  case 152:

/* Line 1455 of yacc.c  */
#line 651 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewMacro( NULL, '&', (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 153:

/* Line 1455 of yacc.c  */
#line 652 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewMacro( NULL, 0, (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 660 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewMacro( (yyvsp[(2) - (2)].asExpr), 0, NULL, HB_COMP_PARAM ); ;}
    break;

  case 159:

/* Line 1455 of yacc.c  */
#line 674 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewAlias( "FIELD", HB_COMP_PARAM ); ;}
    break;

  case 160:

/* Line 1455 of yacc.c  */
#line 675 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(3) - (3)].asExpr); ;}
    break;

  case 161:

/* Line 1455 of yacc.c  */
#line 680 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 162:

/* Line 1455 of yacc.c  */
#line 681 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 163:

/* Line 1455 of yacc.c  */
#line 682 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 164:

/* Line 1455 of yacc.c  */
#line 683 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 165:

/* Line 1455 of yacc.c  */
#line 684 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 166:

/* Line 1455 of yacc.c  */
#line 685 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 167:

/* Line 1455 of yacc.c  */
#line 686 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 168:

/* Line 1455 of yacc.c  */
#line 687 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 169:

/* Line 1455 of yacc.c  */
#line 688 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 170:

/* Line 1455 of yacc.c  */
#line 689 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 171:

/* Line 1455 of yacc.c  */
#line 690 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 172:

/* Line 1455 of yacc.c  */
#line 691 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 173:

/* Line 1455 of yacc.c  */
#line 692 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 174:

/* Line 1455 of yacc.c  */
#line 693 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 696 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 700 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 701 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 702 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 703 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 704 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 705 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 706 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 707 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 708 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 709 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 710 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 711 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 712 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 713 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 714 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 192:

/* Line 1455 of yacc.c  */
#line 715 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 193:

/* Line 1455 of yacc.c  */
#line 716 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 194:

/* Line 1455 of yacc.c  */
#line 717 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 195:

/* Line 1455 of yacc.c  */
#line 718 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 196:

/* Line 1455 of yacc.c  */
#line 719 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 197:

/* Line 1455 of yacc.c  */
#line 728 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 198:

/* Line 1455 of yacc.c  */
#line 729 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 199:

/* Line 1455 of yacc.c  */
#line 730 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 200:

/* Line 1455 of yacc.c  */
#line 731 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 201:

/* Line 1455 of yacc.c  */
#line 732 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 202:

/* Line 1455 of yacc.c  */
#line 733 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 203:

/* Line 1455 of yacc.c  */
#line 738 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 204:

/* Line 1455 of yacc.c  */
#line 739 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 740 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 206:

/* Line 1455 of yacc.c  */
#line 741 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 207:

/* Line 1455 of yacc.c  */
#line 742 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 208:

/* Line 1455 of yacc.c  */
#line 743 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 209:

/* Line 1455 of yacc.c  */
#line 744 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 210:

/* Line 1455 of yacc.c  */
#line 745 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 746 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 747 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 213:

/* Line 1455 of yacc.c  */
#line 748 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 214:

/* Line 1455 of yacc.c  */
#line 749 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 215:

/* Line 1455 of yacc.c  */
#line 750 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 216:

/* Line 1455 of yacc.c  */
#line 751 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 752 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 218:

/* Line 1455 of yacc.c  */
#line 753 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 754 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 755 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 762 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewFunCall( hb_compExprNewFunName( (yyvsp[(1) - (4)].string), HB_COMP_PARAM ), (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 766 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewFunCall( (yyvsp[(1) - (4)].asExpr), (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 770 "../../../harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 227:

/* Line 1455 of yacc.c  */
#line 776 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 777 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 784 "../../../harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewVarRef( (yyvsp[(2) - (2)].string), HB_COMP_PARAM ) ); ;}
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 785 "../../../harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewRef( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ) ); ;}
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 786 "../../../harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewRef( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ) ); ;}
    break;

  case 234:

/* Line 1455 of yacc.c  */
#line 787 "../../../harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewRef( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ) ); ;}
    break;

  case 235:

/* Line 1455 of yacc.c  */
#line 788 "../../../harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr)->value.asList.reference = HB_TRUE; ;}
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 791 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgRef( HB_COMP_PARAM ); ;}
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 797 "../../../harbour.y"
    { (yyval.asExpr) = hb_compCheckMethod( HB_COMP_PARAM, hb_compExprNewMethodObject( (yyvsp[(3) - (3)].asExpr), (yyvsp[(1) - (3)].asExpr) ) ); ;}
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 798 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewMethodObject( (yyvsp[(3) - (3)].asExpr), (yyvsp[(1) - (3)].asExpr) ); ;}
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 799 "../../../harbour.y"
    {  if( HB_COMP_PARAM->functions.pLast->wWithObjectCnt == 0 )
                                                hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_WITHOBJECT, NULL, NULL );
                                             (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr);
                                          ;}
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 805 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewSend( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 806 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewMacroSend( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 809 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[(3) - (4)].string), HB_COMP_PARAM ); ;}
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 817 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewMethodCall( (yyvsp[(1) - (4)].asExpr), (yyvsp[(3) - (4)].asExpr) ); ;}
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 837 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 847 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 850 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 270:

/* Line 1455 of yacc.c  */
#line 852 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 866 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 867 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 871 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgRef( HB_COMP_PARAM ); ;}
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 875 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewEmpty( HB_COMP_PARAM ); ;}
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 879 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 885 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprListStrip( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 317:

/* Line 1455 of yacc.c  */
#line 918 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewPostInc( (yyvsp[(0) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 318:

/* Line 1455 of yacc.c  */
#line 919 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewPostDec( (yyvsp[(0) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 319:

/* Line 1455 of yacc.c  */
#line 922 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 320:

/* Line 1455 of yacc.c  */
#line 925 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewPreInc( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 926 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewPreDec( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 322:

/* Line 1455 of yacc.c  */
#line 929 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewNot( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 323:

/* Line 1455 of yacc.c  */
#line 930 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewNegate( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 931 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 934 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 937 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 327:

/* Line 1455 of yacc.c  */
#line 940 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 328:

/* Line 1455 of yacc.c  */
#line 943 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 329:

/* Line 1455 of yacc.c  */
#line 946 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 330:

/* Line 1455 of yacc.c  */
#line 949 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 331:

/* Line 1455 of yacc.c  */
#line 952 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 332:

/* Line 1455 of yacc.c  */
#line 955 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 339:

/* Line 1455 of yacc.c  */
#line 966 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlus( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 340:

/* Line 1455 of yacc.c  */
#line 967 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinus( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 341:

/* Line 1455 of yacc.c  */
#line 968 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMult( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 342:

/* Line 1455 of yacc.c  */
#line 969 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDiv( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 343:

/* Line 1455 of yacc.c  */
#line 970 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMod( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 344:

/* Line 1455 of yacc.c  */
#line 971 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPower( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 345:

/* Line 1455 of yacc.c  */
#line 974 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewAnd( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 346:

/* Line 1455 of yacc.c  */
#line 975 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewOr( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 347:

/* Line 1455 of yacc.c  */
#line 978 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewEQ( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 348:

/* Line 1455 of yacc.c  */
#line 979 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewLT( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 349:

/* Line 1455 of yacc.c  */
#line 980 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewGT( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 350:

/* Line 1455 of yacc.c  */
#line 981 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewLE( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 351:

/* Line 1455 of yacc.c  */
#line 982 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewGE( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 352:

/* Line 1455 of yacc.c  */
#line 983 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewNE( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 353:

/* Line 1455 of yacc.c  */
#line 984 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewNE( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 354:

/* Line 1455 of yacc.c  */
#line 985 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewIN( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 355:

/* Line 1455 of yacc.c  */
#line 986 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewIN( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 356:

/* Line 1455 of yacc.c  */
#line 987 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewEqual( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 358:

/* Line 1455 of yacc.c  */
#line 996 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[(0) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 359:

/* Line 1455 of yacc.c  */
#line 997 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 360:

/* Line 1455 of yacc.c  */
#line 998 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[(1) - (4)].asExpr), (yyvsp[(4) - (4)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 361:

/* Line 1455 of yacc.c  */
#line 1001 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 362:

/* Line 1455 of yacc.c  */
#line 1002 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 363:

/* Line 1455 of yacc.c  */
#line 1005 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewCodeBlock( (yyvsp[(1) - (1)].asCodeblock).string, (yyvsp[(1) - (1)].asCodeblock).length, (yyvsp[(1) - (1)].asCodeblock).flags, HB_COMP_PARAM ); (yyvsp[(1) - (1)].asCodeblock).string = NULL; ;}
    break;

  case 364:

/* Line 1455 of yacc.c  */
#line 1006 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (4)].asExpr); ;}
    break;

  case 365:

/* Line 1455 of yacc.c  */
#line 1011 "../../../harbour.y"
    { (yyval.asExpr) = NULL; ;}
    break;

  case 366:

/* Line 1455 of yacc.c  */
#line 1012 "../../../harbour.y"
    { (yyval.asExpr) = NULL; (yyvsp[(0) - (1)].asExpr)->value.asCodeblock.flags |= HB_BLOCK_VPARAMS; ;}
    break;

  case 367:

/* Line 1455 of yacc.c  */
#line 1013 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr);   ;}
    break;

  case 368:

/* Line 1455 of yacc.c  */
#line 1014 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr);   (yyvsp[(0) - (3)].asExpr)->value.asCodeblock.flags |= HB_BLOCK_VPARAMS; ;}
    break;

  case 369:

/* Line 1455 of yacc.c  */
#line 1017 "../../../harbour.y"
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_LOCAL; (yyval.asExpr) = hb_compExprCBVarAdd( (yyvsp[(0) - (2)].asExpr), (yyvsp[(1) - (2)].string), (yyvsp[(2) - (2)].asVarType)->cVarType, HB_COMP_PARAM ); ;}
    break;

  case 370:

/* Line 1455 of yacc.c  */
#line 1018 "../../../harbour.y"
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_LOCAL; (yyval.asExpr) = hb_compExprCBVarAdd( (yyvsp[(0) - (4)].asExpr), (yyvsp[(3) - (4)].string), (yyvsp[(4) - (4)].asVarType)->cVarType, HB_COMP_PARAM ); ;}
    break;

  case 371:

/* Line 1455 of yacc.c  */
#line 1021 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprAddCodeblockExpr( (yyvsp[(-1) - (1)].asExpr), (yyvsp[(1) - (1)].asExpr) ); ;}
    break;

  case 372:

/* Line 1455 of yacc.c  */
#line 1022 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprAddCodeblockExpr( (yyvsp[(-1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 373:

/* Line 1455 of yacc.c  */
#line 1026 "../../../harbour.y"
    { (yyval.bTrue) = HB_COMP_PARAM->functions.pLast->bBlock;
                HB_COMP_PARAM->functions.pLast->bBlock = HB_TRUE; ;}
    break;

  case 374:

/* Line 1455 of yacc.c  */
#line 1029 "../../../harbour.y"
    { HB_COMP_PARAM->functions.pLast->bBlock = (yyvsp[(2) - (3)].bTrue); ;}
    break;

  case 376:

/* Line 1455 of yacc.c  */
#line 1032 "../../../harbour.y"
    {  /* 3 */
               PHB_CBVAR pVar;
               (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
               (yyvsp[(2) - (2)].sNumber) = HB_COMP_PARAM->lastLine;
               hb_compCodeBlockStart( HB_COMP_PARAM, 0 );
               HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_EXTBLOCK;
               HB_COMP_PARAM->functions.pLast->fVParams =
                  ( (yyvsp[(1) - (2)].asExpr)->value.asCodeblock.flags & HB_BLOCK_VPARAMS ) != 0;

               (yyvsp[(1) - (2)].asExpr)->value.asCodeblock.flags |= HB_BLOCK_EXT;
               if( (yyvsp[(1) - (2)].asExpr)->value.asCodeblock.string )
               {
                  hb_xfree( (yyvsp[(1) - (2)].asExpr)->value.asCodeblock.string );
                  (yyvsp[(1) - (2)].asExpr)->value.asCodeblock.string = NULL;
                  (yyvsp[(1) - (2)].asExpr)->nLength = 0;
               }

               HB_COMP_PARAM->iVarScope = HB_VSCOMP_PARAMETER;
               pVar = (yyvsp[(1) - (2)].asExpr)->value.asCodeblock.pLocals;
               while( pVar )
               {
                  hb_compVariableAdd( HB_COMP_PARAM, pVar->szName, hb_compVarTypeNew( HB_COMP_PARAM, pVar->bType, NULL ) );
                  pVar =pVar->pNext;
               }
            ;}
    break;

  case 377:

/* Line 1455 of yacc.c  */
#line 1058 "../../../harbour.y"
    {  /* 6 */
               /* protection against nested function/procedure inside extended block */
               if( HB_COMP_PARAM->iErrorCount == 0 ||
                   HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_EXTBLOCK )
               {
                  hb_compCodeBlockEnd( HB_COMP_PARAM );
                  (yyval.asExpr) = hb_compExprSetCodeblockBody( (yyvsp[(1) - (5)].asExpr),
                          HB_COMP_PARAM->functions.pLast->pCode + (yyvsp[(3) - (5)].sNumber),
                          HB_COMP_PARAM->functions.pLast->nPCodePos - (yyvsp[(3) - (5)].sNumber) );
                  HB_COMP_PARAM->functions.pLast->nPCodePos = (yyvsp[(3) - (5)].sNumber);
                  HB_COMP_PARAM->lastLine = (yyvsp[(2) - (5)].sNumber);
               }
            ;}
    break;

  case 379:

/* Line 1455 of yacc.c  */
#line 1074 "../../../harbour.y"
    { hb_compErrUnclosed( HB_COMP_PARAM, "{||...}" ); ;}
    break;

  case 380:

/* Line 1455 of yacc.c  */
#line 1078 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 381:

/* Line 1455 of yacc.c  */
#line 1079 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 382:

/* Line 1455 of yacc.c  */
#line 1081 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (3)].asExpr); ;}
    break;

  case 384:

/* Line 1455 of yacc.c  */
#line 1094 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewIIF( hb_compExprAddListExpr( hb_compExprAddListExpr( hb_compExprNewList( (yyvsp[(3) - (8)].asExpr), HB_COMP_PARAM ), (yyvsp[(5) - (8)].asExpr) ), (yyvsp[(7) - (8)].asExpr) ) ); ;}
    break;

  case 386:

/* Line 1455 of yacc.c  */
#line 1100 "../../../harbour.y"
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_LOCAL; hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 388:

/* Line 1455 of yacc.c  */
#line 1102 "../../../harbour.y"
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_STATIC; hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 390:

/* Line 1455 of yacc.c  */
#line 1104 "../../../harbour.y"
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_TH_STATIC; hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 392:

/* Line 1455 of yacc.c  */
#line 1106 "../../../harbour.y"
    { if( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_USES_LOCAL_PARAMS )
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_PARAMETERS_NOT_ALLOWED, NULL, NULL );
                        else
                        {
                           HB_COMP_PARAM->functions.pLast->wParamNum = 0;
                           HB_COMP_PARAM->iVarScope = ( HB_VSCOMP_PRIVATE | HB_VSCOMP_PARAMETER );
                        }
                      ;}
    break;

  case 393:

/* Line 1455 of yacc.c  */
#line 1113 "../../../harbour.y"
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; ;}
    break;

  case 394:

/* Line 1455 of yacc.c  */
#line 1116 "../../../harbour.y"
    { (yyval.iNumber) = 1; ;}
    break;

  case 395:

/* Line 1455 of yacc.c  */
#line 1117 "../../../harbour.y"
    { (yyval.iNumber)++; ;}
    break;

  case 396:

/* Line 1455 of yacc.c  */
#line 1120 "../../../harbour.y"
    { (yyval.iNumber) = 1; ;}
    break;

  case 397:

/* Line 1455 of yacc.c  */
#line 1121 "../../../harbour.y"
    { (yyval.iNumber)++; ;}
    break;

  case 399:

/* Line 1455 of yacc.c  */
#line 1131 "../../../harbour.y"
    { hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( NULL, (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_FALSE ); ;}
    break;

  case 400:

/* Line 1455 of yacc.c  */
#line 1133 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(4) - (4)].asExpr), HB_COMP_PARAM ) );
                 hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( NULL, (yyvsp[(1) - (4)].asExpr), HB_COMP_PARAM ), HB_TRUE );
               ;}
    break;

  case 401:

/* Line 1455 of yacc.c  */
#line 1137 "../../../harbour.y"
    {
                  HB_COMP_EXPR_FREE( hb_compArrayDimPush( (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ) );
                  hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( NULL, (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), HB_TRUE );
               ;}
    break;

  case 402:

/* Line 1455 of yacc.c  */
#line 1144 "../../../harbour.y"
    {
                  hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), (yyvsp[(2) - (2)].asVarType) );
                  if( HB_COMP_PARAM->iVarScope & HB_VSCOMP_STATIC )
                  {
                     hb_compStaticDefStart( HB_COMP_PARAM );   /* switch to statics pcode buffer */
                     hb_compStaticDefEnd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string) );
                  }
                  else if( HB_COMP_PARAM->iVarScope == HB_VSCOMP_PUBLIC || HB_COMP_PARAM->iVarScope == HB_VSCOMP_PRIVATE )
                  {
                     hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( (yyvsp[(1) - (2)].string), NULL, HB_COMP_PARAM ), HB_FALSE );
                  }
                  else if( HB_COMP_PARAM->iVarScope == HB_VSCOMP_LOCAL &&
                           ( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_EXTBLOCK ) )
                  {
                     HB_COMP_EXPR_FREE( hb_compExprGenPush( hb_compExprNewNil( HB_COMP_PARAM ), HB_COMP_PARAM ) );
                  }
               ;}
    break;

  case 403:

/* Line 1455 of yacc.c  */
#line 1161 "../../../harbour.y"
    { (yyval.iNumber) = HB_COMP_PARAM->iVarScope;
                                hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), (yyvsp[(2) - (2)].asVarType) );
                              ;}
    break;

  case 404:

/* Line 1455 of yacc.c  */
#line 1165 "../../../harbour.y"
    {
                  HB_COMP_PARAM->iVarScope = (yyvsp[(3) - (5)].iNumber);
                  if( HB_COMP_PARAM->iVarScope & HB_VSCOMP_STATIC )
                  {
                     hb_compStaticDefStart( HB_COMP_PARAM );   /* switch to statics pcode buffer */
                     HB_COMP_EXPR_FREE( hb_compExprGenStatement( hb_compExprAssignStatic( hb_compExprNewVar( (yyvsp[(1) - (5)].string), HB_COMP_PARAM ), (yyvsp[(5) - (5)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ) );
                     hb_compStaticDefEnd( HB_COMP_PARAM, (yyvsp[(1) - (5)].string) );
                  }
                  else if( HB_COMP_PARAM->iVarScope == HB_VSCOMP_PUBLIC || HB_COMP_PARAM->iVarScope == HB_VSCOMP_PRIVATE )
                  {
                     HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(5) - (5)].asExpr), HB_COMP_PARAM ) );
                     hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( (yyvsp[(1) - (5)].string), NULL, HB_COMP_PARAM ), HB_TRUE );
                  }
                  else if( HB_COMP_PARAM->iVarScope == HB_VSCOMP_LOCAL &&
                           ( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_EXTBLOCK ) )
                  {
                     HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(5) - (5)].asExpr), HB_COMP_PARAM ) );
                  }
                  else
                  {
                     HB_COMP_EXPR_FREE( hb_compExprGenStatement( hb_compExprAssign( hb_compExprNewVar( (yyvsp[(1) - (5)].string), HB_COMP_PARAM ), (yyvsp[(5) - (5)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ) );
                  }
                  HB_COMP_PARAM->iVarScope = (yyvsp[(3) - (5)].iNumber);
               ;}
    break;

  case 405:

/* Line 1455 of yacc.c  */
#line 1190 "../../../harbour.y"
    { hb_compVariableDim( (yyvsp[(1) - (3)].string), (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 407:

/* Line 1455 of yacc.c  */
#line 1199 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 408:

/* Line 1455 of yacc.c  */
#line 1200 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 409:

/* Line 1455 of yacc.c  */
#line 1201 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (4)].asExpr), (yyvsp[(4) - (4)].asExpr) ); ;}
    break;

  case 410:

/* Line 1455 of yacc.c  */
#line 1204 "../../../harbour.y"
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_FIELD; ;}
    break;

  case 411:

/* Line 1455 of yacc.c  */
#line 1206 "../../../harbour.y"
    {
               if( (yyvsp[(4) - (5)].string) ) hb_compFieldSetAlias( HB_COMP_PARAM, (yyvsp[(4) - (5)].string), (yyvsp[(3) - (5)].iNumber) );
             ;}
    break;

  case 412:

/* Line 1455 of yacc.c  */
#line 1211 "../../../harbour.y"
    { (yyval.iNumber) = hb_compFieldsCount( HB_COMP_PARAM ); hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), (yyvsp[(2) - (2)].asVarType) ); ;}
    break;

  case 413:

/* Line 1455 of yacc.c  */
#line 1212 "../../../harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(3) - (4)].string), (yyvsp[(4) - (4)].asVarType) ); ;}
    break;

  case 414:

/* Line 1455 of yacc.c  */
#line 1215 "../../../harbour.y"
    { (yyval.string) = NULL; ;}
    break;

  case 415:

/* Line 1455 of yacc.c  */
#line 1216 "../../../harbour.y"
    { (yyval.string) = (yyvsp[(2) - (2)].string); ;}
    break;

  case 416:

/* Line 1455 of yacc.c  */
#line 1219 "../../../harbour.y"
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_MEMVAR; ;}
    break;

  case 418:

/* Line 1455 of yacc.c  */
#line 1222 "../../../harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), (yyvsp[(2) - (2)].asVarType) ); ;}
    break;

  case 419:

/* Line 1455 of yacc.c  */
#line 1223 "../../../harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(3) - (4)].string), (yyvsp[(4) - (4)].asVarType) ); ;}
    break;

  case 420:

/* Line 1455 of yacc.c  */
#line 1226 "../../../harbour.y"
    { hb_compDeclaredAdd( HB_COMP_PARAM, (yyvsp[(2) - (3)].string) ); HB_COMP_PARAM->szDeclaredFun = (yyvsp[(2) - (3)].string); ;}
    break;

  case 421:

/* Line 1455 of yacc.c  */
#line 1227 "../../../harbour.y"
    {
               if( HB_COMP_PARAM->pLastDeclared )
               {
                 HB_COMP_PARAM->pLastDeclared->cType = (yyvsp[(7) - (8)].asVarType)->cVarType;

                 if( HB_TOUPPER( (yyvsp[(7) - (8)].asVarType)->cVarType ) == 'S' )
                 {
                   HB_COMP_PARAM->pLastDeclared->pClass = hb_compClassFind( HB_COMP_PARAM, (yyvsp[(7) - (8)].asVarType)->szFromClass );
                   if( ! HB_COMP_PARAM->pLastDeclared->pClass )
                   {
                     hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, (yyvsp[(7) - (8)].asVarType)->szFromClass, HB_COMP_PARAM->pLastDeclared->szName );
                     HB_COMP_PARAM->pLastDeclared->cType = ( HB_ISUPPER( ( HB_UCHAR ) (yyvsp[(7) - (8)].asVarType)->cVarType ) ? 'O' : 'o' );
                   }
                 }
               }
               HB_COMP_PARAM->szDeclaredFun = NULL;
               HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE;
             ;}
    break;

  case 422:

/* Line 1455 of yacc.c  */
#line 1245 "../../../harbour.y"
    { HB_COMP_PARAM->pLastClass = hb_compClassAdd( HB_COMP_PARAM, (yyvsp[(2) - (2)].string), NULL ); ;}
    break;

  case 423:

/* Line 1455 of yacc.c  */
#line 1245 "../../../harbour.y"
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; ;}
    break;

  case 424:

/* Line 1455 of yacc.c  */
#line 1246 "../../../harbour.y"
    { HB_COMP_PARAM->pLastClass = hb_compClassAdd( HB_COMP_PARAM, (yyvsp[(2) - (3)].string), NULL ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; ;}
    break;

  case 425:

/* Line 1455 of yacc.c  */
#line 1247 "../../../harbour.y"
    { HB_COMP_PARAM->pLastClass = hb_compClassAdd( HB_COMP_PARAM, (yyvsp[(2) - (4)].string), (yyvsp[(3) - (4)].string) ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; ;}
    break;

  case 426:

/* Line 1455 of yacc.c  */
#line 1248 "../../../harbour.y"
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; ;}
    break;

  case 427:

/* Line 1455 of yacc.c  */
#line 1249 "../../../harbour.y"
    { HB_COMP_PARAM->cDataListType = (yyvsp[(3) - (3)].asVarType)->cVarType; ;}
    break;

  case 428:

/* Line 1455 of yacc.c  */
#line 1249 "../../../harbour.y"
    { HB_COMP_PARAM->cDataListType = 0; HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; ;}
    break;

  case 435:

/* Line 1455 of yacc.c  */
#line 1262 "../../../harbour.y"
    { HB_COMP_PARAM->pLastMethod = hb_compMethodAdd( HB_COMP_PARAM, HB_COMP_PARAM->pLastClass, (yyvsp[(1) - (2)].string) ); ;}
    break;

  case 436:

/* Line 1455 of yacc.c  */
#line 1263 "../../../harbour.y"
    {
               if( HB_COMP_PARAM->pLastMethod )
               {
                 HB_COMP_PARAM->pLastMethod->cType = (yyvsp[(6) - (6)].asVarType)->cVarType;
                 if( HB_TOUPPER( (yyvsp[(6) - (6)].asVarType)->cVarType ) == 'S' )
                 {
                   HB_COMP_PARAM->pLastMethod->pClass = hb_compClassFind( HB_COMP_PARAM, (yyvsp[(6) - (6)].asVarType)->szFromClass );
                   if( ! HB_COMP_PARAM->pLastMethod->pClass )
                   {
                     hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, (yyvsp[(6) - (6)].asVarType)->szFromClass, HB_COMP_PARAM->pLastMethod->szName );
                     HB_COMP_PARAM->pLastMethod->cType = ( HB_ISUPPER( ( HB_UCHAR ) (yyvsp[(6) - (6)].asVarType)->cVarType ) ? 'O' : 'o' );
                   }
                 }
               }
               HB_COMP_PARAM->pLastMethod = NULL;
             ;}
    break;

  case 437:

/* Line 1455 of yacc.c  */
#line 1281 "../../../harbour.y"
    { HB_COMP_PARAM->pLastMethod = hb_compMethodAdd( HB_COMP_PARAM, HB_COMP_PARAM->pLastClass, (yyvsp[(1) - (1)].string) ); ;}
    break;

  case 438:

/* Line 1455 of yacc.c  */
#line 1282 "../../../harbour.y"
    {
               if( HB_COMP_PARAM->pLastMethod )
               {
                  PHB_HCLASS pClass;
                  char       szSetData[ HB_SYMBOL_NAME_LEN + 1 ];
                  int        iLen;
                  HB_BYTE    cVarType = (yyvsp[(3) - (3)].asVarType)->cVarType;

                  /* List Type overrides if exists. */
                  if( HB_COMP_PARAM->cDataListType )
                     cVarType = HB_COMP_PARAM->cDataListType;

                  HB_COMP_PARAM->pLastMethod->cType = cVarType;
                  if( HB_TOUPPER( cVarType ) == 'S' )
                  {
                     pClass = hb_compClassFind( HB_COMP_PARAM, (yyvsp[(3) - (3)].asVarType)->szFromClass );
                     HB_COMP_PARAM->pLastMethod->pClass = pClass;
                     if( ! HB_COMP_PARAM->pLastMethod->pClass )
                     {
                        hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, (yyvsp[(3) - (3)].asVarType)->szFromClass, HB_COMP_PARAM->pLastMethod->szName );
                        HB_COMP_PARAM->pLastMethod->cType = ( HB_ISUPPER( ( HB_UCHAR ) cVarType ) ? 'O' :'o' );
                     }
                  }
                  else
                     pClass = NULL;

                  iLen = ( int ) strlen( (yyvsp[(1) - (3)].string) );
                  if( iLen >= HB_SYMBOL_NAME_LEN )
                     iLen = HB_SYMBOL_NAME_LEN - 1;
                  szSetData[ 0 ] = '_';
                  memcpy( szSetData + 1, (yyvsp[(1) - (3)].string), iLen );
                  szSetData[ iLen + 1 ] = '\0';

                  HB_COMP_PARAM->pLastMethod = hb_compMethodAdd( HB_COMP_PARAM, HB_COMP_PARAM->pLastClass,
                     hb_compIdentifierNew( HB_COMP_PARAM, szSetData, HB_IDENT_COPY ) );
                  HB_COMP_PARAM->pLastMethod->cType = cVarType;
                  HB_COMP_PARAM->pLastMethod->iParamCount = 1;

                  HB_COMP_PARAM->pLastMethod->cParamTypes = ( HB_BYTE * ) hb_xgrab( 1 );
                  HB_COMP_PARAM->pLastMethod->pParamClasses = ( PHB_HCLASS * ) hb_xgrab( sizeof( HB_HCLASS ) );

                  HB_COMP_PARAM->pLastMethod->cParamTypes[ 0 ] = cVarType;
                  HB_COMP_PARAM->pLastMethod->pParamClasses[ 0 ] = pClass;

                  if( HB_TOUPPER( cVarType ) == 'S' )
                  {
                     HB_COMP_PARAM->pLastMethod->pClass = pClass;
                  }
               }

               HB_COMP_PARAM->pLastMethod = NULL;
             ;}
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 1355 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (1)].asExpr) ); ;}
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 1358 "../../../harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), (yyvsp[(2) - (2)].asVarType) ); ;}
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 1359 "../../../harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(2) - (3)].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[(3) - (3)].asVarType)->cVarType + HB_VT_OFFSET_BYREF, NULL ) ); ;}
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 1360 "../../../harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(2) - (5)].string), hb_compVarTypeNew( HB_COMP_PARAM, 'F', NULL ) ); ;}
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 1361 "../../../harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(3) - (4)].string), (yyvsp[(4) - (4)].asVarType) ); ;}
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 1362 "../../../harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(4) - (5)].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[(5) - (5)].asVarType)->cVarType + HB_VT_OFFSET_BYREF, NULL ) ); ;}
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 1363 "../../../harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(4) - (7)].string), hb_compVarTypeNew( HB_COMP_PARAM, 'F', NULL ) ); ;}
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 1366 "../../../harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(2) - (3)].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[(3) - (3)].asVarType)->cVarType + HB_VT_OFFSET_OPTIONAL, NULL ) ); ;}
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 1367 "../../../harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(3) - (4)].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[(4) - (4)].asVarType)->cVarType + HB_VT_OFFSET_OPTIONAL + HB_VT_OFFSET_BYREF, NULL ) ); ;}
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 1368 "../../../harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(3) - (6)].string), hb_compVarTypeNew( HB_COMP_PARAM, 'F' + HB_VT_OFFSET_OPTIONAL + HB_VT_OFFSET_BYREF, NULL ) ); ;}
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 1369 "../../../harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(4) - (5)].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[(5) - (5)].asVarType)->cVarType + HB_VT_OFFSET_OPTIONAL, NULL ) ); ;}
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 1370 "../../../harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(5) - (6)].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[(6) - (6)].asVarType)->cVarType + HB_VT_OFFSET_OPTIONAL + HB_VT_OFFSET_BYREF, NULL ) ); ;}
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 1371 "../../../harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(5) - (8)].string), hb_compVarTypeNew( HB_COMP_PARAM, 'F' + HB_VT_OFFSET_OPTIONAL + HB_VT_OFFSET_BYREF, NULL ) ); ;}
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 1384 "../../../harbour.y"
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_NEXTFOR ); ;}
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 1387 "../../../harbour.y"
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDCASE ); ;}
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 1390 "../../../harbour.y"
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDIF ); ;}
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 1393 "../../../harbour.y"
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDWITH ); ;}
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 1396 "../../../harbour.y"
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDSEQ ); ;}
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 1399 "../../../harbour.y"
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDDO ); ;}
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 1402 "../../../harbour.y"
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDSWITCH ); ;}
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 1405 "../../../harbour.y"
    { hb_compGenJumpHere( (yyvsp[(1) - (2)].sNumber), HB_COMP_PARAM ); ;}
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 1406 "../../../harbour.y"
    { hb_compGenJumpHere( (yyvsp[(1) - (3)].sNumber), HB_COMP_PARAM ); ;}
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 1407 "../../../harbour.y"
    { hb_compGenJumpHere( (yyvsp[(1) - (3)].sNumber), HB_COMP_PARAM ); hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[(2) - (3)].pVoid) ); ;}
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 1408 "../../../harbour.y"
    { hb_compGenJumpHere( (yyvsp[(1) - (4)].sNumber), HB_COMP_PARAM ); hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[(2) - (4)].pVoid) ); ;}
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 1412 "../../../harbour.y"
    { ++HB_COMP_PARAM->functions.pLast->wIfCounter; hb_compLinePushIfInside( HB_COMP_PARAM ); ;}
    break;

  case 485:

/* Line 1455 of yacc.c  */
#line 1414 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(2) - (4)].asExpr), HB_COMP_PARAM ) ); (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM ); ;}
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 1416 "../../../harbour.y"
    { (yyval.sNumber) = hb_compGenJump( 0, HB_COMP_PARAM ); hb_compGenJumpHere( (yyvsp[(5) - (6)].sNumber), HB_COMP_PARAM ); ;}
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 1419 "../../../harbour.y"
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; ;}
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 1423 "../../../harbour.y"
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 1425 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               ;}
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 1429 "../../../harbour.y"
    { (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, NULL, hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[(5) - (6)].sNumber), HB_COMP_PARAM );
               ;}
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 1433 "../../../harbour.y"
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 493:

/* Line 1455 of yacc.c  */
#line 1435 "../../../harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(4) - (5)].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               ;}
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 1439 "../../../harbour.y"
    { (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, (yyvsp[(1) - (7)].pVoid), hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[(6) - (7)].sNumber), HB_COMP_PARAM );
               ;}
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 1445 "../../../harbour.y"
    {
                  if( HB_COMP_PARAM->functions.pLast->wIfCounter )
                     --HB_COMP_PARAM->functions.pLast->wIfCounter;
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
               ;}
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 1454 "../../../harbour.y"
    { hb_compErrUnclosed( HB_COMP_PARAM, "IF" ); ;}
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 1465 "../../../harbour.y"
    { hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[(2) - (3)].pVoid) ); ;}
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 1477 "../../../harbour.y"
    { hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[(2) - (4)].pVoid) ); ;}
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 1481 "../../../harbour.y"
    {  if( HB_COMP_PARAM->functions.pLast->wCaseCounter )
                     --HB_COMP_PARAM->functions.pLast->wCaseCounter;
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
               ;}
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 1489 "../../../harbour.y"
    { hb_compErrUnclosed( HB_COMP_PARAM, "CASE" ); ;}
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 1498 "../../../harbour.y"
    { ++HB_COMP_PARAM->functions.pLast->wCaseCounter; hb_compLinePushIfDebugger( HB_COMP_PARAM );;}
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 1502 "../../../harbour.y"
    {
                        if( (yyvsp[(2) - (2)].lNumber) > 0 )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
                        }
                     ;}
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 1510 "../../../harbour.y"
    { hb_compLinePushIfInside( HB_COMP_PARAM ); ;}
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 1511 "../../../harbour.y"
    {
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               ;}
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 1516 "../../../harbour.y"
    {
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE;
                  (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, NULL, hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[(5) - (6)].sNumber), HB_COMP_PARAM );
               ;}
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 1522 "../../../harbour.y"
    { hb_compLinePushIfInside( HB_COMP_PARAM ); ;}
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 1523 "../../../harbour.y"
    {
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(4) - (5)].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               ;}
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 1528 "../../../harbour.y"
    {
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE;
                  (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, (yyvsp[(1) - (7)].pVoid), hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[(6) - (7)].sNumber), HB_COMP_PARAM );
               ;}
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 1535 "../../../harbour.y"
    {hb_compLinePushIfDebugger( HB_COMP_PARAM ); ;}
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 1535 "../../../harbour.y"
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; ;}
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 1537 "../../../harbour.y"
    { hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL ); ;}
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 1542 "../../../harbour.y"
    {
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               ;}
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 1547 "../../../harbour.y"
    {
                  hb_compLoopHere( HB_COMP_PARAM );
                  hb_compGenJump( (yyvsp[(1) - (5)].sNumber) - HB_COMP_PARAM->functions.pLast->nPCodePos, HB_COMP_PARAM );
               ;}
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 1552 "../../../harbour.y"
    {
                  hb_compGenJumpHere( (yyvsp[(4) - (7)].sNumber), HB_COMP_PARAM );
                  if( HB_COMP_PARAM->functions.pLast->wWhileCounter )
                     --HB_COMP_PARAM->functions.pLast->wWhileCounter;
                  hb_compLoopEnd( HB_COMP_PARAM );
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN;
               ;}
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 1562 "../../../harbour.y"
    {
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  ++HB_COMP_PARAM->functions.pLast->wWhileCounter;
                  hb_compLoopStart( HB_COMP_PARAM, HB_TRUE );
               ;}
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 1571 "../../../harbour.y"
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; ;}
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 1576 "../../../harbour.y"
    { hb_compErrUnclosed( HB_COMP_PARAM, "WHILE" ); ;}
    break;

  case 548:

/* Line 1455 of yacc.c  */
#line 1586 "../../../harbour.y"
    {                                      /* 5 */
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  (yyvsp[(1) - (4)].iNumber) = HB_COMP_PARAM->currLine;
                  hb_compDebugStart();
                  ++HB_COMP_PARAM->functions.pLast->wForCounter;
                  (yyvsp[(2) - (4)].asExpr) = hb_compExprReduce( (yyvsp[(2) - (4)].asExpr), HB_COMP_PARAM );
                  (yyval.asExpr) = hb_compExprGenPush( hb_compExprAssign( (yyvsp[(2) - (4)].asExpr), (yyvsp[(4) - (4)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  if( hb_compExprAsSymbol( (yyvsp[(2) - (4)].asExpr) ) )
                  {
                     hb_compForStart( HB_COMP_PARAM, hb_compExprAsSymbol( (yyvsp[(2) - (4)].asExpr) ), 0 );
                  }
               ;}
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 1599 "../../../harbour.y"
    {                                      /* 9 */
                  hb_compLoopStart( HB_COMP_PARAM, HB_TRUE );
                  (yyval.sNumber) = hb_compGenJump( 0, HB_COMP_PARAM );
               ;}
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 1604 "../../../harbour.y"
    {                                      /* 11 */
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
               ;}
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 1608 "../../../harbour.y"
    {
                  int iSign, iLine;

                  hb_compLoopHere( HB_COMP_PARAM );

                  iLine = HB_COMP_PARAM->currLine;
                  HB_COMP_PARAM->currLine = (yyvsp[(1) - (12)].iNumber);
                  hb_compLinePush( HB_COMP_PARAM );
                  HB_COMP_PARAM->currLine = iLine;

                  if( (yyvsp[(8) - (12)].asExpr) )
                  {
                     (yyvsp[(8) - (12)].asExpr) = hb_compExprReduce( (yyvsp[(8) - (12)].asExpr), HB_COMP_PARAM );
                     iSign = hb_compExprAsNumSign( (yyvsp[(8) - (12)].asExpr) );
                     HB_COMP_EXPR_CLEAR( hb_compExprGenPush( hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(2) - (12)].asExpr), HB_COMP_PARAM ), (yyvsp[(8) - (12)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ) );
                  }
                  else
                  {
                     iSign = 1;
                     HB_COMP_EXPR_CLEAR( hb_compExprGenPush( hb_compExprNewPreInc( (yyvsp[(2) - (12)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ) );
                  }
                  hb_compGenJumpHere( (yyvsp[(9) - (12)].sNumber), HB_COMP_PARAM );
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(7) - (12)].asExpr), HB_COMP_PARAM ) );   /* end */
                  if( iSign )
                  {
                     hb_compGenPCode1( ( HB_BYTE ) ( iSign > 0 ? HB_P_GREATER : HB_P_LESS ), HB_COMP_PARAM );
                     if( (yyvsp[(8) - (12)].asExpr) )
                        HB_COMP_EXPR_FREE( (yyvsp[(8) - (12)].asExpr) );
                  }
                  else
                  {
                     HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(8) - (12)].asExpr), HB_COMP_PARAM ) );   /* step */
                     hb_compGenPCode1( HB_P_FORTEST, HB_COMP_PARAM );
                  }

                  hb_compGenJumpFalse( (yyvsp[(11) - (12)].sNumber) - HB_COMP_PARAM->functions.pLast->nPCodePos, HB_COMP_PARAM );
                  hb_compLoopEnd( HB_COMP_PARAM );
                  if( hb_compExprAsSymbol( (yyvsp[(2) - (12)].asExpr) ) )
                     hb_compForEnd( HB_COMP_PARAM, hb_compExprAsSymbol( (yyvsp[(2) - (12)].asExpr) ) );
                  HB_COMP_EXPR_FREE( (yyvsp[(5) - (12)].asExpr) );  /* deletes $5, $2, $4 */
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
               ;}
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 1656 "../../../harbour.y"
    { (yyval.asExpr) = NULL; ;}
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 1657 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprReduce( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 1661 "../../../harbour.y"
    {
                     hb_compLinePush( HB_COMP_PARAM );
                     if( HB_COMP_PARAM->functions.pLast->wForCounter )
                        --HB_COMP_PARAM->functions.pLast->wForCounter;
                  ;}
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 1671 "../../../harbour.y"
    { hb_compErrUnclosed( HB_COMP_PARAM, "FOR" ); ;}
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 1680 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 1681 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewRef( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 1684 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 1685 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 1688 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[(2) - (2)].string), HB_COMP_PARAM ); ;}
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 1692 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 1693 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 1698 "../../../harbour.y"
    {
                ++HB_COMP_PARAM->functions.pLast->wForCounter;    /* 5 */
                hb_compLinePushIfInside( HB_COMP_PARAM );
                hb_compDebugStart();
             ;}
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 1704 "../../../harbour.y"
    {
                /* 7 */
                (yyvsp[(2) - (6)].asExpr) = hb_compExprReduce( (yyvsp[(2) - (6)].asExpr), HB_COMP_PARAM );
                (yyvsp[(4) - (6)].asExpr) = hb_compExprReduce( (yyvsp[(4) - (6)].asExpr), HB_COMP_PARAM );
                hb_compEnumStart( HB_COMP_PARAM, (yyvsp[(2) - (6)].asExpr), (yyvsp[(4) - (6)].asExpr), (yyvsp[(6) - (6)].iNumber) );

                hb_compLoopStart( HB_COMP_PARAM, HB_TRUE );
                (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
             ;}
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 1714 "../../../harbour.y"
    {
                /* 9 */
                (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
             ;}
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 1719 "../../../harbour.y"
    {
                hb_compLoopHere( HB_COMP_PARAM );
                hb_compEnumNext( HB_COMP_PARAM, (yyvsp[(2) - (10)].asExpr), (yyvsp[(6) - (10)].iNumber) );
                hb_compGenJump( (yyvsp[(7) - (10)].sNumber) - HB_COMP_PARAM->functions.pLast->nPCodePos, HB_COMP_PARAM );

                hb_compGenJumpHere( (yyvsp[(9) - (10)].sNumber), HB_COMP_PARAM );
                hb_compLoopEnd( HB_COMP_PARAM );
                HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
                hb_compEnumEnd( HB_COMP_PARAM, (yyvsp[(2) - (10)].asExpr) );
                HB_COMP_EXPR_FREE( (yyvsp[(2) - (10)].asExpr) );
                HB_COMP_EXPR_FREE( (yyvsp[(4) - (10)].asExpr) );
             ;}
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 1733 "../../../harbour.y"
    { (yyval.iNumber) =  1; ;}
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 1734 "../../../harbour.y"
    { (yyval.iNumber) = -1; ;}
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 1738 "../../../harbour.y"
    {
                  hb_compLoopStart( HB_COMP_PARAM, HB_FALSE );
                  hb_compSwitchStart( HB_COMP_PARAM, (yyvsp[(1) - (1)].asExpr) );
                  hb_compGenJump( 0, HB_COMP_PARAM );
               ;}
    break;

  case 582:

/* Line 1455 of yacc.c  */
#line 1745 "../../../harbour.y"
    {
                  hb_compSwitchEnd( HB_COMP_PARAM );
                  hb_compLoopEnd( HB_COMP_PARAM );
               ;}
    break;

  case 583:

/* Line 1455 of yacc.c  */
#line 1752 "../../../harbour.y"
    {
                  HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) );
               ;}
    break;

  case 584:

/* Line 1455 of yacc.c  */
#line 1758 "../../../harbour.y"
    {
                  if( HB_COMP_PARAM->functions.pLast->wSwitchCounter )
                     --HB_COMP_PARAM->functions.pLast->wSwitchCounter;
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
               ;}
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 1767 "../../../harbour.y"
    { hb_compErrUnclosed( HB_COMP_PARAM, "SWITCH" ); ;}
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 1777 "../../../harbour.y"
    {
                  ++HB_COMP_PARAM->functions.pLast->wSwitchCounter;
                  hb_compLinePushIfInside( HB_COMP_PARAM );
               ;}
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 1782 "../../../harbour.y"
    {
                  (yyval.asExpr) = hb_compExprReduce( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM );
               ;}
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 1789 "../../../harbour.y"
    {
                  if( (yyvsp[(2) - (2)].lNumber) > 0 )
                  {
                     hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
                  }
               ;}
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 1797 "../../../harbour.y"
    { hb_compSwitchAdd( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 1800 "../../../harbour.y"
    { hb_compSwitchAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].asExpr) ); hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 1808 "../../../harbour.y"
    { hb_compSwitchAdd( HB_COMP_PARAM, NULL ); hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 1808 "../../../harbour.y"
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; ;}
    break;

  case 607:

/* Line 1455 of yacc.c  */
#line 1813 "../../../harbour.y"
    {              /* 2 */
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  ++HB_COMP_PARAM->functions.pLast->wSeqCounter;
                  ++HB_COMP_PARAM->functions.pLast->wSeqBegCounter;
                  (yyval.sNumber) = hb_compSequenceBegin( HB_COMP_PARAM );
               ;}
    break;

  case 608:

/* Line 1455 of yacc.c  */
#line 1822 "../../../harbour.y"
    {              /* 6 */
                  /* Set jump address for HB_P_SEQBEGIN opcode - this address
                   * will be used in BREAK code if there is no RECOVER clause
                   */
                  if( (yyvsp[(3) - (5)].sNumber) )
                     hb_compGenPCode1( HB_P_POP, HB_COMP_PARAM );
                  hb_compGenJumpHere( (yyvsp[(2) - (5)].sNumber), HB_COMP_PARAM );
                  (yyval.sNumber) = hb_compSequenceEnd( HB_COMP_PARAM );
                  (yyvsp[(4) - (5)].lNumber) = hb_compLoopCount( HB_COMP_PARAM );
               ;}
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 1833 "../../../harbour.y"
    {              /* 8 */
                  /* Replace END address with RECOVER address in
                   * HB_P_SEQBEGIN opcode if there is RECOVER clause
                   */
                  if( (yyvsp[(7) - (7)].sNumber) )
                     hb_compGenJumpThere( (yyvsp[(2) - (7)].sNumber), (yyvsp[(7) - (7)].sNumber), HB_COMP_PARAM );
               ;}
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 1841 "../../../harbour.y"
    {              /* 10 */
                  long lLoopCount = hb_compLoopCount( HB_COMP_PARAM );
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
                  if( (yyvsp[(9) - (9)].sNumber) )
                  {
                     if( (yyvsp[(4) - (9)].lNumber) != lLoopCount )
                     {
                        /* ALWAYS statement after RECOVER with EXIT/LOOP statements */
                        hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_ALWAYS_AFTER_EXIT, "EXIT/LOOP", NULL );
                     }
                     --HB_COMP_PARAM->functions.pLast->wAlwaysCounter;
                     /* replace END address with ALWAYS address in
                        HB_P_SEQEND opcode */
                     hb_compGenJumpThere( (yyvsp[(6) - (9)].sNumber), (yyvsp[(9) - (9)].sNumber), HB_COMP_PARAM );
                     /* Fix ALWAYS address in HB_P_SEQALWAYS opcode */
                     hb_compGenJumpThere( (yyvsp[(2) - (9)].sNumber) - 4, (yyvsp[(9) - (9)].sNumber), HB_COMP_PARAM );
                     /* Fix ALWAYSEND address in HB_P_ALWAYSBEGIN opcode */
                     hb_compGenJumpHere( (yyvsp[(9) - (9)].sNumber) + 1, HB_COMP_PARAM );
                     hb_compGenPCode1( HB_P_ALWAYSEND, HB_COMP_PARAM );
                  }
                  else
                  {
                     /* Fix END address in HB_P_SEQEND opcode */
                     hb_compGenJumpHere( (yyvsp[(6) - (9)].sNumber), HB_COMP_PARAM );
                  }
                  hb_compSequenceFinish( HB_COMP_PARAM, (yyvsp[(2) - (9)].sNumber), (yyvsp[(6) - (9)].sNumber), (yyvsp[(9) - (9)].sNumber),
                                         (yyvsp[(5) - (9)].lNumber) != 0, (yyvsp[(7) - (9)].sNumber) != 0, (yyvsp[(4) - (9)].lNumber) == lLoopCount );
               ;}
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 1870 "../../../harbour.y"
    {
                  if( HB_COMP_PARAM->functions.pLast->wSeqBegCounter )
                     --HB_COMP_PARAM->functions.pLast->wSeqBegCounter;
               ;}
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 1878 "../../../harbour.y"
    { hb_compErrUnclosed( HB_COMP_PARAM, "BEGIN SEQUENCE" ); ;}
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 1887 "../../../harbour.y"
    { (yyval.sNumber) = 0; ;}
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 1889 "../../../harbour.y"
    {
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ) );
                  hb_compGenPCode1( HB_P_SEQBLOCK, HB_COMP_PARAM );
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
               ;}
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 1896 "../../../harbour.y"
    { (yyval.sNumber) = 0; ;}
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 1901 "../../../harbour.y"
    {
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
                  ++HB_COMP_PARAM->functions.pLast->wAlwaysCounter;
                  hb_compSequenceAlways( HB_COMP_PARAM );
               ;}
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 1910 "../../../harbour.y"
    {
                  (yyval.sNumber) = 0;
                  if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                     --HB_COMP_PARAM->functions.pLast->wSeqCounter;
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE;
               ;}
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 1921 "../../../harbour.y"
    {
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
                  if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                     --HB_COMP_PARAM->functions.pLast->wSeqCounter;
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE;
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  hb_compGenPCode2( HB_P_SEQRECOVER, HB_P_POP, HB_COMP_PARAM );
               ;}
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 1932 "../../../harbour.y"
    {
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
                  if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                     --HB_COMP_PARAM->functions.pLast->wSeqCounter;
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE;
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  hb_compGenPCode1( HB_P_SEQRECOVER, HB_COMP_PARAM );
                  hb_compGenPopVar( (yyvsp[(2) - (2)].string), HB_COMP_PARAM );
               ;}
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 1950 "../../../harbour.y"
    {
                  (yyval.asExpr) = hb_compExprNewFunCall( (yyvsp[(2) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM );
               ;}
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 1954 "../../../harbour.y"
    {
                  hb_compModuleAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), HB_FALSE );
                  /* DOIDENT is the only one identifier which can be returned in lower letters */
                  (yyval.asExpr) = hb_compExprNewFunCall( hb_compExprNewFunName( hb_compIdentifierNew( HB_COMP_PARAM, hb_strupr( hb_strdup( (yyvsp[(1) - (2)].string) ) ), HB_IDENT_FREE ), HB_COMP_PARAM ), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM );
               ;}
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 1961 "../../../harbour.y"
    { (yyval.asExpr) = NULL; ;}
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 1962 "../../../harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 1965 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprNewArgList( hb_compExprNewNil( HB_COMP_PARAM ), HB_COMP_PARAM ), hb_compExprNewNil( HB_COMP_PARAM ) ); ;}
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 1966 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprNewArgList( hb_compExprNewNil( HB_COMP_PARAM ), HB_COMP_PARAM ), (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 1967 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 638:

/* Line 1455 of yacc.c  */
#line 1968 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (2)].asExpr), hb_compExprNewNil( HB_COMP_PARAM ) ); ;}
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 1969 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 1972 "../../../harbour.y"
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 1980 "../../../harbour.y"
    {
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
                  hb_compGenPCode1( HB_P_WITHOBJECTSTART, HB_COMP_PARAM );
                  HB_COMP_PARAM->functions.pLast->wWithObjectCnt++;
               ;}
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 1989 "../../../harbour.y"
    {  if( HB_COMP_PARAM->functions.pLast->wWithObjectCnt )
                    --HB_COMP_PARAM->functions.pLast->wWithObjectCnt;
                  if( (yyvsp[(5) - (6)].lNumber) )
                     hb_compGenPCode1( HB_P_WITHOBJECTEND, HB_COMP_PARAM );
                  else
                  {
                     hb_compNOOPfill( HB_COMP_PARAM->functions.pLast,
                                      (yyvsp[(4) - (6)].sNumber), 1, HB_FALSE, HB_TRUE );
                     hb_compGenPCode1( HB_P_POP, HB_COMP_PARAM );
                  }
               ;}
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 2004 "../../../harbour.y"
    { hb_compErrUnclosed( HB_COMP_PARAM, "WITH OBJECT" ); ;}
    break;

  case 656:

/* Line 1455 of yacc.c  */
#line 2013 "../../../harbour.y"
    { HB_COMP_PARAM->fError = HB_FALSE; ;}
    break;



/* Line 1455 of yacc.c  */
#line 7600 "harboury.c"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (pComp, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (pComp, yymsg);
	  }
	else
	  {
	    yyerror (pComp, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, pComp);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, pComp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (pComp, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, pComp);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, pComp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



/* Line 1675 of yacc.c  */
#line 2017 "../../../harbour.y"


/*
 ** ------------------------------------------------------------------------ **
 */

/*
 * Avoid tracing in preprocessor/compiler.
 */
#if ! defined( HB_TRACE_UTILS )
   #if defined( HB_TRACE_LEVEL )
      #undef HB_TRACE_LEVEL
   #endif
#endif


/* ************************************************************************* */

/*
 * This function stores the position in pcode buffer where the FOR/WHILE
 * loop starts. It will be used to fix any LOOP/EXIT statements
 */
static void hb_compLoopStart( HB_COMP_DECL, HB_BOOL fCanLoop )
{
   PHB_LOOPEXIT pLoop = ( PHB_LOOPEXIT ) hb_xgrab( sizeof( HB_LOOPEXIT ) );
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   if( pFunc->pLoops )
   {
      PHB_LOOPEXIT pLast = pFunc->pLoops;

      while( pLast->pNext )
         pLast = pLast->pNext;
      pLast->pNext = pLoop;
   }
   else
      pFunc->pLoops = pLoop;

   pLoop->nOffset          = pFunc->nPCodePos;  /* store the start position */
   pLoop->fCanLoop         = fCanLoop;    /* can we use LOOP inside */
   pLoop->wSeqCounter      = pFunc->wSeqCounter;      /* store current SEQUENCE counter */
   pLoop->wWithObjectCnt   = pFunc->wWithObjectCnt;   /* store current WITH OBJECT counter */
   pLoop->wAlwaysCounter   = pFunc->wAlwaysCounter;   /* store current ALWAYS counter */
   pLoop->pExitList        = NULL;
   pLoop->pLoopList        = NULL;
   pLoop->pNext            = NULL;
}

/*
 * return number of LOOP of EXIT statement in the top most structure
 */
static long hb_compLoopCount( HB_COMP_DECL )
{
   PHB_LOOPEXIT pLastLoop, pLastExit, pLoop;
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;
   long lCount = 0;

   pLastLoop = pLastExit = NULL;
   pLoop = pFunc->pLoops;
   while( pLoop )
   {
      if( pLoop->fCanLoop )
         pLastLoop = pLoop;
      pLastExit = pLoop;
      pLoop = pLoop->pNext;
   }

   if( pLastLoop )
   {
      while( pLastLoop->pLoopList )
      {
         ++lCount;
         pLastLoop = pLastLoop->pLoopList;
      }
   }
   if( pLastExit )
   {
      while( pLastExit->pExitList )
      {
         ++lCount;
         pLastExit = pLastExit->pExitList;
      }
   }

   return lCount;
}

/*
 * Stores the position of LOOP statement to fix it later at the end of loop
 */
static void hb_compLoopLoop( HB_COMP_DECL )
{
   PHB_LOOPEXIT pLast = NULL, pLoop;
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   pLoop = pFunc->pLoops;
   while( pLoop )
   {
      if( pLoop->fCanLoop )
         pLast = pLoop;
      pLoop = pLoop->pNext;
   }

   if( ! pLast )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNMATCHED_EXIT, "LOOP", NULL );
   }
   else
   {
      if( pLast->wSeqCounter != pFunc->wSeqCounter )
      {
         /* Attempt to LOOP from BEGIN/END sequence
          * Current SEQUENCE counter is different then at the beginning of loop
          * Notice that LOOP is allowed in RECOVER code when there is no
          * ALWAYS block
          */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "LOOP", NULL );
      }
      else if( pLast->wAlwaysCounter != pFunc->wAlwaysCounter )
      {
         /* Attempt to LOOP from ALWAYS block of BEGIN/END sequence
          */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "LOOP", NULL );
      }
      else
      {
         HB_USHORT wWithObjectCnt = pLast->wWithObjectCnt;

         pLoop = ( PHB_LOOPEXIT ) hb_xgrab( sizeof( HB_LOOPEXIT ) );
         pLoop->pLoopList = NULL;
         while( pLast->pLoopList )
            pLast = pLast->pLoopList;
         pLast->pLoopList = pLoop;

         while( wWithObjectCnt < pFunc->wWithObjectCnt )
         {
            hb_compGenPCode1( HB_P_WITHOBJECTEND, HB_COMP_PARAM );
            wWithObjectCnt++;
         }
         /* store the position to fix */
         pLoop->nOffset = pFunc->nPCodePos;
         hb_compGenJump( 0, HB_COMP_PARAM );
      }
   }
}

/*
 * Stores the position of EXIT statement to fix it later at the end of loop
 */
static void hb_compLoopExit( HB_COMP_DECL )
{
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   if( ! pFunc->pLoops )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNMATCHED_EXIT, "EXIT", NULL );
   }
   else
   {
      PHB_LOOPEXIT pLast, pLoop;

      pLast = pFunc->pLoops;
      while( pLast->pNext )
         pLast = pLast->pNext;

      if( pLast->wSeqCounter != pFunc->wSeqCounter )
      {
         /* Attempt to EXIT from BEGIN/END sequence
          * Current SEQUENCE counter is different then at the beginning of loop
          * Notice that EXIT is allowed in RECOVER code when there is no
          * ALWAYS block
          */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "EXIT", NULL );
      }
      else if( pLast->wAlwaysCounter != pFunc->wAlwaysCounter )
      {
         /* Attempt to EXIT from ALWAYS block of BEGIN/END sequence
          */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "EXIT", NULL );
      }
      else
      {
         HB_USHORT wWithObjectCnt = pLast->wWithObjectCnt;

         pLoop = ( PHB_LOOPEXIT ) hb_xgrab( sizeof( HB_LOOPEXIT ) );
         pLoop->pExitList = NULL;
         while( pLast->pExitList )
            pLast = pLast->pExitList;
         pLast->pExitList = pLoop;

         while( wWithObjectCnt < pFunc->wWithObjectCnt )
         {
            hb_compGenPCode1( HB_P_WITHOBJECTEND, HB_COMP_PARAM );
            wWithObjectCnt++;
         }
         /* store the position to fix */
         pLoop->nOffset = pFunc->nPCodePos;
         hb_compGenJump( 0, HB_COMP_PARAM );
      }
   }
}

/*
 * Fixes the LOOP statement
 */
static void hb_compLoopHere( HB_COMP_DECL )
{
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;
   PHB_LOOPEXIT pLoop = pFunc->pLoops, pFree, pLast;

   if( pLoop )
   {
      while( pLoop->pNext )
         pLoop = pLoop->pNext;

      pLast = pLoop;
      pLoop = pLoop->pLoopList;
      while( pLoop )
      {
         hb_compGenJumpHere( pLoop->nOffset + 1, HB_COMP_PARAM );
         pFree = pLoop;
         pLoop = pLoop->pLoopList;
         hb_xfree( pFree );
      }
      pLast->pLoopList = NULL;
   }
}

/*
 * Fixes the EXIT statements and releases memory allocated for current loop
 */
static void hb_compLoopEnd( HB_COMP_DECL )
{
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;
   PHB_LOOPEXIT pLoop = pFunc->pLoops, pLast = pFunc->pLoops, pExit, pFree;

   if( pLoop )
   {
      while( pLoop->pNext )
      {
         pLast = pLoop;
         pLoop = pLoop->pNext;
      }

      pExit = pLoop->pExitList;
      while( pExit )
      {
         hb_compGenJumpHere( pExit->nOffset + 1, HB_COMP_PARAM );
         pFree = pExit;
         pExit = pExit->pExitList;
         hb_xfree( pFree );
      }

      pLast->pNext = NULL;
      if( pLoop == pFunc->pLoops )
         pFunc->pLoops = NULL;
      hb_xfree( pLoop );
   }
}

void hb_compLoopKill( PHB_HFUNC pFunc )
{
   PHB_LOOPEXIT pLoop, pFree;

   while( pFunc->pLoops )
   {
      pLoop = pFunc->pLoops;
      while( pLoop->pExitList )
      {
         pFree = pLoop->pExitList;
         pLoop->pExitList = pFree->pExitList;
         hb_xfree( pFree );
      }
      while( pLoop->pLoopList )
      {
         pFree = pLoop->pLoopList;
         pLoop->pLoopList = pFree->pLoopList;
         hb_xfree( pFree );
      }
      pFunc->pLoops = pLoop->pNext;
      hb_xfree( pLoop );
   }
}

static void * hb_compElseIfGen( HB_COMP_DECL, void * pFirst, HB_SIZE nOffset )
{
   PHB_ELSEIF pElseIf = ( PHB_ELSEIF ) hb_xgrab( sizeof( HB_ELSEIF ) ), pLast;
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   pElseIf->nOffset = nOffset;
   pElseIf->pPrev   = NULL;
   pElseIf->pElseif = NULL;

   if( pFirst )
   {
      pLast = ( PHB_ELSEIF ) pFirst;
      while( pLast->pElseif )
         pLast = pLast->pElseif;
      pLast->pElseif = pElseIf;
   }
   else
   {
      if( pFunc->elseif )
      {
         pElseIf->pPrev = pFunc->elseif;
      }
      pFirst = pElseIf;
      pFunc->elseif = pElseIf;
   }
   return pFirst;
}


static void hb_compElseIfFix( HB_COMP_DECL, void * pFixElseIfs )
{
   PHB_ELSEIF pFix = ( PHB_ELSEIF ) pFixElseIfs;
   PHB_ELSEIF pDel;

   HB_COMP_PARAM->functions.pLast->elseif = pFix->pPrev;
   while( pFix )
   {
      hb_compGenJumpHere( pFix->nOffset, HB_COMP_PARAM );
      pDel = pFix;
      pFix = pFix->pElseif;
      hb_xfree( pDel );
   }
}

void hb_compElseIfKill( PHB_HFUNC pFunc )
{
   PHB_ELSEIF pFix;
   PHB_ELSEIF pDel;

   while( pFunc->elseif )
   {
      pFix = pFunc->elseif;
      pFunc->elseif = pFix->pPrev;
      while( pFix )
      {
         pDel = pFix;
         pFix = pFix->pElseif;
         hb_xfree( pDel );
      }
   }
}

static void hb_compRTVariableAdd( HB_COMP_DECL, PHB_EXPR pVar, HB_BOOL bPopInitValue )
{
   PHB_RTVAR pRTvar = ( PHB_RTVAR ) hb_xgrab( sizeof( HB_RTVAR ) );
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   pRTvar->pVar = pVar;
   pRTvar->bPopValue = bPopInitValue;
   pRTvar->pNext = NULL;
   pRTvar->pPrev = NULL;

   if( pFunc->rtvars )
   {
      PHB_RTVAR pLast = pFunc->rtvars;
      while( pLast->pNext )
         pLast = pLast->pNext;
      pLast->pNext = pRTvar;
      pRTvar->pPrev = pLast;
   }
   else
      pFunc->rtvars = pRTvar;
}

static void hb_compRTVariableGen( HB_COMP_DECL, const char * szCreateFun )
{
   HB_USHORT usCount = 0;
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;
   PHB_RTVAR pVar = pFunc->rtvars;
   PHB_RTVAR pDel;

   /* generate the function call frame */
   hb_compGenPushFunCall( szCreateFun, HB_FN_UDF, HB_COMP_PARAM );

   /* push variable names to create */
   while( pVar->pNext )
   {
      pVar->pVar = hb_compExprGenPush( pVar->pVar, HB_COMP_PARAM );
      pVar = pVar->pNext;
      ++usCount;
   }
   pVar->pVar = hb_compExprGenPush( pVar->pVar, HB_COMP_PARAM );
   ++usCount;

   /* call function that will create either PUBLIC or PRIVATE variables */
   if( usCount > 255 )
      hb_compGenPCode3( HB_P_DO, HB_LOBYTE( usCount ), HB_HIBYTE( usCount ), HB_COMP_PARAM );
   else
      hb_compGenPCode2( HB_P_DOSHORT, ( HB_BYTE ) usCount, HB_COMP_PARAM );

   /* pop initial values */
   while( pVar )
   {
      if( pVar->bPopValue )
         HB_COMP_EXPR_FREE( hb_compExprGenPop( pVar->pVar, HB_COMP_PARAM ) );
      else
         HB_COMP_EXPR_FREE( pVar->pVar );
      pDel = pVar;
      pVar = pVar->pPrev;
      hb_xfree( pDel );
   }
   pFunc->rtvars = NULL;
}

void hb_compRTVariableKill( HB_COMP_DECL, PHB_HFUNC pFunc )
{
   PHB_RTVAR pVar;

   while( pFunc->rtvars )
   {
      pVar = pFunc->rtvars;

      HB_COMP_EXPR_FREE( pVar->pVar );
      pFunc->rtvars = pVar->pPrev;
      hb_xfree( pVar );
   }
   pFunc->rtvars = NULL;
}

static PHB_EXPR hb_compArrayDimPush( PHB_EXPR pInitValue, HB_COMP_DECL )
{
   HB_USHORT uCount = ( HB_USHORT ) hb_compExprListLen( pInitValue );

   if( uCount == 1 && hb_compExprIsInteger( pInitValue->value.asList.pExprList ) &&
       hb_compExprAsInteger( pInitValue->value.asList.pExprList ) == 0 )
   {
      hb_compGenPCode3( HB_P_ARRAYGEN, 0, 0, HB_COMP_PARAM );
   }
   else
   {
      pInitValue = hb_compExprGenPush( pInitValue, HB_COMP_PARAM );
      hb_compGenPCode3( HB_P_ARRAYDIM, HB_LOBYTE( uCount ), HB_HIBYTE( uCount ), HB_COMP_PARAM );
   }
   return pInitValue;
}

static void hb_compVariableDim( const char * szName, PHB_EXPR pInitValue, HB_COMP_DECL )
{
   if( HB_COMP_PARAM->iVarScope == HB_VSCOMP_PUBLIC || HB_COMP_PARAM->iVarScope == HB_VSCOMP_PRIVATE )
   {
      hb_compVariableAdd( HB_COMP_PARAM, szName, hb_compVarTypeNew( HB_COMP_PARAM, 'A', NULL ) );
      HB_COMP_EXPR_FREE( hb_compArrayDimPush( pInitValue, HB_COMP_PARAM ) );
      hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( szName, NULL, HB_COMP_PARAM ), HB_TRUE );
   }
   else if( HB_COMP_PARAM->iVarScope & HB_VSCOMP_STATIC )
   {
      PHB_EXPR pVar = hb_compExprNewVar( szName, HB_COMP_PARAM );
      PHB_EXPR pAssign;

      /* create a static variable */
      hb_compVariableAdd( HB_COMP_PARAM, szName, hb_compVarTypeNew( HB_COMP_PARAM, 'A', NULL ) );

      hb_compStaticDefStart( HB_COMP_PARAM );   /* switch to statics pcode buffer */
      /* create an array */
      pInitValue = hb_compArrayDimPush( pInitValue, HB_COMP_PARAM );
      /* now pop an array */
      pVar = hb_compExprGenPop( pVar, HB_COMP_PARAM );
      /* check if valid initializers were used but don't generate any code */
      pAssign = hb_compExprAssignStatic( pVar, pInitValue, HB_COMP_PARAM );
      /* delete all used expressions */
      HB_COMP_EXPR_FREE( pAssign );
      hb_compStaticDefEnd( HB_COMP_PARAM, szName );
   }
   else
   {
      hb_compVariableAdd( HB_COMP_PARAM, szName, hb_compVarTypeNew( HB_COMP_PARAM, 'A', NULL ) );
      HB_COMP_EXPR_FREE( hb_compArrayDimPush( pInitValue, HB_COMP_PARAM ) );
      if( HB_COMP_PARAM->iVarScope != HB_VSCOMP_LOCAL ||
          !( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_EXTBLOCK ) )
      {
         HB_COMP_EXPR_FREE( hb_compExprGenPop( hb_compExprNewVar( szName, HB_COMP_PARAM ), HB_COMP_PARAM ) );
      }
   }
}

static void hb_compForStart( HB_COMP_DECL, const char *szVarName, int iForEachDir )
{
   PHB_ENUMERATOR pEnumVar;

   pEnumVar = HB_COMP_PARAM->functions.pLast->pEnum;
   if( pEnumVar == NULL )
   {
      HB_COMP_PARAM->functions.pLast->pEnum = ( PHB_ENUMERATOR ) hb_xgrab( sizeof( HB_ENUMERATOR ) );
      pEnumVar = HB_COMP_PARAM->functions.pLast->pEnum;
   }
   else
   {
      HB_BOOL bWarn = HB_TRUE;
      PHB_ENUMERATOR pLast = pEnumVar;

      while( pEnumVar )
      {
         if( strcmp( pEnumVar->szName, szVarName ) == 0 )
         {
            /* Enumerator variable exists already - throw warning */
            if( bWarn )
            {
               hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_FORVAR_DUPL, szVarName, NULL );
               bWarn = HB_FALSE;
            }
         }
         pLast = pEnumVar;
         pEnumVar = pEnumVar->pNext;
      }
      pLast->pNext = ( PHB_ENUMERATOR ) hb_xgrab( sizeof( HB_ENUMERATOR ) );
      pEnumVar = pLast->pNext;
   }
   pEnumVar->szName      = szVarName;
   pEnumVar->iForEachDir = iForEachDir;
   pEnumVar->pNext       = NULL;
}

static HB_BOOL hb_compForEachVarError( HB_COMP_DECL, const char *szVarName, int * piDir )
{
   PHB_ENUMERATOR pEnumVar;

   pEnumVar = HB_COMP_PARAM->functions.pLast->pEnum;
   if( pEnumVar && ! HB_COMP_PARAM->functions.pLast->bBlock )
   {
      while( pEnumVar )
      {
         if( strcmp( pEnumVar->szName, szVarName ) == 0 )
         {
            * piDir = pEnumVar->iForEachDir;
            if( * piDir != 0 )
            {
               /* only if it is FOR EACH enumerator
                * generate warning if it is FOR/NEXT loop
               */
               return HB_FALSE;
            }
         }
         pEnumVar = pEnumVar->pNext;
      }
   }

   hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_ENUM_INVALID, szVarName, NULL );
   return HB_TRUE;
}

static void hb_compForEnd( HB_COMP_DECL, const char *szVar )
{
   PHB_ENUMERATOR * pEnumVar;

   HB_SYMBOL_UNUSED( szVar );

   pEnumVar = &HB_COMP_PARAM->functions.pLast->pEnum;
   if( *pEnumVar )
   {
      while( ( *pEnumVar )->pNext )
         pEnumVar = &( *pEnumVar )->pNext;

      hb_xfree( *pEnumVar );
      *pEnumVar = NULL;
   }
}

static HB_COMP_CARGO2_FUNC( hb_compEnumEvalStart )
{
   const char * szName = hb_compExprAsSymbol( ( PHB_EXPR ) cargo );

   if( szName )
      hb_compForStart( HB_COMP_PARAM, szName, HB_COMP_PARAM->fDescend ? -1 : 1 );

   hb_compExprGenPush( ( PHB_EXPR ) dummy, HB_COMP_PARAM );  /* expression */
   hb_compExprGenPush( ( PHB_EXPR ) cargo, HB_COMP_PARAM );  /* variable */
}

static void hb_compEnumStart( HB_COMP_DECL, PHB_EXPR pVars, PHB_EXPR pExprs, int descend )
{
   HB_SIZE nLen;

   if( hb_compExprListLen( pVars ) != hb_compExprListLen( pExprs ) )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_FORVAR_DIFF, NULL, NULL );
   }

   HB_COMP_PARAM->fDescend = descend < 0;
   nLen = hb_compExprListEval2( HB_COMP_PARAM, pVars, pExprs, hb_compEnumEvalStart );

   if( nLen > 255 )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_FORVAR_TOOMANY, NULL, NULL );
   }
   else
   {
      hb_compGenPCode3( HB_P_ENUMSTART, ( HB_BYTE ) ( nLen & 0xFF ), ( HB_BYTE ) ( descend > 0 ? 1 : 0 ), HB_COMP_PARAM );
   }
}

static void hb_compEnumNext( HB_COMP_DECL, PHB_EXPR pExpr, int descend )
{
   HB_SYMBOL_UNUSED( pExpr );
   if( descend > 0 )
   {
      hb_compGenPCode1( HB_P_ENUMNEXT, HB_COMP_PARAM );
   }
   else
   {
      hb_compGenPCode1( HB_P_ENUMPREV, HB_COMP_PARAM );
   }
}

static HB_COMP_CARGO_FUNC( hb_compEnumEvalEnd )
{
   const char * szName = hb_compExprAsSymbol( ( PHB_EXPR ) cargo );

   if( szName )
      hb_compForEnd( HB_COMP_PARAM, szName );
}

static void hb_compEnumEnd( HB_COMP_DECL, PHB_EXPR pExpr )
{
   hb_compExprListEval( HB_COMP_PARAM, pExpr, hb_compEnumEvalEnd );
   hb_compGenPCode1( HB_P_ENUMEND, HB_COMP_PARAM );
}

static void hb_compSwitchStart( HB_COMP_DECL, PHB_EXPR pExpr )
{
   PHB_SWITCHCMD pSwitch = ( PHB_SWITCHCMD ) hb_xgrab( sizeof( HB_SWITCHCMD ) );
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   pSwitch->pCases = NULL;
   pSwitch->pLast  = NULL;
   pSwitch->nDefault = 0;
   pSwitch->nOffset = pFunc->nPCodePos;
   pSwitch->pExpr = pExpr;
   pSwitch->pPrev = pFunc->pSwitch;
   pFunc->pSwitch = pSwitch;
}

static void hb_compSwitchAdd( HB_COMP_DECL, PHB_EXPR pExpr )
{
   PHB_SWITCHCASE pCase;
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   pFunc->funFlags &= ~HB_FUNF_BREAK_CODE;

   if( pExpr )
   {
      /* normal CASE */
      pCase = ( PHB_SWITCHCASE ) hb_xgrab( sizeof( HB_SWITCHCASE ) );
      pCase->nOffset = pFunc->nPCodePos;
      pCase->pNext = NULL;
      pCase->pExpr = pExpr = hb_compExprReduce( pExpr, HB_COMP_PARAM );
      if( !( hb_compExprIsLong( pExpr ) || hb_compExprIsString( pExpr ) ) )
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_NOT_LITERAL_CASE, NULL, NULL );
      else if( pFunc->pSwitch->pCases )
      {
         PHB_SWITCHCASE pCases = pFunc->pSwitch->pCases;
         while( pCases )
         {
            HB_BOOL fEqual = HB_FALSE;

            if( hb_compExprIsLong( pExpr ) )
            {
               if( hb_compExprIsLong( pCases->pExpr ) )
                  fEqual = hb_compExprAsLongNum( pExpr ) == hb_compExprAsLongNum( pCases->pExpr );
            }
            else
            {
               if( hb_compExprIsString( pCases->pExpr ) )
                  fEqual = hb_compExprAsStringLen( pExpr ) == hb_compExprAsStringLen( pCases->pExpr ) &&
                           memcmp( hb_compExprAsString( pExpr ),
                                   hb_compExprAsString( pCases->pExpr ),
                                   hb_compExprAsStringLen( pExpr ) ) == 0;
            }
            if( fEqual )
               hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_DUPL_CASE, NULL, NULL );
            pCases = pCases->pNext;
         }
      }

      if( pFunc->pSwitch->pLast )
      {
         pFunc->pSwitch->pLast->pNext = pCase;
         pFunc->pSwitch->pLast = pCase;
      }
      else
      {
         pFunc->pSwitch->pCases = pFunc->pSwitch->pLast = pCase;
      }
      if( hb_compExprIsString( pExpr ) && hb_compExprAsStringLen( pExpr ) > 255 )
      {
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_INVALID_STR, NULL, NULL );
      }
   }
   else
   {
      /* DEFAULT */
      if( pFunc->pSwitch->nDefault )
      {
         /* more than one default clause */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
      }
      else
      {
         pFunc->pSwitch->nDefault = pFunc->nPCodePos;
      }
   }
}

static void hb_compSwitchEnd( HB_COMP_DECL )
{
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;
   PHB_SWITCHCMD pSwitch = pFunc->pSwitch;
   PHB_EXPR pExpr = pSwitch->pExpr;
   PHB_SWITCHCASE pCase, pTmp;
   HB_SIZE nExitPos, nCountPos;
   int iCount = 0;

   /* skip switch pcode if there was no EXIT in the last CASE
    * or in the DEFAULT case
   */
   nExitPos = hb_compGenJump( 0, HB_COMP_PARAM );
   hb_compGenJumpHere( pSwitch->nOffset + 1, HB_COMP_PARAM );

   pCase = pSwitch->pCases;
   if( hb_compExprIsLong( pExpr ) || hb_compExprIsString( pExpr ) )
   {
      HB_BOOL fGen = HB_FALSE;
      while( pCase )
      {
         if( hb_compExprIsLong( pCase->pExpr ) )
         {
            fGen = hb_compExprIsLong( pExpr ) &&
                   hb_compExprAsLongNum( pExpr ) ==
                   hb_compExprAsLongNum( pCase->pExpr );
         }
         else if( hb_compExprIsString( pCase->pExpr ) )
         {
            fGen = hb_compExprIsString( pExpr ) &&
                   hb_compExprAsStringLen( pExpr ) ==
                   hb_compExprAsStringLen( pCase->pExpr ) &&
                   memcmp( hb_compExprAsString( pExpr ),
                           hb_compExprAsString( pCase->pExpr ),
                           hb_compExprAsStringLen( pExpr ) ) == 0;
         }
         if( fGen )
         {
            hb_compGenJumpThere( hb_compGenJump( 0, HB_COMP_PARAM ),
                                 pCase->nOffset, HB_COMP_PARAM );
            break;
         }
         pCase = pCase->pNext;
      }
      if( pSwitch->nDefault && ! fGen )
      {
         hb_compGenJumpThere( hb_compGenJump( 0, HB_COMP_PARAM ),
                              pSwitch->nDefault, HB_COMP_PARAM );
      }
   }
   else
   {
      HB_BOOL fSwitchCase = HB_COMP_PARAM->fSwitchCase;
      HB_BOOL fMacroText = ( HB_COMP_PARAM->supported & HB_COMPFLAG_MACROTEXT ) != 0;

      pExpr = hb_compExprGenPush( pExpr, HB_COMP_PARAM );
      nCountPos = pFunc->nPCodePos + 1;
      hb_compGenPCode3( HB_P_SWITCH, 0, 0, HB_COMP_PARAM );
      HB_COMP_PARAM->fSwitchCase = HB_TRUE;
      HB_COMP_PARAM->supported &= ~HB_COMPFLAG_MACROTEXT;
      while( pCase )
      {
         if( hb_compExprIsLong( pCase->pExpr ) || hb_compExprIsString( pCase->pExpr ) )
         {
            iCount++;
            pCase->pExpr = hb_compExprGenPush( pCase->pExpr, HB_COMP_PARAM );
            hb_compGenJumpThere( hb_compGenJump( 0, HB_COMP_PARAM ),
                                 pCase->nOffset, HB_COMP_PARAM );
         }
         pCase = pCase->pNext;
      }
      if( pSwitch->nDefault )
      {
         iCount++;
         hb_compGenPCode1( HB_P_PUSHNIL, HB_COMP_PARAM );
         hb_compGenJumpThere( hb_compGenJump( 0, HB_COMP_PARAM ),
                              pSwitch->nDefault, HB_COMP_PARAM );
      }
      HB_PUT_LE_UINT16( pFunc->pCode + nCountPos, iCount );

      HB_COMP_PARAM->fSwitchCase = fSwitchCase;
      if( fMacroText )
         HB_COMP_PARAM->supported |= HB_COMPFLAG_MACROTEXT;
   }

   hb_compGenJumpHere( nExitPos, HB_COMP_PARAM );

   if( pExpr )
      HB_COMP_EXPR_FREE( pExpr );

   pCase = pSwitch->pCases;
   while( pCase )
   {
      HB_COMP_EXPR_FREE( pCase->pExpr );
      pTmp = pCase->pNext;
      hb_xfree( pCase );
      pCase = pTmp;
   }
   pFunc->pSwitch = pSwitch->pPrev;
   hb_xfree( pSwitch );
}

/* Release all switch statements
*/
void hb_compSwitchKill( HB_COMP_DECL, PHB_HFUNC pFunc )
{
   PHB_SWITCHCASE pCase;
   PHB_SWITCHCMD pSwitch;

   while( pFunc->pSwitch )
   {
      while( pFunc->pSwitch->pCases )
      {
         pCase = pFunc->pSwitch->pCases;
         HB_COMP_EXPR_FREE( pCase->pExpr );
         pFunc->pSwitch->pCases = pCase->pNext;
         hb_xfree( pCase );
      }
      pSwitch = pFunc->pSwitch;
      pFunc->pSwitch = pSwitch->pPrev;
      if( pSwitch->pExpr )
         HB_COMP_EXPR_FREE( pSwitch->pExpr );
      hb_xfree( pSwitch );
   }
}

static PHB_EXPR hb_compCheckPassByRef( HB_COMP_DECL, PHB_EXPR pExpr )
{
   if( pExpr->ExprType == HB_ET_FUNCALL )
   {
      if( hb_compExprParamListLen( pExpr->value.asFunCall.pParms ) == 0 )
      {
         PHB_EXPR pDelExpr = pExpr;
         if( pExpr->value.asFunCall.pFunName->ExprType == HB_ET_MACRO )
         {
            pExpr = pExpr->value.asFunCall.pFunName;
            HB_COMP_EXPR_CLEAR( pDelExpr );
         }
         else
         {
            pExpr = hb_compExprNewFunRef( hb_compExprAsSymbol( pExpr ), HB_COMP_PARAM );
            HB_COMP_EXPR_FREE( pDelExpr );
         }
         return pExpr;
      }
      else
      {
         const char * szDesc;

         szDesc = hb_compExprAsSymbol( pExpr );
         if( ! szDesc )
            szDesc = hb_compExprDescription( pExpr );

         return hb_compErrorRefer( HB_COMP_PARAM, pExpr, szDesc );
      }
   }

   return pExpr;
}

static PHB_EXPR hb_compCheckMethod( HB_COMP_DECL, PHB_EXPR pExpr )
{
   if( pExpr->value.asMessage.szMessage &&
       pExpr->value.asMessage.pObject &&
       pExpr->value.asMessage.pObject->ExprType == HB_ET_VARIABLE &&
       pExpr->value.asMessage.szMessage[ 0 ] == '_' &&
       strncmp( "__ENUM", pExpr->value.asMessage.szMessage, 6 ) == 0 )
   {
      const char * szMessage = pExpr->value.asMessage.szMessage + 6;

      if( strcmp( "INDEX",   szMessage ) == 0 ||
          strcmp( "KEY",     szMessage ) == 0 ||
          strcmp( "BASE",    szMessage ) == 0 ||
          strcmp( "VALUE",   szMessage ) == 0 ||
          strcmp( "ISFIRST", szMessage ) == 0 ||
          strcmp( "ISLAST",  szMessage ) == 0 )
      {
         int iDir = 0;
         if( ! hb_compForEachVarError( HB_COMP_PARAM, pExpr->value.asMessage.pObject->value.asSymbol.name, &iDir ) )
         {
            pExpr->value.asMessage.pObject->ExprType = HB_ET_VARREF;
#if 0
            if( iDir < 0 )
            {
               if( strcmp( "ISFIRST", szMessage ) == 0 )
                  pExpr->value.asMessage.szMessage = "__ENUMISLAST";
               else if( strcmp( "ISLAST",  szMessage ) == 0 )
                  pExpr->value.asMessage.szMessage = "__ENUMISFIRST";
            }
#endif
         }
      }
   }

   return pExpr;
}

static void hb_compErrStru( HB_COMP_DECL, int iError )
{
   hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', iError, NULL, NULL );
}

static void hb_compErrUnclosed( HB_COMP_DECL, const char * szStru )
{
   HB_COMP_PARAM->fError = HB_FALSE;
   hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, szStru, NULL );
}

/* ************************************************************************* */

HB_BOOL hb_compCheckUnclosedStru( HB_COMP_DECL, PHB_HFUNC pFunc )
{
   HB_BOOL fUnclosed = HB_TRUE;

   if( pFunc->wIfCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "IF", NULL );
      pFunc->wIfCounter = 0;
   }
   else if( pFunc->wForCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "FOR", NULL );
      pFunc->wForCounter = 0;
   }
   else if( pFunc->wWhileCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "WHILE", NULL );
      pFunc->wWhileCounter = 0;
   }
   else if( pFunc->wCaseCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "CASE", NULL );
      pFunc->wCaseCounter = 0;
   }
   else if( pFunc->wSwitchCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "SWITCH", NULL );
      pFunc->wSwitchCounter = 0;
   }
   else if( pFunc->wWithObjectCnt )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "WITH OBJECT", NULL );
      pFunc->wWithObjectCnt = 0;
   }
   else if( pFunc->wSeqCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "BEGIN SEQUENCE", NULL );
      pFunc->wSeqCounter = 0;
   }
   else if( pFunc->funFlags & HB_FUNF_EXTBLOCK )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "{||...}", NULL );
      pFunc->funFlags &= ~HB_FUNF_EXTBLOCK;
   }
   else
      fUnclosed = HB_FALSE;

   return fUnclosed;
}

void yyerror( HB_COMP_DECL, const char * s )
{
   if( ! HB_COMP_PARAM->pLex->lasttok || HB_COMP_PARAM->pLex->lasttok[ 0 ] == '\n' )
   {
      if( HB_COMP_PARAM->iErrorCount == 0 || ! hb_pp_eof( HB_COMP_PARAM->pLex->pPP ) )
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_INCOMPLETE_STMT, NULL, NULL );
   }
   else if( HB_COMP_PARAM->pLex->iState == NEXT )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_NEXTFOR );
   else if( HB_COMP_PARAM->pLex->iState == ELSE )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_UNMATCHED_ELSE );
   else if( HB_COMP_PARAM->pLex->iState == ELSEIF )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_UNMATCHED_ELSEIF );
   else if( HB_COMP_PARAM->pLex->iState == ENDIF || HB_COMP_PARAM->pLex->iState == END )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDIF );
   else if( HB_COMP_PARAM->pLex->iState == CASE || HB_COMP_PARAM->pLex->iState == OTHERWISE )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_CASE );
   else if( HB_COMP_PARAM->pLex->iState == ENDCASE )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDCASE );
   else if( HB_COMP_PARAM->pLex->iState == ENDDO )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDDO );
   else if( HB_COMP_PARAM->pLex->iState == ENDWITH )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDWITH );
   else if( HB_COMP_PARAM->pLex->iState == ENDSEQ )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDSEQ );
   else if( HB_COMP_PARAM->pLex->iState == ENDSWITCH )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDSWITCH );
   else
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_YACC, s, HB_COMP_PARAM->pLex->lasttok );
}

